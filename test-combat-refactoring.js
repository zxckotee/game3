/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Combat Service
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ–æ—Ä–º—É–ª HP/Energy –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é physicalAttack
 */

const CharacterStatsService = require('./src/services/character-stats-service');

// –ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockCombatState = {
  primary: {
    level: 5,
    health: 20,
    energy: 60,
    strength: 15,
    intellect: 10,
    spirit: 12,
    agility: 8,
    luck: 5
  },
  secondary: {
    physicalAttack: 25,
    physicalDefense: 15,
    spiritualAttack: 18,
    spiritualDefense: 12,
    criticalChance: 8,
    attackSpeed: 6,
    movementSpeed: 4
  }
};

async function testUnifiedFormulas() {
  console.log('=== –¢–ï–°–¢ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–• –§–û–†–ú–£–õ HP/ENERGY ===');
  
  const level = 5;
  const healthStat = 20;
  const energyStat = 60;
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const maxHp = CharacterStatsService.calculateMaxHp(level, healthStat);
  const maxEnergy = CharacterStatsService.calculateMaxEnergy(level, energyStat);
  
  console.log(`–£—Ä–æ–≤–µ–Ω—å: ${level}, –ó–¥–æ—Ä–æ–≤—å–µ: ${healthStat}, –≠–Ω–µ—Ä–≥–∏—è: ${energyStat}`);
  console.log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ MaxHP: ${maxHp} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${100 + (level * 2) + (healthStat * 2)})`);
  console.log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è MaxEnergy: ${maxEnergy} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${50 + (level * 1) + (energyStat * 1)})`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª
  const expectedMaxHp = 100 + (level * 2) + (healthStat * 2); // 100 + 10 + 40 = 150
  const expectedMaxEnergy = 50 + (level * 1) + (energyStat * 1); // 50 + 5 + 60 = 115
  
  if (maxHp === expectedMaxHp && maxEnergy === expectedMaxEnergy) {
    console.log('‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∞—Ö');
  }
  
  console.log('');
}

function testDamageCalculation() {
  console.log('=== –¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê –£–†–û–ù–ê –° PHYSICALATTACK ===');
  
  // –ú–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const attackerState = {
    baseStats: { level: 5 },
    secondaryStats: {
      physicalAttack: 25,
      spiritualAttack: 18,
      criticalChance: 8
    },
    effects: []
  };
  
  const defenderState = {
    maxHp: 150,
    secondaryStats: {
      physicalDefense: 10,
      spiritualDefense: 8,
      luck: 5
    },
    effects: []
  };
  
  console.log('–ê—Ç–∞–∫—É—é—â–∏–π:');
  console.log(`  physicalAttack: ${attackerState.secondaryStats.physicalAttack}`);
  console.log(`  spiritualAttack: ${attackerState.secondaryStats.spiritualAttack}`);
  
  console.log('–ó–∞—â–∏—â–∞—é—â–∏–π—Å—è:');
  console.log(`  physicalDefense: ${defenderState.secondaryStats.physicalDefense}`);
  console.log(`  spiritualDefense: ${defenderState.secondaryStats.spiritualDefense}`);
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞
  const physicalBaseDamage = attackerState.secondaryStats.physicalAttack;
  const physicalDefense = defenderState.secondaryStats.physicalDefense;
  const physicalFinalDamage = Math.max(1, physicalBaseDamage - physicalDefense);
  
  console.log(`–§–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: ${physicalBaseDamage} - ${physicalDefense} = ${physicalFinalDamage}`);
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —É—Ä–æ–Ω–∞
  const spiritualBaseDamage = attackerState.secondaryStats.spiritualAttack;
  const spiritualDefense = defenderState.secondaryStats.spiritualDefense;
  const spiritualFinalDamage = Math.max(1, spiritualBaseDamage - spiritualDefense);
  
  console.log(`–î—É—Ö–æ–≤–Ω—ã–π —É—Ä–æ–Ω: ${spiritualBaseDamage} - ${spiritualDefense} = ${spiritualFinalDamage}`);
  
  if (physicalFinalDamage > 1 && spiritualFinalDamage > 1) {
    console.log('‚úÖ –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∞—Ç–∞–∫–∏ –∏ –∑–∞—â–∏—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —É—Ä–æ–Ω–∞');
  }
  
  console.log('');
}

function testEquipmentEffectsIntegration() {
  console.log('=== –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –≠–§–§–ï–ö–¢–û–í –≠–ö–ò–ü–ò–†–û–í–ö–ò ===');
  
  // –°–∏–º—É–ª—è—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const equipmentEffects = [
    {
      target: 'strength',
      value: 5,
      operation: 'absolute'
    },
    {
      target: 'physicalAttack',
      value: 8,
      operation: 'absolute'
    }
  ];
  
  console.log('–≠—Ñ—Ñ–µ–∫—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:');
  equipmentEffects.forEach(effect => {
    console.log(`  ${effect.target}: +${effect.value} (${effect.operation})`);
  });
  
  // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  let baseStrength = 15;
  let basePhysicalAttack = 20;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
  const strengthBonus = equipmentEffects.find(e => e.target === 'strength')?.value || 0;
  const physicalAttackBonus = equipmentEffects.find(e => e.target === 'physicalAttack')?.value || 0;
  
  const finalStrength = baseStrength + strengthBonus;
  const finalPhysicalAttack = basePhysicalAttack + physicalAttackBonus;
  
  console.log(`–°–∏–ª–∞: ${baseStrength} + ${strengthBonus} = ${finalStrength}`);
  console.log(`–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞: ${basePhysicalAttack} + ${physicalAttackBonus} = ${finalPhysicalAttack}`);
  
  if (finalStrength === 20 && finalPhysicalAttack === 28) {
    console.log('‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏');
  }
  
  console.log('');
}

async function runTests() {
  console.log('üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê COMBAT SERVICE\n');
  
  try {
    await testUnifiedFormulas();
    testDamageCalculation();
    testEquipmentEffectsIntegration();
    
    console.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª HP/Energy —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ physicalAttack –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ä–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞');
    console.log('‚úÖ –ó–∞—â–∏—Ç–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–µ —É—Ä–æ–Ω–∞');
    console.log('‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests();
}

module.exports = {
  testUnifiedFormulas,
  testDamageCalculation,
  testEquipmentEffectsIntegration,
  runTests
};