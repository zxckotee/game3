

## Изменения от 17.04.2025

### Добавлено
- Система скидок на рынке в зависимости от отношений/лояльности с персонажами
- Автоматическая синхронизация лояльности секты с социальными отношениями
- Дополнительные питомцы и предметы для них
- Инструменты разработчика для управления системой эффектов

### Исправлено
- Устранены ошибки с отображением некоторых предметов на рынке
- Исправлен подсчет валюты после покупки/продажи предметов
- Улучшена производительность при большом количестве эффектов

### Улучшено
- Визуальное отображение скидок на товары на рынке
- Детальная информация о связи предметов с сектами и фракциями
- Улучшенная логика восстановления запасов у торговцев

# Реализация системы скидок на рынке и синхронизации отношений (17.04.2025)

- Реализована система скидок на рынке в зависимости от уровня отношений/лояльности с персонажами
- Создан модуль sectRelationshipSyncer.js для расчета скидок и синхронизации отношений
- Внедрена формула расчета скидок на основе лояльности: скидка = лояльность/10 (например, 50 лояльности = 5% скидки)
- Максимальная скидка ограничена 50%, чтобы избежать чрезмерно больших скидок
- Реализована автоматическая синхронизация лояльности секты с социальными отношениями игрока
- Обновлен механизм отображения цен на рынке для показа оригинальной и сниженной цены
- Добавлено отображение процента скидки рядом с ценой товара
- Улучшен торговый интерфейс для отображения перечеркнутой оригинальной цены и сниженной цены
- Обновлена система покупки и продажи предметов для учета индивидуальных скидок у разных торговцев
- Оптимизирован механизм обновления торгового интерфейса при изменении отношений с торговцами

# Исправление работы с эффектами и обработки ID (17.04.2025)

- Исправлена критическая ошибка "sectBenefits.find is not a function" путем переработки механизма обработки эффектов
- Полностью переработан механизм идентификации эффектов: теперь используется тип эффекта вместо ID
- Удалены поля `id` и `source` из эффектов, чтобы предотвратить проблемы с группировкой
- Добавлена функция `cleanEffects` в sectUtils.js для очистки существующих эффектов
- Обновлен механизм обработки эффектов в `playerReducer.js` для работы с типами вместо ID
- Улучшена функция `mergeEffects` для предварительной очистки входных массивов эффектов
- Добавлено автоматическое удаление информации об источнике из названий эффектов
- Улучшено объединение эффектов одного типа с сохранением наиболее информативного имени
- Оптимизирована функция `normalizePlayerEffects` для гарантированной очистки входных и выходных эффектов
- Добавлено дополнительное логирование в sectReducer для лучшей диагностики работы с эффектами
- Обновлена логика обработки обновлений эффектов (ADD_STATUS_EFFECT, UPDATE_STATUS_EFFECT, REMOVE_STATUS_EFFECT)
- Оптимизирован поток обработки эффектов для предотвращения повторения ошибки

# Улучшение системы нормализации эффектов (16.04.2025)

- Добавлен новый тип действия ACTION_TYPES.NORMALIZE_EFFECTS в actionTypes.js для нормализации эффектов
- Реализована автоматическая проверка и нормализация эффектов при загрузке игры в GameContextProvider.js
- Добавлена функция normalizeEffectsAction() в GameContextProvider.js для централизованной нормализации
- Обновлен playerReducer.js для использования константы ACTION_TYPES.NORMALIZE_EFFECTS вместо строкового литерала
- Добавлены новые консольные команды для управления эффектами:
  - dispatchNormalizeEffectsAction() или нормализоватьЭффектыЧерезРедукс() - нормализует эффекты через Redux (рекомендуемый способ)
- Улучшена обработка эффектов в редукторе с более подробным логированием
- Исправлена ошибка "sectBenefits.find is not a function", возникающая из-за неправильного формата эффектов

# Исправление структуры данных эффектов (16.04.2025)

- Добавлен новый утилитарный модуль effectsNormalizer.js для нормализации эффектов персонажа
- Исправлен формат статус-эффектов: теперь они хранятся в виде массива с числовыми индексами вместо объекта с именованными ключами
- Реализовано автоматическое включение бонусов секты в список эффектов с суммированием одинаковых типов
- Обновлен playerReducer.js для поддержки новой структуры данных и работы с эффектами
- Добавлены консольные команды для управления эффектами:
  - printEffectsData() или показатьЭффекты() - показывает текущие эффекты персонажа
  - normalizeEffectsData() или нормализоватьЭффекты() - нормализует эффекты персонажа напрямую
  - repairAllEffects() или восстановитьЭффекты() - комплексное восстановление эффектов
- Интегрирован механизм суммирования эффектов одного типа с учетом знака (+/-)

# Исправление структуры данных сект (16.04.2025)

- Добавлен новый утилитарный модуль sectUtils.js для нормализации данных о сектах
- Исправлен формат бонусов сект: теперь они хранятся в виде массива объектов {type, modifier}
- Реализовано автоматическое преобразование устаревшего формата данных в новый при загрузке игры
- Обновлен редуктор сект для поддержки нормализации данных
- Добавлены консольные команды для проверки и исправления формата данных:
  - printSectData() - показывает текущие данные о секте в консоли
  - normalizeSectData() - проверяет и исправляет формат данных секты
- Обновлен компонент SectTab для корректной работы с обоими форматами данных
- Добавлена проверка и нормализация данных при инициализации игры
- Исправлена ошибка "sectBenefits.find is not a function" и предотвращено её повторное возникновение

# Обновление системы питомцев (15.04.2025)

- Добавлена возможность потери питомца в бою при низком уровне лояльности (меньше 25%)
- Улучшен визуальный интерфейс с предупреждениями о низкой лояльности питомца
- Отображение статуса питомца в логе боя
- Улучшены индикаторы ресурсов питомца с соответствующими иконками
- Добавлено предупреждение о возможном бегстве питомца в интерфейс детальной информации
- Удалено отображение карточки питомца в боевом интерфейсе для упрощения UI
- Изменена формула снижения лояльности питомца после атаки: теперь обратно пропорциональна сытости (1/сытость*100)
- Исправлена ошибка с отсутствием снижения сытости и лояльности питомца после использования способности в бою
- Добавлен подробный лог изменений сытости и лояльности питомца в консоль и боевой лог

window.startStateLogging() - запускает вывод состояния игры каждые 3 секунды
window.startStateLogging(5000) - запускает вывод состояния с указанным интервалом (в мс)
window.stopStateLogging() - останавливает вывод состояния
window.getLastLoggedState() - получает последнее записанное состояние
window.getGameDebugInfo() - показывает информацию о доступности данных игры
window.refreshGameState() - принудительно обновляет состояние игры

2025-04-12:
- Улучшена система торговли с купцами:
  - Исправлено уменьшение количества товаров у торговцев после покупки
  - Реализовано постепенное восстановление товаров у торговцев со временем (с учетом параметра restockRate)
  - Добавлена фильтрация товаров - скрытие предметов с нулевым количеством из списка
  - Оптимизировано обновление интерфейса рынка после совершения покупок
  - Исправлена обработка продажи предметов: теперь при продаже увеличивается количество у торговца
  - Добавлена логика определения подходящего торговца при продаже новых типов предметов

- Улучшена система сохранения и восстановления боя:
  - Добавлено полное сохранение состояния боя в состояние игрока
  - Исправлена проблема с нулевым здоровьем противника при загрузке сохранения
  - Добавлено восстановление здоровья противника до 30% от максимального при загрузке поврежденного состояния
  - Исправлено восстановление боевого лога и хода игрока при загрузке сохраненного боя
  - Добавлена проверка наличия атак у противника для правильной работы ИИ
  - Добавлено хранение результатов завершенных боев в состоянии игрока
  - Обновлено initialState.js для поддержки новых полей в объекте состояния

2025-04-11:
- Внесены исправления в систему эффектов:
  - Добавлены русские названия для всех типов эффектов, включая погодные эффекты
  - Реализовано правильное форматирование процентных значений (дробные значения умножаются на 100)
  - Добавлено влияние эффектов на боевую систему (эффекты наносимого урона и других характеристик)
  - Устранено дублирование эффектов одного типа: теперь сохраняется только максимальное значение
  - Добавлена единая логика обработки эффектов через функцию collectAllEffects()
  - Обновлен компонент ActiveEffectsPanel для корректного отображения всех типов эффектов
  - Модифицирован EffectsSynchronizer для правильной передачи эффектов в бой
  - Обновлен CombatManager для учета эффектов при расчете урона

2025-04-10:
- Исправлена ошибка сохранения и загрузки техник:
  - Исправлена проблема с сбросом параметров техник (урон, кулдаун и др.) при выходе из игры
  - Добавлен механизм автоматического восстановления техник при загрузке игры
  - Улучшена логика сохранения техник при выходе из игры (команда beforeunload)
  - Добавлена консольная команда repairAllTechniques() для ручного восстановления техник
  - Добавлена русскоязычная версия команды восстановитьТехники()
  - Оптимизирован механизм восстановления техник для предотвращения ошибок инициализации

- Исправлены ошибки отображения характеристик и эффектов персонажа:
  - Исправлена проблема с отображением здоровья (10/100 вместо 100/100) при входе в бой
  - Исправлена проблема с отображением энергии (0/100 вместо 100/100) при входе в бой
  - Улучшена логика отображения статус-эффектов персонажа
  - Включено отображение полосы энергии в боевом интерфейсе
  - Добавлен отладочный вывод для более удобного выявления проблем с характеристиками
  - Добавлена корректная обработка эффектов в компоненте ActiveEffectsPanel.js
  - Изменена логика инициализации боя: теперь при входе в бой всегда устанавливаются максимальные значения здоровья и энергии
  - Исправлено начальное состояние игрока: установлены корректные начальные значения здоровья и энергии в initialState.js
  - Устранено дублирование параметров здоровья и энергии в объекте состояния игрока
  - Улучшен механизм отображения здоровья и энергии в отладочных инструментах
  - Исправлен конфликт между отображением статистики в консоли и фактических значений в бою:
    - Добавлена умная функция getPlayerVitalStats(), которая определяет приоритетный источник данных
    - Добавлены data-атрибуты к индикаторам здоровья и энергии для доступа из консоли
    - Добавлены консольные команды showPlayerInfo() и показатьИгрока() для вывода актуальной информации
    - Реализовано автоматическое определение и использование боевого состояния при нахождении в бою

2025-03-31:
- Исправлены критические ошибки в погодной системе и механизме смены сезонов:
  - Исправлена ошибка "Assignment to constant variable", возникающая при пересечении границы сезонов (день 31 из 30)
  - Улучшена синхронизация сезонов между world.time и weather: теперь они всегда согласованы
  - Добавлена корректная обработка смены сезонов при переходе через максимальную длину сезона
  - Реализовано правильное вычисление дня сезона (1-30) и текущего сезона с учетом цикличности
  - Обеспечена целостность данных времени и погоды при инициализации состояния
  - Исправлена ошибка "0 мин. игрового времени до смены погоды" - система теперь корректно отсчитывает время
  - Улучшена обработка синхронизации в обработчиках DIRECT_UPDATE_WEATHER_TIME, DIRECT_FORCE_SYNC_WEATHER_TIME и DIRECT_ADD_GAME_HOURS

2025-03-24:
  - Реализована комплексная система репутации:
    - Создана базовая инфраструктура системы репутации с моделями для городов и фракций
    - Добавлен механизм отслеживания репутации в разных сферах влияния (боевая, торговая, духовная, алхимическая, политическая)
    - Реализована система взаимосвязей между различными типами репутации
    - Созданы модели Reputation, ReputationFeature и ReputationRelation для хранения данных о репутации
    - Добавлен сервис ReputationService для работы с репутацией
    - Интегрирована система уровней репутации от "Враждебный" до "Легендарный"
    - Разработаны уникальные возможности в каждом городе, доступные при определенных уровнях репутации
    - Добавлен интерфейс для отображения и управления репутацией
    - Реализована система уведомлений об изменении репутации и получении новых возможностей
    - Разработан механизм влияния репутации на цены в магазинах и отношение NPC
    - Интегрирована система репутации с существующими системами квестов, боя и торговли

2025-03-22:
  - Реализована динамическая система смены дня и ночи, влияющая на типы встречаемых существ
  - Добавлены погодные явления с влиянием на геймплей (дождь снижает видимость, гроза усиливает молниевые техники)
  - Добавлены сезонные изменения, влияющие на доступность ресурсов
  - Реализованы особые духовные феномены в мире игры
  - Создан компонент GameTimeUpdater для автоматического обновления времени и погоды
  - Расширена система врагов с учетом времени суток и погоды
  - Добавлены новые типы существ, появляющихся только в определенное время суток
  - Реализованы погодные эффекты, влияющие на бой, культивацию и исследование мира
  - Обновлены интерфейсы MapTab и CombatArea для отображения информации о погоде и времени суток
  - Создана middleware-система для обработки погодных изменений в GameContext

2025-03-18:
  - Исправлены ошибки культивизации
  - Добавлены модель погоды(src/models/weather-system.js) и сервис работы с ней (src/services/weather-service.js)

2025-03-12:
- Исправлена ошибка сборки Docker-образа:
  - Исправлен импорт в файле App.js: заменен импорт `GameProvider` на `GameContextProvider` для соответствия экспортам из файла GameContext.js
  - Исправлено использование компонента в JSX: заменен `<GameProvider>` на `<GameContextProvider>`
  - Добавлен экспорт `useGame` в файл GameContext.js для обратной совместимости с компонентами, использующими этот хук

- Исправлена ошибка "Cannot read properties of undefined (reading 'define')" в моделях алхимии:
  - Исправлен импорт в файле alchemy-recipe.js: заменен импорт из 'sequelize' на импорт из '../services/database'
  - Исправлен импорт в файле recipe-ingredient.js: заменен импорт из 'sequelize' на импорт из '../services/database'
  - Исправлен импорт в файле alchemy-result.js: заменен импорт из 'sequelize' на импорт из '../services/database'

- Исправлена ошибка "Cannot read properties of undefined (reading 'define')" в модели духовных питомцев:
  - Исправлен импорт в файле spirit-pet.js: заменен импорт из 'sequelize' на импорт из '../services/database'

2025-03-10:
- Реорганизована структура файла GameContext.js для улучшения поддержки и масштабируемости:
  - Разделен большой файл GameContext.js (более 800 строк) на несколько более мелких модулей
  - Создана папка src/context/state с файлом initialState.js, содержащим начальное состояние игры
  - Создана папка src/context/actions с файлом actionTypes.js, содержащим типы действий
  - Создана папка src/context/reducers с отдельными редукторами для разных аспектов игры:
    - playerReducer.js - для обработки действий, связанных с игроком
    - uiReducer.js - для обработки действий, связанных с интерфейсом
    - worldReducer.js - для обработки действий, связанных с игровым миром
    - combatReducer.js - для обработки действий, связанных с боевой системой
    - questsReducer.js - для обработки действий, связанных с квестами
    - achievementsReducer.js - для обработки действий, связанных с достижениями
    - spiritPetsReducer.js - для обработки действий, связанных с духовными питомцами
    - gameStateReducer.js - для обработки действий, связанных с сохранением и загрузкой игры
    - rootReducer.js - корневой редуктор, объединяющий все остальные редукторы
  - Создан файл GameContextProvider.js, содержащий провайдер контекста и логику инициализации
  - Обновлен файл GameContext.js для реэкспорта компонентов из GameContextProvider.js
  - Обновлена документация в structure.md для отражения новой структуры проекта

- Исправлена проблема с несогласованностью между техниками, заданиями и достижениями:
  - Добавлены недостающие техники в файл techniques.js: "Дыхание Небес", "Искусство Багряного Пламени", "Искусство Небесного Меча", "Искусство Бессмертного Меча"
  - Создана модель TechniqueEffect для хранения эффектов техник в базе данных
  - Обновлена модель Technique для поддержки всех необходимых полей и связи с эффектами
  - Созданы миграции для обновления таблицы Techniques и создания таблицы TechniqueEffects
  - Обновлен сервис TechniqueService для работы с обновленными моделями
  - Обновлен сидер техник для правильной загрузки техник и их эффектов в базу данных
  - Обновлены обработчики действий в GameContext.js для получения техник из наград за задания и достижения
  - Добавлен метод getTechniqueByName в TechniqueService для получения техники по названию
  - Обновлен DatabaseInitializer для инициализации связей между моделями Technique и TechniqueEffect

- Добавлена система алхимии и создания предметов:
  - Создана модель AlchemyRecipe для хранения рецептов алхимии
  - Создана модель RecipeIngredient для хранения ингредиентов рецептов
  - Создана модель AlchemyResult для хранения результатов алхимии
  - Создан сервис AlchemyService для работы с алхимией
  - Создан компонент AlchemyTab для интерфейса алхимии
  - Добавлена вкладка "Алхимия" в основной интерфейс игры
  - Добавлены базовые рецепты для создания пилюль, талисманов, оружия и брони
  - Реализована интеграция с реальным сервисом алхимии вместо моковых данных
  - Добавлена визуализация процесса создания предметов с анимацией
  - Улучшено отображение результатов создания предметов
  - Добавлены индикаторы загрузки и обработки ошибок
  - Реализована категоризация рецептов по типам (пилюли, талисманы, оружие, броня)
  - Добавлена проверка наличия ингредиентов в инвентаре игрока
  - Реализован расчет шанса успеха создания предмета с учетом характеристик игрока

- Улучшен интерфейс вкладки "Прорыв" в CultivationTab.js:
  - Изменено отображение недостающих ресурсов: теперь вместо "Ресурсы: Недостаточно" отображается список конкретных ресурсов, которых не хватает, с указанием текущего и требуемого количества

- Исправлена ошибка "value is not a function" в SkillsTab.js:
  - Добавлена функция upgradeCost к каждой технике в файле techniques.js
  - Добавлены свойства maxLevel, type и requiredLevel к каждой технике
  - Исправлено отображение эффектов техник в SkillsTab.js (обработка effects как массива, а не объекта)

- Исправлена ошибка "techniques is not defined" в CombatManager.js:
  - Добавлен импорт объекта techniques из файла combat.js
  - Удалена лишняя цифра в начале файла, вызывавшая синтаксическую ошибку
  
- Исправлена ошибка с использованием keyframes в styled-components:
  - Добавлен импорт хелпера css из styled-components в CultivationTabStyles.js
  - Обернуты все строки с интерполяцией keyframes в хелпер css``
  - Создан новый компонент TribulationProgressBar для замены inline стилей с анимацией
  - Заменено использование inline стилей с анимацией на новый компонент в CultivationTab.js
- Исправлена ошибка с прогрессом "бутылочного горлышка" в CultivationTab.js:
  - Изменена логика инициализации переменной bottleneckProgress для корректного получения текущего значения из состояния
  - Добавлена проверка на undefined для предотвращения сброса прогресса
  - Добавлено логирование в консоль для отладки обновления прогресса
  - Улучшена обработка обновления прогресса при медитации

2025-03-09:
- Исправлена ошибка сборки Docker-образа:
  - Добавлен флаг --force к команде npm install для преодоления проблем с совместимостью
  - Добавлена явная установка пакета ajv версии 8.12.0 для решения ошибки "Cannot find module 'ajv/dist/compile/codegen'"
  - Исправлена ошибка с пакетом performance-now при сборке Docker-образа

- Перенесены данные из файла resources.js в базу данных:
  - Создана модель Resource для хранения данных о ресурсах
  - Создана миграция для создания таблицы Resources
  - Создан сервис ResourceService для работы с ресурсами в базе данных
  - Обновлены все зависимости от файла resources.js для использования нового сервиса
  - Добавлена инициализация ресурсов в базе данных при запуске приложения
- Исправлена ошибка в Dockerfile при установке npm
