/**
 * –ú–∞—Ä—à—Ä—É—Ç—ã API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–∞–≥–∞–º–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã –∫ API –≤—Ä–∞–≥–æ–≤
 */

const express = require('express');
const router = express.Router();
const { validateAuth, validateAdmin } = require('../middleware/auth-middleware');
const { calculateETag } = require('../../utils/etag-utils');
const EnemyService = require('../../services/enemy-service');

// ==============================
// –ú–ê–†–®–†–£–¢–´ API –î–õ–Ø –í–†–ê–ì–û–í
// ==============================
 

/**
 * @route GET /api/enemies
 * @desc –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
 * @access Public
 */
router.get('/api/enemies', async (req, res) => {
  try {
    console.log('–∑–∞–ø—Ä–æ—Å –≤ enemies');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
    const enemies = await EnemyService.getAllEnemies();
    
    console.log('–ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê –ù–ê [API] enemies');
    
    // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç, –≤–µ—Ä–Ω–µ–º —Ö–æ—Ç—è –±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω
    if (enemies.length === 0) {
      const defaultEnemies = [{
        id: 'training_dummy',
        name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω',
        icon: 'üéØ',
        description: '–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤.',
        level: 1,
        category: 'construct',
        experience: 10,
        stats: {
          health: 50,
          energy: 0,
          physicalDefense: 5,
          spiritualDefense: 0,
          accuracy: 50,
          evasion: 0
        }
      }];
      
      return res.json(defaultEnemies);
    }
    
    res.json(enemies);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω
    const defaultEnemies = [{
      id: 'training_dummy',
      name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω',
      icon: 'üéØ',
      description: '–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤.',
      level: 1,
      category: 'construct',
      experience: 10,
      stats: {
        health: 50,
        energy: 0,
        physicalDefense: 5,
        spiritualDefense: 0,
        accuracy: 50,
        evasion: 0
      }
    }];
    
    res.json(defaultEnemies);
  }
});

/**
 * @route GET /api/enemies/:id
 * @desc –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞–≥–∞ –ø–æ ID
 * @access Public
 */

router.get('/api/enemies/:id', async (req, res) => {
  try {
    const enemyId = req.params.id;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞–≥–∞ –ø–æ ID
    const enemy = await EnemyService.getEnemyById(enemyId);
    
    if (!enemy) {
      return res.status(404).json({ message: '–í—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(enemy);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞ —Å ID ${req.params.id}:`, error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è training_dummy
    if (req.params.id === 'training_dummy') {
      const defaultEnemy = {
        id: 'training_dummy',
        name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω',
        icon: 'üéØ',
        description: '–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤.',
        level: 1,
        category: 'construct',
        experience: 10,
        stats: {
          health: 50,
          energy: 0,
          physicalDefense: 5,
          spiritualDefense: 0,
          accuracy: 50,
          evasion: 0
        },
        attacks: [{
          id: 1,
          name: '–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞',
          damage: 5,
          type: 'physical',
          chance: 30,
          energy_cost: 0,
          effects: []
        }],
        loot: [{
          itemId: 'wood_splinter',
          name: '–©–µ–ø–∫–∞',
          chance: 50,
          icon: 'ü™µ'
        }],
        currency: {
          minAmount: 1,
          maxAmount: 3
        }
      };
      
      return res.json(defaultEnemy);
    }
    
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞' });
  }
});


/**
 * @route GET /api/enemies/category/:category
 * @desc –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @access Public
 */
router.get('/api/enemies/category/:category', async (req, res) => {
  try {
    const category = req.params.category;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const enemies = await EnemyService.getEnemiesByCategory(category);
    
    res.json(enemies);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${req.params.category}:`, error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});


/**
 * @route GET /api/enemies/location/:locationId
 * @desc –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
 * @access Public
 */
router.get('/api/enemies/location/:locationId', async (req, res) => {
  try {
    const locationId = req.params.locationId;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    const enemies = await EnemyService.getEnemiesByLocation(locationId);
    
    res.json(enemies);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${req.params.locationId}:`, error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–æ–≤ –ø–æ –ª–æ–∫–∞—Ü–∏–∏' });
  }
});

/**
 * @route GET /api/enemies/modifiers/time
 * @desc –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –¥–ª—è –≤—Ä–∞–≥–æ–≤
 * @access Public
 */
router.get('/api/enemies/modifiers/time', async (req, res) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    const modifiers = await EnemyService.getTimeOfDaySpawnModifiers();
    
    res.json(modifiers);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–∏—Å —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const modifiers = await EnemyService.getTimeOfDaySpawnModifiers();
    console.warn('–í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    res.json(modifiers);
  }
});

/**
 * @route GET /api/enemies/modifiers/weather
 * @desc –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—Ä–∞–≥–æ–≤
 * @access Public
 */
router.get('/api/enemies/modifiers/weather', async (req, res) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–≥–æ–¥—ã
    const modifiers = await EnemyService.getWeatherSpawnModifiers();
    
    res.json(modifiers);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–≥–æ–¥—ã:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–∏—Å —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const modifiers = await EnemyService.getWeatherSpawnModifiers();
    console.warn('–í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    res.json(modifiers); // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É
  }
});

/**
 * @route POST /api/enemies
 * @desc –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
 * @access Admin
 */
router.post('/api/enemies', validateAdmin, async (req, res) => {
  try {
    const enemyData = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!enemyData.id || !enemyData.name || !enemyData.category) {
      return res.status(400).json({
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (id), –∏–º—è (name) –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (category) –≤—Ä–∞–≥–∞'
      });
    }
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
      const createdEnemy = await EnemyService.addNewEnemy(enemyData);
      
      res.status(201).json(createdEnemy);
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.name === 'SequelizeUniqueConstraintError') {
        return res.status(400).json({ message: '–í—Ä–∞–≥ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
      
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ try-catch
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞' });
  }
});

/**
 * @route PUT /api/enemies/:id
 * @desc –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤—Ä–∞–≥–∞
 * @access Admin
 */
router.put('/api/enemies/:id', validateAdmin, async (req, res) => {
  try {
    const enemyId = req.params.id;
    const enemyData = req.body;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–∞–≥–∞
    const updatedEnemy = await EnemyService.updateEnemy(enemyId, enemyData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!updatedEnemy) {
      return res.status(404).json({ message: '–í—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(updatedEnemy);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞ —Å ID ${req.params.id}:`, error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞' });
  }
});

/**
 * @route DELETE /api/enemies/:id
 * @desc –£–¥–∞–ª–∏—Ç—å –≤—Ä–∞–≥–∞
 * @access Admin
 */
router.delete('/api/enemies/:id', validateAdmin, async (req, res) => {
  try {
    const enemyId = req.params.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä sequelize
    const sequelizeDb = await getSequelizeInstance();
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await sequelizeDb.query('BEGIN');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Ä–∞–≥
      const existingEnemy = await sequelizeDb.query(
        `SELECT id FROM enemies WHERE id = :enemyId LIMIT 1`,
        {
          replacements: { enemyId },
          type: Sequelize.QueryTypes.SELECT
        }
      );
      
      if (existingEnemy.length === 0) {
        await sequelizeDb.query('ROLLBACK');
        return res.status(404).json({ message: '–í—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await sequelizeDb.query(
        `DELETE FROM enemy_stats WHERE enemy_id = :enemyId`,
        {
          replacements: { enemyId },
          type: Sequelize.QueryTypes.DELETE
        }
      );
      
      await sequelizeDb.query(
        `DELETE FROM enemy_attacks WHERE enemy_id = :enemyId`,
        {
          replacements: { enemyId },
          type: Sequelize.QueryTypes.DELETE
        }
      );
      
      await sequelizeDb.query(
        `DELETE FROM enemy_loot WHERE enemy_id = :enemyId`,
        {
          replacements: { enemyId },
          type: Sequelize.QueryTypes.DELETE
        }
      );
      
      await sequelizeDb.query(
        `DELETE FROM enemy_currency WHERE enemy_id = :enemyId`,
        {
          replacements: { enemyId },
          type: Sequelize.QueryTypes.DELETE
        }
      );
      
      await sequelizeDb.query(
        `DELETE FROM enemy_spawns WHERE enemy_id = :enemyId`,
        {
          replacements: { enemyId },
          type: Sequelize.QueryTypes.DELETE
        }
      );
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –≤—Ä–∞–≥–∞
      await sequelizeDb.query(
        `DELETE FROM enemies WHERE id = :enemyId`,
        {
          replacements: { enemyId },
          type: Sequelize.QueryTypes.DELETE
        }
      );
      
      // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await sequelizeDb.query('COMMIT');
      
      res.json({ message: '–í—Ä–∞–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await sequelizeDb.query('ROLLBACK');
      throw error;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞ —Å ID ${req.params.id}:`, error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞' });
  }
});

module.exports = router;