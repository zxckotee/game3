import React from 'react';
import styled from 'styled-components';
import { useGame } from '../../context/GameContext';
import useTimeWeather from '../../hooks/useTimeWeather';

// –°—Ç–∏–ª–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
const DetailContainer = styled.div`
  background-color: rgba(20, 20, 20, 0.9);
  border: 1px solid #555;
  border-radius: 8px;
  padding: 20px;
  color: #fff;
  font-family: 'Arial', sans-serif;
  max-width: 800px;
  margin: 0 auto;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.6);
`;

const DetailTitle = styled.h2`
  font-size: 1.4rem;
  color: #ffd700;
  margin: 0 0 20px 0;
  text-align: center;
  border-bottom: 1px solid rgba(255, 215, 0, 0.3);
  padding-bottom: 10px;
`;

const Section = styled.div`
  margin-bottom: 20px;
  
  &:last-child {
    margin-bottom: 0;
  }
`;

const SectionTitle = styled.h3`
  font-size: 1.2rem;
  color: #ddd;
  margin: 0 0 10px 0;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 15px;
`;

// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π Grid –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
const ForecastGrid = styled.div`
  display: flex;
  flex-direction: row;
  overflow-x: auto;
  gap: 15px;
  padding-bottom: 10px;
  
  /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
  &::-webkit-scrollbar {
    height: 6px;
  }
  
  &::-webkit-scrollbar-track {
    background: rgba(30, 30, 30, 0.6);
    border-radius: 3px;
  }
  
  &::-webkit-scrollbar-thumb {
    background: rgba(150, 150, 150, 0.6);
    border-radius: 3px;
  }
`;

const InfoBox = styled.div`
  background-color: rgba(50, 50, 50, 0.6);
  border-radius: 6px;
  padding: 15px;
  display: flex;
  flex-direction: column;
  gap: 5px;
`;

const InfoRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  padding: 5px 0;
  
  &:last-child {
    border-bottom: none;
  }
`;

const Label = styled.span`
  color: #aaa;
`;

const Value = styled.span`
  color: #fff;
  font-weight: bold;
  
  ${props => props.highlight && `
    color: #ffd700;
  `}
  
  ${props => props.type === 'positive' && `
    color: #7FFF7F;
  `}
  
  ${props => props.type === 'negative' && `
    color: #FF7F7F;
  `}
`;

const ForecastItem = styled.div`
  background-color: rgba(50, 50, 50, 0.6);
  border-radius: 6px;
  padding: 15px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  position: relative;
  min-width: 250px;
  max-width: 300px;
  flex: 1;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: ${props => {
      switch (props.weatherType) {
        case 'clear': return 'linear-gradient(to right, #FFD700, #FFA500)'; // –ó–æ–ª–æ—Ç–æ–π
        case 'cloudy': return 'linear-gradient(to right, #B0C4DE, #778899)'; // –°–∏–Ω–µ–≤–∞—Ç–æ-—Å–µ—Ä—ã–π
        case 'rain': return 'linear-gradient(to right, #4682B4, #1E90FF)'; // –°–∏–Ω–∏–π
        case 'thunderstorm': return 'linear-gradient(to right, #483D8B, #6A5ACD)'; // –ü—É—Ä–ø—É—Ä–Ω—ã–π
        case 'fog': return 'linear-gradient(to right, #D3D3D3, #A9A9A9)'; // –°–µ—Ä—ã–π
        case 'snow': return 'linear-gradient(to right, #F0F8FF, #B0E2FF)'; // –ì–æ–ª—É–±–æ–π
        default: return 'linear-gradient(to right, #FFD700, #FFA500)';
      }
    }};
    border-radius: 6px 6px 0 0;
  }
`;

const ForecastHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-weight: bold;
`;

const ForecastIcon = styled.span`
  font-size: 1.4rem;
  margin-right: 5px;
`;

const ForecastTime = styled.div`
  font-size: 0.9rem;
  color: #aaa;
`;

const ProgressBar = styled.div`
  background-color: rgba(30, 30, 30, 0.6);
  height: 8px;
  border-radius: 4px;
  position: relative;
  overflow: hidden;
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: ${props => props.progress || 0}%;
    background: ${props => {
      switch (props.type) {
        case 'time': return 'linear-gradient(to right, #4682B4, #87CEEB)';
        case 'day': return 'linear-gradient(to right, #FFD700, #FFA500)';
        case 'season': return 'linear-gradient(to right, #9370DB, #8A2BE2)';
        default: return 'linear-gradient(to right, #4682B4, #87CEEB)';
      }
    }};
    border-radius: 4px;
  }
`;

const CloseButton = styled.button`
  position: absolute;
  top: 15px;
  right: 15px;
  background: none;
  border: none;
  color: #aaa;
  font-size: 1.2rem;
  cursor: pointer;
  
  &:hover {
    color: #fff;
  }
`;

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
const weatherIcons = {
  clear: '‚òÄÔ∏è',
  cloudy: '‚òÅÔ∏è',
  rain: 'üåßÔ∏è',
  thunderstorm: '‚õàÔ∏è',
  fog: 'üå´Ô∏è',
  snow: '‚ùÑÔ∏è'
};

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
const weatherNames = {
  clear: '–Ø—Å–Ω–æ',
  cloudy: '–û–±–ª–∞—á–Ω–æ',
  rain: '–î–æ–∂–¥—å',
  thunderstorm: '–ì—Ä–æ–∑–∞',
  fog: '–¢—É–º–∞–Ω',
  snow: '–°–Ω–µ–≥'
};

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤
const seasonNames = {
  spring: '–í–µ—Å–Ω–∞',
  summer: '–õ–µ—Ç–æ',
  autumn: '–û—Å–µ–Ω—å',
  winter: '–ó–∏–º–∞'
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
const seasonIcons = {
  spring: 'üå±',
  summer: '‚òÄÔ∏è',
  autumn: 'üçÇ',
  winter: '‚ùÑÔ∏è'
};

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
const eventNames = {
  bloom: '–¶–≤–µ—Ç–µ–Ω–∏–µ –¥—É—Ö–æ–≤–Ω—ã—Ö —Ç—Ä–∞–≤',
  spirit_tide: '–ü—Ä–∏–ª–∏–≤ –¥—É—Ö–æ–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏',
  solstice: '–°–æ–ª–Ω—Ü–µ—Å—Ç–æ—è–Ω–∏–µ',
  meteor_shower: '–ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å',
  harvest: '–°–±–æ—Ä —É—Ä–æ–∂–∞—è',
  spirit_wind: '–î—É—Ö–æ–≤–Ω—ã–π –≤–µ—Ç–µ—Ä',
  ice_tribulation: '–õ–µ–¥—è–Ω–∞—è —Ç—Ä–∏–±—É–ª—è—Ü–∏—è',
  blizzard: '–ú–µ—Ç–µ–ª—å'
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
const eventIcons = {
  bloom: 'üå∏',
  spirit_tide: 'üåä',
  solstice: '‚òÄÔ∏è',
  meteor_shower: '‚òÑÔ∏è',
  harvest: 'üåæ',
  spirit_wind: 'üå¨Ô∏è',
  ice_tribulation: '‚ùÑÔ∏è',
  blizzard: 'üå®Ô∏è'
};

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
const daytimeNames = {
  dawn: '–†–∞—Å—Å–≤–µ—Ç',
  morning: '–£—Ç—Ä–æ',
  noon: '–ü–æ–ª–¥–µ–Ω—å',
  afternoon: '–î–µ–Ω—å',
  evening: '–í–µ—á–µ—Ä',
  night: '–ù–æ—á—å',
  deepNight: '–ì–ª—É–±–æ–∫–∞—è –Ω–æ—á—å'
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
const daytimeIcons = {
  dawn: 'üåÖ',
  morning: 'üåÑ',
  noon: '‚òÄÔ∏è',
  afternoon: 'üåû',
  evening: 'üåá',
  night: 'üåô',
  deepNight: 'üåö'
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
function WeatherDetailScreen({ onClose }) {
  const { state } = useGame();
  const timeWeather = useTimeWeather(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–¥–∏–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—É–∫ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
  if (!timeWeather) return null;
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
  const weather = state.weather || {};
  const worldState = state.world || {};
  const currentLocation = worldState.currentLocation || {};
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ö—É–∫–∞ useTimeWeather
  const hour = timeWeather.hour;
  const minute = timeWeather.minute;
  const daytimePeriod = timeWeather.daytimePeriod;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
  const formattedTime = timeWeather.formattedTime;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏–∑ timeWeather
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useTimeWeather –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ
  const currentWeather = timeWeather.currentWeather;
  const weatherIntensity = timeWeather.weatherIntensity;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã –ø–æ–≥–æ–¥—ã
  const nextWeatherChange = weather.nextWeatherChange || 0;
  const weatherDuration = 120; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–≥–æ–¥—ã
  const weatherProgress = Math.max(0, Math.min(100, 100 - (nextWeatherChange / weatherDuration * 100)));
  
  // –ü–æ–ª—É—á–∞–µ–º actions –¥–ª—è –¥–∏—Å–ø–∞—Ç—á–∞
  const { actions } = useGame();

  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–≥–æ–¥–∞ –≤ state.weather —Ç–æ–º—É, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç useTimeWeather
  // –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
  React.useEffect(() => {
    if (weather.currentWeather && weather.currentWeather !== currentWeather) {
      console.warn('‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–≥–æ–¥—ã:', {
        hookWeather: currentWeather,
        stateWeather: weather.currentWeather
      });
    }
  }, [currentWeather, weather.currentWeather]);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–ª–µ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–æ–≥–æ–¥—ã
  React.useEffect(() => {
    if (nextWeatherChange === 0 && currentWeather) {
      console.log('‚ö†Ô∏è WeatherDetailScreen: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω—É–ª–µ–≤–æ–π nextWeatherChange, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–º–µ–Ω—É –ø–æ–≥–æ–¥—ã');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º –ø–æ–≥–æ–¥—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const timer = setTimeout(() => {
        actions.dispatch({ type: 'FORCE_WEATHER_CHANGE' });
        console.log('üå¶Ô∏è WeatherDetailScreen: –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–æ–≥–æ–¥—ã –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞');
      }, 500);
      
      return () => clearTimeout(timer);
    }
  }, [nextWeatherChange, currentWeather, actions]);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω –∏ –¥–µ–Ω—å —Å–µ–∑–æ–Ω–∞
  const currentSeason = timeWeather.season;
  const seasonDay = weather.seasonDay || 1;
  const seasonLength = weather.seasonLength || 30;
  const seasonProgress = (seasonDay / seasonLength) * 100;
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ—Å–æ–±–æ–µ —Å–æ–±—ã—Ç–∏–µ
  const activeEvent = weather.activeEvent || null;
  const eventRemainingTime = weather.eventRemainingTime || 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
  const forecast = weather.forecast || [];
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è (–æ—Ç 0 –¥–æ 100%)
  const dayProgress = ((hour * 60 + minute) / (24 * 60)) * 100;
  
  return (
    <DetailContainer>
      <CloseButton onClick={onClose}>√ó</CloseButton>
      <DetailTitle>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏</DetailTitle>
      
      <Section>
        <SectionTitle>
          <span>üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –ø–æ–≥–æ–¥–∞</span>
        </SectionTitle>
        <Grid>
          <InfoBox>
            <InfoRow>
              <Label>–í—Ä–µ–º—è:</Label>
              <Value highlight>{formattedTime}</Value>
            </InfoRow>
            <InfoRow>
              <Label>–ü–µ—Ä–∏–æ–¥ —Å—É—Ç–æ–∫:</Label>
              <Value>
                {daytimeIcons[daytimePeriod]} {daytimeNames[daytimePeriod]}
              </Value>
            </InfoRow>
            <InfoRow>
              <Label>–°—É—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª:</Label>
              <Value>
                <ProgressBar progress={dayProgress} type="day" />
              </Value>
            </InfoRow>
            <InfoRow>
              <Label>–î–µ–Ω—å:</Label>
              <Value>{timeWeather.dayCount}</Value>
            </InfoRow>
          </InfoBox>
          
          <InfoBox>
            <InfoRow>
              <Label>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:</Label>
              <Value>
                {weatherIcons[currentWeather]} {weatherNames[currentWeather]}
              </Value>
            </InfoRow>
            <InfoRow>
              <Label>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</Label>
              <Value>{Math.min(100, Math.round(weatherIntensity * 100))}%</Value>
            </InfoRow>
            <InfoRow>
              <Label>–î–æ —Å–º–µ–Ω—ã –ø–æ–≥–æ–¥—ã:</Label>
              <Value>{nextWeatherChange} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</Value>
            </InfoRow>
            <InfoRow>
              <Label>–ü—Ä–æ–≥—Ä–µ—Å—Å:</Label>
              <Value>
                <ProgressBar progress={weatherProgress} type="time" />
              </Value>
            </InfoRow>
          </InfoBox>
        </Grid>
      </Section>
      
      <Section>
        <SectionTitle>
          <span>üå°Ô∏è –°–µ–∑–æ–Ω –∏ —Å–æ–±—ã—Ç–∏—è</span>
        </SectionTitle>
        <Grid>
          <InfoBox>
            <InfoRow>
              <Label>–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω:</Label>
              <Value>
                {seasonIcons[currentSeason]} {seasonNames[currentSeason]}
              </Value>
            </InfoRow>
            <InfoRow>
              <Label>–î–µ–Ω—å —Å–µ–∑–æ–Ω–∞:</Label>
              <Value>{seasonDay} –∏–∑ {seasonLength}</Value>
            </InfoRow>
            <InfoRow>
              <Label>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–∑–æ–Ω–∞:</Label>
              <Value>
                <ProgressBar progress={seasonProgress} type="season" />
              </Value>
            </InfoRow>
          </InfoBox>
          
          <InfoBox>
            <InfoRow>
              <Label>–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:</Label>
              <Value highlight={activeEvent !== null}>
                {activeEvent ? `${eventIcons[activeEvent]} ${eventNames[activeEvent]}` : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π'}
              </Value>
            </InfoRow>
            {activeEvent && (
              <>
                <InfoRow>
                  <Label>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</Label>
                  <Value>{eventRemainingTime} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</Value>
                </InfoRow>
                <InfoRow>
                  <Label>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–±—ã—Ç–∏—è:</Label>
                  <Value>
                    <ProgressBar 
                      progress={100 - (eventRemainingTime / (weather.specialEvents?.[activeEvent]?.duration || 120) * 100)} 
                      type="time" 
                    />
                  </Value>
                </InfoRow>
              </>
            )}
          </InfoBox>
        </Grid>
      </Section>
      
      {forecast.length > 0 && (
        <Section>
          <SectionTitle>
            <span>üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</span>
          </SectionTitle>
          <ForecastGrid>
            {/* –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
            <ForecastItem weatherType={currentWeather}>
              <ForecastHeader>
                <div>
                  <ForecastIcon>{weatherIcons[currentWeather]}</ForecastIcon>
                  {weatherNames[currentWeather]}
                </div>
                <Value type={weatherIntensity > 1 ? 'negative' : 'positive'}>
                  {Math.round(weatherIntensity * 100)}%
                </Value>
              </ForecastHeader>
              <ForecastTime>
                <strong>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</strong>
              </ForecastTime>
              <ForecastTime>
                –î–æ —Å–º–µ–Ω—ã: {nextWeatherChange} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
              </ForecastTime>
            </ForecastItem>
            
            {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ */}
            {forecast.map((item, index) => (
              <ForecastItem key={index} weatherType={item.type}>
                <ForecastHeader>
                  <div>
                    <ForecastIcon>{weatherIcons[item.type]}</ForecastIcon>
                    {weatherNames[item.type]}
                  </div>
                  <Value type={item.intensity > 1 ? 'negative' : 'positive'}>
                    {Math.round(item.intensity * 100)}%
                  </Value>
                </ForecastHeader>
                <ForecastTime>
                  –ß–µ—Ä–µ–∑ {item.timeToOccur} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                </ForecastTime>
                <ForecastTime>
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item.duration} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                </ForecastTime>
              </ForecastItem>
            ))}
          </ForecastGrid>
        </Section>
      )}
      
      <Section>
        <SectionTitle>
          <span>üèûÔ∏è –í–ª–∏—è–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏</span>
        </SectionTitle>
        <InfoBox>
          <InfoRow>
            <Label>–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è:</Label>
            <Value highlight>
              {currentLocation && currentLocation.name ? 
                currentLocation.name : 
                '–î–æ–ª–∏–Ω–∞ –ù–∞—á–∞–ª–∞' /* –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" –Ω–∞ "–î–æ–ª–∏–Ω–∞ –ù–∞—á–∞–ª–∞" */}
            </Value>
          </InfoRow>
          
          {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ª–æ–∫–∞—Ü–∏–∏, –∫–∞–∫ –≤ MapTab.js */}
          {(() => {
            // –ë–∞–∑–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –ª–æ–∫–∞—Ü–∏–∏
            const locationEffects = {};
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø 'forest' –¥–ª—è –î–æ–ª–∏–Ω—ã –Ω–∞—á–∞–ª–∞ (–µ—Å–ª–∏ currentLocation —Ä–∞–≤–Ω–æ null)
            const locationType = currentLocation && currentLocation.type ? currentLocation.type : 'forest';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ 'forest' –¥–ª—è –î–æ–ª–∏–Ω—ã –Ω–∞—á–∞–ª–∞
            {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º locationType –≤–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ currentLocation
              // –†–∞—Å—á–µ—Ç –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã –∏ —Å–µ–∑–æ–Ω–∞
              switch(locationType) {
                case 'forest':
                  locationEffects.baseEnergy = { value: '+5%', positive: true };
                  locationEffects.basePerception = { value: '+10%', positive: true };
                  
                  if (currentSeason === 'spring') 
                    locationEffects.resourceBonus = { value: '+20% –∫ —Å–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å–æ–≤', positive: true };
                  if (currentWeather === 'rain') 
                    locationEffects.energyRecovery = { value: '+10% –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —ç–Ω–µ—Ä–≥–∏–∏', positive: true };
                  break;
                case 'mountain':
                  locationEffects.baseStrength = { value: '+5%', positive: true };
                  locationEffects.baseStamina = { value: '+15%', positive: true };
                  
                  if (currentSeason === 'winter') 
                    locationEffects.cultivationSpeed = { value: '+15% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏', positive: true };
                  if (currentWeather === 'thunderstorm') 
                    locationEffects.insightChance = { value: '+20% –∫ —à–∞–Ω—Å—É –æ–∑–∞—Ä–µ–Ω–∏—è', positive: true };
                  break;
                case 'water':
                  locationEffects.baseWisdom = { value: '+10%', positive: true };
                  locationEffects.baseHealing = { value: '+15%', positive: true };
                  
                  if (currentSeason === 'summer') 
                    locationEffects.cooldown = { value: '-20% –∫ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤', positive: true };
                  if (currentWeather === 'clear') 
                    locationEffects.spiritualEnergy = { value: '+20% –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –¥—É—Ö–æ–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏', positive: true };
                  break;
                case 'city':
                  locationEffects.baseSocial = { value: '+20%', positive: true };
                  locationEffects.baseLuck = { value: '+5%', positive: true };
                  
                  if (currentSeason === 'autumn') 
                    locationEffects.tradeBonus = { value: '+15% –∫ –≤—ã–≥–æ–¥–µ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ', positive: true };
                  if (currentWeather === 'fog') 
                    locationEffects.stealthBonus = { value: '+30% –∫ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏', positive: true };
                  break;
                case 'dungeon':
                  locationEffects.baseAttack = { value: '+10%', positive: true };
                  locationEffects.baseDefense = { value: '+5%', positive: true };
                  
                  if (currentSeason === 'winter') 
                    locationEffects.defenseBonus = { value: '+10% –∫ –∑–∞—â–∏—Ç–µ', positive: true };
                  if (currentWeather === 'thunderstorm') 
                    locationEffects.attackBonus = { value: '+20% –∫ –∞—Ç–∞–∫–µ', positive: true };
                  break;
              }
              
              // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
              switch(daytimePeriod) {
                case 'dawn':
                  if (locationType === 'forest')
                    locationEffects.dawnPerception = { value: '+15% –∫ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é', positive: true };
                  if (locationType === 'water')
                    locationEffects.dawnMeditation = { value: '+25% –∫ —ç—Ñ—Ñ–µ–∫—Ç—É –º–µ–¥–∏—Ç–∞—Ü–∏–∏', positive: true };
                  break;
                case 'afternoon':
                  if (locationType === 'mountain')
                    locationEffects.dayStamina = { value: '+10% –∫ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏', positive: true };
                  break;
                case 'night':
                case 'deepNight':
                  if (locationType === 'water')
                    locationEffects.nightEnergy = { value: '+20% –∫ –¥—É—Ö–æ–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏', positive: true };
                  if (locationType === 'dungeon')
                    locationEffects.nightMonsterStrength = { value: '+15% –∫ —Å–∏–ª–µ –º–æ–Ω—Å—Ç—Ä–æ–≤', positive: false };
                  break;
              }
              
              // –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
              if (activeEvent) {
                switch(activeEvent) {
                  case 'bloom':
                    if (locationType === 'forest')
                      locationEffects.bloomHerbQuality = { value: '+50% –∫ –∫–∞—á–µ—Å—Ç–≤—É —Ç—Ä–∞–≤', positive: true };
                    break;
                  case 'spirit_tide':
                    if (locationType === 'water')
                      locationEffects.tideSpiritualPower = { value: '+40% –∫ —Å–∏–ª–µ –¥—É—Ö–æ–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫', positive: true };
                    break;
                  case 'solstice':
                    if (locationType === 'mountain')
                      locationEffects.solsticeCultivation = { value: '+30% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏', positive: true };
                    break;
                  case 'meteor_shower':
                    locationEffects.meteorRareMaterials = { value: '–®–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', positive: true };
                    break;
                }
              }
            }
            
            return (
              <>
                <InfoRow>
                  <Label>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏:</Label>
                  <Value>
                    {Object.entries(locationEffects).filter(([key]) => key.startsWith('base')).length > 0 
                      ? Object.entries(locationEffects)
                          .filter(([key]) => key.startsWith('base'))
                          .map(([key, effect]) => key.replace('base', '') + ': ' + effect.value)
                          .join(', ')
                      : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
                    }
                  </Value>
                </InfoRow>
                <InfoRow>
                  <Label>–ü–æ–≥–æ–¥–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:</Label>
                  <Value>
                    {Object.entries(locationEffects).filter(([key]) => !key.startsWith('base')).length > 0 
                      ? Object.entries(locationEffects)
                          .filter(([key]) => !key.startsWith('base'))
                          .map(([key, effect]) => effect.value)
                          .join(', ')
                      : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
                    }
                  </Value>
                </InfoRow>
              </>
            );
          })()}
        </InfoBox>
      </Section>
    </DetailContainer>
  );
}

export default WeatherDetailScreen;
