import React from 'react';
import styled from 'styled-components';
import { useGame } from '../../context/GameContext';

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const WeatherContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-left: 15px;
  border-radius: 8px;
  padding: 5px 10px;
  font-size: 0.9rem;
`;

const WeatherRow = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  gap: 15px;
`;

const WeatherInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  
  span {
    color: #d4af37;
  }
`;

const TimeInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  
  span {
    color: #d4af37;
  }
`;

const WeatherIcon = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1.2rem;
`;

const TimeIcon = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1.2rem;
`;

const SeasonIndicator = styled.div`
  font-size: 0.8rem;
  color: #aaa;
  text-align: center;
  margin-top: 2px;
`;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */
const WeatherDisplay = () => {
  const { state } = useGame();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  const getTimeIcon = () => {
    if (!state.weather || !state.weather.time) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
      const hour = state.world.time.hour;
      
      if (hour >= 6 && hour < 12) return 'üåÖ'; // –£—Ç—Ä–æ
      if (hour >= 12 && hour < 18) return '‚òÄÔ∏è'; // –î–µ–Ω—å
      if (hour >= 18 && hour < 22) return 'üåá'; // –í–µ—á–µ—Ä
      return 'üåô'; // –ù–æ—á—å
    }
    
    // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≥–æ–¥—ã
    const period = state.weather.timePeriod;
    
    switch (period) {
      case 'dawn': return 'üåÖ'; // –†–∞—Å—Å–≤–µ—Ç
      case 'morning': return 'üåÑ'; // –£—Ç—Ä–æ
      case 'day': return '‚òÄÔ∏è'; // –î–µ–Ω—å
      case 'evening': return 'üåá'; // –í–µ—á–µ—Ä
      case 'dusk': return 'üåÜ'; // –ó–∞–∫–∞—Ç
      case 'night': return 'üåô'; // –ù–æ—á—å
      case 'midnight': return 'üåö'; // –ü–æ–∑–¥–Ω—è—è –Ω–æ—á—å
      default: return '‚è∞'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
  const getWeatherIcon = () => {
    if (!state.weather || !state.weather.currentWeather) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è—Å–Ω—É—é –ø–æ–≥–æ–¥—É
      return '‚òÄÔ∏è';
    }
    
    const weather = state.weather.currentWeather.type;
    const intensity = state.weather.currentWeather.intensity;
    
    switch (weather) {
      case 'clear': return '‚òÄÔ∏è'; // –Ø—Å–Ω–æ
      case 'cloudy': 
        return intensity > 0.7 ? '‚òÅÔ∏è' : 'üå§Ô∏è'; // –û–±–ª–∞—á–Ω–æ —Å —Ä–∞–∑–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
      case 'foggy': return 'üå´Ô∏è'; // –¢—É–º–∞–Ω
      case 'rainy': 
        return intensity > 0.7 ? 'üåßÔ∏è' : 'üå¶Ô∏è'; // –î–æ–∂–¥—å —Å —Ä–∞–∑–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
      case 'stormy': return '‚õàÔ∏è'; // –ì—Ä–æ–∑–∞
      case 'snowy': return '‚ùÑÔ∏è'; // –°–Ω–µ–≥
      case 'windy': return 'üí®'; // –í–µ—Ç–µ—Ä
      case 'heatwave': return 'üî•'; // –ñ–∞—Ä–∞
      case 'blizzard': return '‚ùÑÔ∏èüå¨Ô∏è'; // –ú–µ—Ç–µ–ª—å
      case 'rainbow': return 'üåà'; // –†–∞–¥—É–≥–∞
      case 'meteor': return '‚òÑÔ∏è'; // –ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å
      case 'aurora': return 'üåå'; // –°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ
      case 'bloodMoon': return 'üî¥'; // –ö—Ä–æ–≤–∞–≤–∞—è –ª—É–Ω–∞
      default: return '‚òÄÔ∏è'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = () => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (state.weather && state.weather.time) {
      const { hour, minute } = state.weather.time;
      return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
    const { hour, minute } = state.world.time;
    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  const getTimeName = () => {
    if (!state.weather || !state.weather.timePeriod) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —á–∞—Å—É
      const hour = state.world.time.hour;
      
      if (hour >= 6 && hour < 12) return '—É—Ç—Ä–æ';
      if (hour >= 12 && hour < 18) return '–¥–µ–Ω—å';
      if (hour >= 18 && hour < 22) return '–≤–µ—á–µ—Ä';
      return '–Ω–æ—á—å';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const period = state.weather.timePeriod;
    
    switch (period) {
      case 'dawn': return '—Ä–∞—Å—Å–≤–µ—Ç';
      case 'morning': return '—É—Ç—Ä–æ';
      case 'day': return '–¥–µ–Ω—å';
      case 'evening': return '–≤–µ—á–µ—Ä';
      case 'dusk': return '–∑–∞–∫–∞—Ç';
      case 'night': return '–Ω–æ—á—å';
      case 'midnight': return '–ø–æ–ª–Ω–æ—á—å';
      default: return '–¥–µ–Ω—å';
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
  const getWeatherName = () => {
    if (!state.weather || !state.weather.currentWeather) {
      return '–Ø—Å–Ω–æ';
    }
    
    const weather = state.weather.currentWeather.type;
    
    switch (weather) {
      case 'clear': return '–Ø—Å–Ω–æ';
      case 'cloudy': return '–û–±–ª–∞—á–Ω–æ';
      case 'foggy': return '–¢—É–º–∞–Ω';
      case 'rainy': return '–î–æ–∂–¥—å';
      case 'stormy': return '–ì—Ä–æ–∑–∞';
      case 'snowy': return '–°–Ω–µ–≥';
      case 'windy': return '–í–µ—Ç–µ—Ä';
      case 'heatwave': return '–ñ–∞—Ä–∞';
      case 'blizzard': return '–ú–µ—Ç–µ–ª—å';
      case 'rainbow': return '–†–∞–¥—É–≥–∞';
      case 'meteor': return '–ú–µ—Ç–µ–æ—Ä–∏—Ç—ã';
      case 'aurora': return '–°–∏—è–Ω–∏–µ';
      case 'bloodMoon': return '–ö—Ä–æ–≤–∞–≤–∞—è –ª—É–Ω–∞';
      default: return '–Ø—Å–Ω–æ';
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
  const getSeasonName = () => {
    if (!state.weather || !state.weather.season) {
      return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∑–æ–Ω –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
    }
    
    const season = state.weather.season;
    
    switch (season) {
      case 'spring': return '–í–µ—Å–Ω–∞';
      case 'summer': return '–õ–µ—Ç–æ';
      case 'autumn': return '–û—Å–µ–Ω—å';
      case 'winter': return '–ó–∏–º–∞';
      default: return null;
    }
  };
  
  return (
    <WeatherContainer>
      <WeatherRow>
        <TimeInfo>
          <TimeIcon>{getTimeIcon()}</TimeIcon>
          <span>{formatTime()} ({getTimeName()})</span>
        </TimeInfo>
        
        <WeatherInfo>
          <span>{getWeatherName()}</span>
          <WeatherIcon>{getWeatherIcon()}</WeatherIcon>
        </WeatherInfo>
      </WeatherRow>
      
      {getSeasonName() && (
        <SeasonIndicator>{getSeasonName()}</SeasonIndicator>
      )}
    </WeatherContainer>
  );
};

export default WeatherDisplay;
