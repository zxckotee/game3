import React, { useState, useEffect } from 'react';
import { useGameContext } from '../../context/GameContextProvider';
import EffectsServiceAPI from '../../services/effects-service-api';
import './ActiveEffectsDisplay.css';

const getEffectIcon = (effectType) => {
  switch (effectType) {
    case 'stats':
      return 'üí™'; // –°–∏–ª–∞, –±–∞—Ñ—Ñ
    case 'dot':
      return '‚ò†Ô∏è'; // –Ø–¥, —É—Ä–æ–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    case 'hot':
      return '‚ù§Ô∏è‚Äçü©π'; // –õ–µ—á–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    case 'stun':
      return 'üòµ'; // –û–≥–ª—É—à–µ–Ω–∏–µ
    default:
      return '‚ú®'; // –û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç
  }
};

const ActiveEffectsDisplay = ({ userId }) => {
  const { state } = useGameContext();
  const [effects, setEffects] = useState([]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (!userId) return;

    const fetchEffects = async () => {
      try {
        const activeEffects = await EffectsServiceAPI.getActivePlayerEffects(userId);
        setEffects(activeEffects);
      } catch (error) {
        console.error("Failed to fetch active effects:", error);
        setEffects([]); // –û—á–∏—â–∞–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }
    };

    fetchEffects(); // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const intervalId = setInterval(fetchEffects, 15000); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(intervalId); // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  }, [userId, state.player.inventory.items]); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∫–∞—é—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    if (effects.length === 0) return;

    const timerId = setInterval(() => {
      setEffects(prevEffects =>
        prevEffects
          .map(effect => ({
            ...effect,
            remaining_seconds: effect.remaining_seconds - 1,
          }))
          .filter(effect => effect.remaining_seconds > 0)
      );
    }, 1000);

    return () => clearInterval(timerId);
  }, [effects]);


  if (effects.length === 0) {
    return null; // –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–ª–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  }

  return (
    <div className="active-effects-container">
      <h4>–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</h4>
      <ul>
        {effects.map(effect => (
          <li key={effect.id} className="effect-item">
            <span className="effect-icon">{getEffectIcon(effect.effect_type)}</span>
            <span className="effect-name">{effect.name}</span>
            <span className="effect-value">
              ({effect.value > 0 ? '+' : ''}{effect.value})
            </span>
            <span className="effect-timer">{effect.remaining_seconds}—Å</span>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ActiveEffectsDisplay;