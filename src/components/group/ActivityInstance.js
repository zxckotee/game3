import React, { useState, useEffect } from 'react';
import { useGame } from '../../context/GameContext';
import { 
  updateActivityProgress, 
  completeActivity,
  failActivity,
  abandonActivity,
  startActivity
} from '../../context/actions/groupActions';
import Button from '../ui/Button';
import ProgressBar from '../ui/ProgressBar';
import styles from './ActivityInstance.module.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
 * @param {Object} instance - –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Function} onComplete - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
const ActivityInstance = ({ instance, onComplete }) => {
  const { state, actions } = useGame();
  const { user } = state.player;
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentEvent, setCurrentEvent] = useState(null);
  const [eventResult, setEventResult] = useState(null);
  
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
  const participants = Array.isArray(instance?.participants) ? instance.participants : [];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
  const userRole = participants.find(p => p.userId === user?.id)?.role || 'member';
  const isLeaderOrOfficer = userRole === 'leader' || userRole === 'officer';
  
  // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const getActivityTypeIcon = (type) => {
    switch (type) {
      case 'raid':
        return 'üè∞'; // –†–µ–π–¥
      case 'hunt':
        return 'üèπ'; // –û—Ö–æ—Ç–∞
      case 'expedition':
        return 'üß≠'; // –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è
      case 'tournament':
        return 'üèÜ'; // –¢—É—Ä–Ω–∏—Ä
      case 'caravan':
        return 'üê™'; // –ö–∞—Ä–∞–≤–∞–Ω
      case 'tribulation':
        return '‚ö°'; // –ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å—Ç–∏—Ö–∏–∏
      case 'craft':
        return '‚öíÔ∏è'; // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
      default:
        return 'üìú'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };
  
  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const getActivityTypeName = (type) => {
    switch (type) {
      case 'raid':
        return '–†–µ–π–¥';
      case 'hunt':
        return '–û—Ö–æ—Ç–∞';
      case 'expedition':
        return '–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è';
      case 'tournament':
        return '–¢—É—Ä–Ω–∏—Ä';
      case 'caravan':
        return '–ö–∞—Ä–∞–≤–∞–Ω';
      case 'tribulation':
        return '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å—Ç–∏—Ö–∏–∏';
      case 'craft':
        return '–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞';
      default:
        return '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    }
  };
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyText = (difficulty) => {
    switch (difficulty) {
      case 'easy':
        return '–õ–µ–≥–∫–∞—è';
      case 'medium':
        return '–°—Ä–µ–¥–Ω—è—è';
      case 'hard':
        return '–¢—è–∂–µ–ª–∞—è';
      case 'extreme':
        return '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è';
      case 'legendary':
        return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å';
    }
  };
  
  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyClass = (difficulty) => {
    switch (difficulty) {
      case 'easy':
        return styles.difficultyEasy;
      case 'medium':
        return styles.difficultyMedium;
      case 'hard':
        return styles.difficultyHard;
      case 'extreme':
        return styles.difficultyExtreme;
      case 'legendary':
        return styles.difficultyLegendary;
      default:
        return '';
    }
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  useEffect(() => {
    if (instance?.status === 'in_progress' && !currentEvent && !eventResult) {
      generateEventForCurrentStage();
    }
  }, [instance?.currentStage, instance?.status]);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
  const generateEventForCurrentStage = () => {
    // –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    const activityType = instance?.activityType?.type || 'generic';
    const currentStage = instance?.currentStage || 1;
    const events = getEventsForActivityType(activityType, currentStage);
    const randomIndex = Math.floor(Math.random() * events.length);
    setCurrentEvent(events[randomIndex]);
    setEventResult(null);
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∞–ø–∞
  const getEventsForActivityType = (type, stage) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    // –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π:
    const events = {
      'raid': {
        1: [
          { 
            id: 'scout', 
            title: '–†–∞–∑–≤–µ–¥–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', 
            description: '–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ä–∞—Å–∫–∏–Ω—É–ª—Å—è –¥—Ä–µ–≤–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–ø–∞—Å–Ω–æ—Å—Ç—è—Ö –∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞—Ö.', 
            options: ['–û—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑–≤–µ–¥—á–∏–∫–∞', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—É—Ö–æ–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ'] 
          },
          { 
            id: 'entrance', 
            title: '–í—Ö–æ–¥ –≤ –∫–æ–º–ø–ª–µ–∫—Å', 
            description: '–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –≤–Ω—É—Ç—Ä—å –¥—Ä–µ–≤–Ω–µ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞.', 
            options: ['–ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥', '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥', '–ü—Ä–æ–±–∏—Ç—å —Å—Ç–µ–Ω—É —Å–∏–ª–æ–π'] 
          },
        ],
        2: [
          { 
            id: 'encounter', 
            title: '–ü–µ—Ä–≤–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ', 
            description: '–ù–∞ –ø—É—Ç–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞ —Å—Ç—Ä–∞–∂–µ–π –¥—Ä–µ–≤–Ω–µ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞!', 
            options: ['–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é', '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–æ–π—Ç–∏', '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è'] 
          },
          { 
            id: 'trap', 
            title: '–î—Ä–µ–≤–Ω—è—è –ª–æ–≤—É—à–∫–∞', 
            description: '–ü—Ä–æ—Ö–æ–¥—è –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É, –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥—Ä–µ–≤–Ω—é—é –ª–æ–≤—É—à–∫—É.', 
            options: ['–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–æ–π', '–£–∫–ª–æ–Ω–∏—Ç—å—Å—è', '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏'] 
          },
        ],
        3: [
          { 
            id: 'treasure', 
            title: '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞', 
            description: '–í—ã –Ω–∞—à–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –Ω–æ –æ–Ω–æ –æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–æ—â–Ω—ã–º–∏ –ø–µ—á–∞—Ç—è–º–∏.', 
            options: ['–í–∑–ª–æ–º–∞—Ç—å –ø–µ—á–∞—Ç–∏', '–ò—Å–∫–∞—Ç—å –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á'] 
          },
        ],
      },
      'hunt': {
        1: [
          { 
            id: 'track', 
            title: '–ü–æ–∏—Å–∫ —Å–ª–µ–¥–æ–≤', 
            description: '–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—ã —Ä–µ–¥–∫–æ–≥–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –∑–≤–µ—Ä—è.', 
            options: ['–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–∞–Ω–∫—É', '–°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π'] 
          },
        ],
      },
      'expedition': {
        1: [
          { 
            id: 'path', 
            title: '–í—ã–±–æ—Ä –ø—É—Ç–∏', 
            description: '–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.', 
            options: ['–ì–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–∞–ª', '–õ–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞', '–ü–æ–¥–∑–µ–º–Ω—ã–µ —Ç—É–Ω–Ω–µ–ª–∏'] 
          },
        ],
      },
    };
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–∏–ø–∞/—ç—Ç–∞–ø–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    return events[type]?.[stage] || [
      { 
        id: 'generic', 
        title: `–≠—Ç–∞–ø ${stage}`, 
        description: `–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–∞–ø ${stage} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.`, 
        options: ['–î–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ', '–î–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ', '–ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å'] 
      }
    ];
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ–±—ã—Ç–∏—è
  const handleOptionSelect = (optionIndex) => {
    if (!currentEvent) return;
    
    const option = currentEvent.options[optionIndex];
    
    // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞
    // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const successChance = 0.7; // 70% –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
    const success = Math.random() < successChance;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è
    const result = {
      success,
      description: success 
        ? `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –∑–∞–¥–∞—á–µ–π, –≤—ã–±—Ä–∞–≤ –≤–∞—Ä–∏–∞–Ω—Ç "${option}".` 
        : `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±–æ—Ä "${option}" –ø—Ä–∏–≤–µ–ª –∫ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è–º.`,
      rewards: success ? generateRewards() : [],
      penalties: !success ? generatePenalties() : []
    };
    
    setEventResult(result);
  };
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
  const generateRewards = () => {
    return [
      { type: 'experience', value: Math.floor(Math.random() * 100) + 50 },
      { type: 'resource', name: '–î—É—Ö–æ–≤–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª', quantity: Math.floor(Math.random() * 3) + 1 }
    ];
  };
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
  const generatePenalties = () => {
    return [
      { type: 'health', value: Math.floor(Math.random() * 20) + 10 },
      { type: 'energy', value: Math.floor(Math.random() * 30) + 15 }
    ];
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
  const handleNextStage = async () => {
    if (!isLeaderOrOfficer) {
      actions.addNotification({
        message: '–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∏–ª–∏ –æ—Ñ–∏—Ü–µ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é',
        type: 'error'
      });
      return;
    }
    
    if (!eventResult) {
      actions.addNotification({
        message: '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—è',
        type: 'error'
      });
      return;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      const nextStage = instance.currentStage + 1;
      const additionalData = {
        battleLog: {
          stage: instance.currentStage,
          event: currentEvent,
          result: eventResult,
          timestamp: new Date().toISOString()
        }
      };
      
      if (nextStage > instance.totalStages) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await actions.dispatch(completeActivity(instance.id, additionalData, user.id));
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (onComplete) {
          onComplete();
        }
      } else {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await actions.dispatch(updateActivityProgress(
          instance.id, nextStage, additionalData, user.id
        ));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setCurrentEvent(null);
        setEventResult(null);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const handleFailActivity = async () => {
    if (!isLeaderOrOfficer) {
      actions.addNotification({
        message: '–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∏–ª–∏ –æ—Ñ–∏—Ü–µ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é',
        type: 'error'
      });
      return;
    }
    
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      const failureData = {
        reason: '–û—Ç–º–µ—á–µ–Ω–æ –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        timestamp: new Date().toISOString()
      };
      
      await actions.dispatch(failActivity(instance.id, failureData, user.id));
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      if (onComplete) {
        onComplete();
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω–æ–π:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const handleAbandonActivity = async () => {
    if (userRole !== 'leader') {
      actions.addNotification({
        message: '–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        type: 'error'
      });
      return;
    }
    
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      const reason = '–û—Ç–º–µ–Ω–µ–Ω–æ –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã';
      
      await actions.dispatch(abandonActivity(instance.id, reason, user.id));
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      if (onComplete) {
        onComplete();
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
  if (instance?.status === 'preparing') {
    return (
      <div className={styles.activityInstance}>
        <div className={styles.header}>
          <div className={styles.titleContainer}>
            <span className={styles.typeIcon}>
              {getActivityTypeIcon(instance.activityType?.type)}
            </span>
            <h3 className={styles.title}>
              {instance.activityType?.name || '–ì—Ä—É–ø–ø–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
            </h3>
            <span className={`${styles.status} ${styles.statusPreparing}`}>
              –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            </span>
          </div>
        </div>
        
        <div className={styles.infoSection}>
          <div className={styles.infoGrid}>
            <div className={styles.infoItem}>
              <span className={styles.label}>–¢–∏–ø:</span>
              <span className={styles.value}>
                {getActivityTypeName(instance.activityType?.type)}
              </span>
            </div>
            
            <div className={styles.infoItem}>
              <span className={styles.label}>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
              <span className={`${styles.value} ${getDifficultyClass(instance.difficulty)}`}>
                {getDifficultyText(instance.difficulty)}
              </span>
            </div>
            
            <div className={styles.infoItem}>
              <span className={styles.label}>–≠—Ç–∞–ø—ã:</span>
              <span className={styles.value}>
                {instance.totalStages || 3}
              </span>
            </div>
            
            <div className={styles.infoItem}>
              <span className={styles.label}>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span>
              <span className={styles.value}>
                {participants.length}
              </span>
            </div>
          </div>
        </div>
        
        <div className={styles.preparingMessage}>
          –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞. –õ–∏–¥–µ—Ä –∏–ª–∏ –æ—Ñ–∏—Ü–µ—Ä –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
        </div>
        
        {error && (
          <div className={styles.error}>{error}</div>
        )}
        
        <div className={styles.actions}>
        {isLeaderOrOfficer && (
          <Button 
            onClick={() => actions.dispatch(startActivity(instance.id, user.id))}
            disabled={loading}
            className={styles.startButton}
          >
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
          </Button>
        )}
          
          {userRole === 'leader' && (
            <Button 
              onClick={handleAbandonActivity}
              disabled={loading}
              className={styles.abandonButton}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </Button>
          )}
        </div>
      </div>
    );
  }
  
  // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞
  if (instance?.status === 'completed' || instance?.status === 'failed' || instance?.status === 'abandoned') {
    return (
      <div className={styles.activityInstance}>
        <div className={styles.header}>
          <div className={styles.titleContainer}>
            <span className={styles.typeIcon}>
              {getActivityTypeIcon(instance.activityType?.type)}
            </span>
            <h3 className={styles.title}>
              {instance.activityType?.name || '–ì—Ä—É–ø–ø–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
            </h3>
            
            {instance.status === 'completed' && (
              <span className={`${styles.status} ${styles.statusCompleted}`}>
                –ó–∞–≤–µ—Ä—à–µ–Ω–∞
              </span>
            )}
            
            {instance.status === 'failed' && (
              <span className={`${styles.status} ${styles.statusFailed}`}>
                –ü—Ä–æ–≤–∞–ª–µ–Ω–∞
              </span>
            )}
            
            {instance.status === 'abandoned' && (
              <span className={`${styles.status} ${styles.statusAbandoned}`}>
                –û—Ç–º–µ–Ω–µ–Ω–∞
              </span>
            )}
          </div>
        </div>
        
        <div className={styles.infoSection}>
          <div className={styles.infoGrid}>
            <div className={styles.infoItem}>
              <span className={styles.label}>–¢–∏–ø:</span>
              <span className={styles.value}>
                {getActivityTypeName(instance.activityType?.type)}
              </span>
            </div>
            
            <div className={styles.infoItem}>
              <span className={styles.label}>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
              <span className={`${styles.value} ${getDifficultyClass(instance.difficulty)}`}>
                {getDifficultyText(instance.difficulty)}
              </span>
            </div>
            
            <div className={styles.infoItem}>
              <span className={styles.label}>–ù–∞—á–∞–ª–æ:</span>
              <span className={styles.value}>
                {instance.startedAt ? new Date(instance.startedAt).toLocaleString() : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              </span>
            </div>
            
            <div className={styles.infoItem}>
              <span className={styles.label}>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</span>
              <span className={styles.value}>
                {instance.completedAt ? new Date(instance.completedAt).toLocaleString() : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              </span>
            </div>
          </div>
        </div>
        
        {instance.status === 'completed' && (
          <div className={styles.resultSection}>
            <h4 className={styles.resultTitle}>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h4>
            
            {Array.isArray(instance.rewards) && instance.rewards.length > 0 ? (
              <div className={styles.rewardsList}>
                <h5 className={styles.rewardsTitle}>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</h5>
                
                {instance.rewards.map(reward => (
                  <div key={reward.id} className={styles.rewardItem}>
                    {reward.rewardType === 'experience' && (
                      <>
                        <span className={styles.rewardIcon}>üîÆ</span>
                        <span className={styles.rewardName}>–û–ø—ã—Ç –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏</span>
                        <span className={styles.rewardValue}>+{reward.quantity}</span>
                      </>
                    )}
                    
                    {reward.rewardType === 'resource' && (
                      <>
                        <span className={styles.rewardIcon}>üåø</span>
                        <span className={styles.rewardName}>{reward.rewardId}</span>
                        <span className={styles.rewardValue}>x{reward.quantity}</span>
                      </>
                    )}
                    
                    {reward.rewardType === 'item' && (
                      <>
                        <span className={styles.rewardIcon}>üì¶</span>
                        <span className={styles.rewardName}>{reward.rewardId}</span>
                        <span className={styles.rewardValue}>x{reward.quantity}</span>
                      </>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className={styles.noRewards}>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
              </div>
            )}
          </div>
        )}
        
        {instance.status === 'failed' && (
          <div className={styles.resultSection}>
            <h4 className={styles.resultTitle}>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–∞</h4>
            
            {instance.specialConditions?.reason && (
              <div className={styles.failReason}>
                –ü—Ä–∏—á–∏–Ω–∞: {instance.specialConditions.reason}
              </div>
            )}
          </div>
        )}
        
        {instance.status === 'abandoned' && (
          <div className={styles.resultSection}>
            <h4 className={styles.resultTitle}>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞</h4>
            
            {instance.specialConditions?.abandonReason && (
              <div className={styles.failReason}>
                –ü—Ä–∏—á–∏–Ω–∞: {instance.specialConditions.abandonReason}
              </div>
            )}
          </div>
        )}
        
        <div className={styles.actions}>
          <Button 
            onClick={onComplete}
            className={styles.closeButton}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </div>
      </div>
    );
  }
  
  // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
  return (
    <div className={styles.activityInstance}>
      <div className={styles.header}>
        <div className={styles.titleContainer}>
          <span className={styles.typeIcon}>
            {getActivityTypeIcon(instance.activityType?.type)}
          </span>
          <h3 className={styles.title}>
            {instance.activityType?.name || '–ì—Ä—É–ø–ø–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}
          </h3>
          <span className={`${styles.status} ${styles.statusInProgress}`}>
            –í –ø—Ä–æ—Ü–µ—Å—Å–µ
          </span>
        </div>
      </div>
      
      <div className={styles.infoSection}>
        <div className={styles.infoGrid}>
          <div className={styles.infoItem}>
            <span className={styles.label}>–¢–∏–ø:</span>
            <span className={styles.value}>
              {getActivityTypeName(instance.activityType?.type)}
            </span>
          </div>
          
          <div className={styles.infoItem}>
            <span className={styles.label}>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
            <span className={`${styles.value} ${getDifficultyClass(instance.difficulty)}`}>
              {getDifficultyText(instance.difficulty)}
            </span>
          </div>
          
          <div className={styles.infoItem}>
            <span className={styles.label}>–≠—Ç–∞–ø:</span>
              <span className={styles.value}>
                {instance.currentStage || 1}/{instance.totalStages || 3}
              </span>
          </div>
          
          <div className={styles.infoItem}>
            <span className={styles.label}>–ù–∞—á–∞–ª–æ:</span>
            <span className={styles.value}>
              {instance.startedAt ? new Date(instance.startedAt).toLocaleString() : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            </span>
          </div>
        </div>
        
      <div className={styles.progressContainer}>
        <ProgressBar 
          progress={instance.progress || 0} 
          className={styles.progressBar}
          showLabel={true}
          height="15px"
          color="#d4af37"
        />
        <span className={styles.progressText}>
          –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(instance.progress || 0)}%
        </span>
      </div>
      </div>
      
      {error && (
        <div className={styles.error}>{error}</div>
      )}
      
      <div className={styles.eventSection}>
        {currentEvent && !eventResult ? (
          <>
            <h4 className={styles.eventTitle}>{currentEvent.title}</h4>
            <p className={styles.eventDescription}>{currentEvent.description}</p>
            
            <div className={styles.eventOptions}>
              {currentEvent.options.map((option, index) => (
                <Button 
                  key={index}
                  onClick={() => handleOptionSelect(index)}
                  disabled={loading}
                  className={styles.optionButton}
                >
                  {option}
                </Button>
              ))}
            </div>
          </>
        ) : eventResult ? (
          <div className={styles.eventResult}>
            <h4 className={`${styles.resultTitle} ${eventResult.success ? styles.success : styles.failure}`}>
              {eventResult.success ? '–£—Å–ø–µ—Ö!' : '–ù–µ—É–¥–∞—á–∞!'}
            </h4>
            <p className={styles.resultDescription}>{eventResult.description}</p>
            
            {eventResult.rewards.length > 0 && (
              <div className={styles.resultRewards}>
                <h5 className={styles.rewardsTitle}>–ù–∞–≥—Ä–∞–¥—ã:</h5>
                <ul className={styles.rewardsList}>
                  {eventResult.rewards.map((reward, index) => (
                    <li key={index} className={styles.rewardItem}>
                      {reward.type === 'experience' && (
                        <>
                          <span className={styles.rewardIcon}>üîÆ</span>
                          <span className={styles.rewardName}>–û–ø—ã—Ç –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏</span>
                          <span className={styles.rewardValue}>+{reward.value}</span>
                        </>
                      )}
                      
                      {reward.type === 'resource' && (
                        <>
                          <span className={styles.rewardIcon}>üåø</span>
                          <span className={styles.rewardName}>{reward.name}</span>
                          <span className={styles.rewardValue}>x{reward.quantity}</span>
                        </>
                      )}
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            {eventResult.penalties.length > 0 && (
              <div className={styles.resultPenalties}>
                <h5 className={styles.penaltiesTitle}>–ü–æ—Ç–µ—Ä–∏:</h5>
                <ul className={styles.penaltiesList}>
                  {eventResult.penalties.map((penalty, index) => (
                    <li key={index} className={styles.penaltyItem}>
                      {penalty.type === 'health' && (
                        <>
                          <span className={styles.penaltyIcon}>‚ù§Ô∏è</span>
                          <span className={styles.penaltyName}>–ó–¥–æ—Ä–æ–≤—å–µ</span>
                          <span className={styles.penaltyValue}>-{penalty.value}</span>
                        </>
                      )}
                      
                      {penalty.type === 'energy' && (
                        <>
                          <span className={styles.penaltyIcon}>‚ö°</span>
                          <span className={styles.penaltyName}>–≠–Ω–µ—Ä–≥–∏—è</span>
                          <span className={styles.penaltyValue}>-{penalty.value}</span>
                        </>
                      )}
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
        {isLeaderOrOfficer && (
          <Button 
            onClick={handleNextStage}
            disabled={loading}
            className={styles.nextButton}
          >
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : instance.currentStage === instance.totalStages ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' : '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É'}
          </Button>
        )}
          </div>
        ) : (
          <div className={styles.loading}>
            –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è...
          </div>
        )}
      </div>
      
      <div className={styles.actionsSection}>
        {isLeaderOrOfficer && (
          <Button 
            onClick={handleFailActivity}
            disabled={loading}
            className={styles.failButton}
          >
            –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é
          </Button>
        )}
        
        {userRole === 'leader' && (
          <Button 
            onClick={handleAbandonActivity}
            disabled={loading}
            className={styles.abandonButton}
          >
            –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          </Button>
        )}
      </div>
    </div>
  );
};

export default ActivityInstance;
