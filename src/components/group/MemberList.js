import React, { useState } from 'react';
import { useGameContext } from '../../context/GameContext';
import Button from '../ui/Button';
import styles from './MemberList.module.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
 * @param {Object[]} members - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @param {string} leaderId - ID –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
 * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
 */
const MemberList = ({ members, leaderId, currentUserId, currentUserRole }) => {
  const { actions } = useGameContext();
  const [selectedMember, setSelectedMember] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏
  const getRoleInfo = (role) => {
    switch (role) {
      case 'leader':
        return { icon: 'üëë', name: '–õ–∏–¥–µ—Ä' };
      case 'officer':
        return { icon: '‚öîÔ∏è', name: '–û—Ñ–∏—Ü–µ—Ä' };
      default:
        return { icon: 'üë§', name: '–£—á–∞—Å—Ç–Ω–∏–∫' };
    }
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const getSpecIcon = (specialization) => {
    switch (specialization) {
      case 'damage':
        return 'üî•'; // –£—Ä–æ–Ω
      case 'tank':
        return 'üõ°Ô∏è'; // –ó–∞—â–∏—Ç–∞
      case 'support':
        return '‚ú®'; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞
      case 'control':
        return 'üåÄ'; // –ö–æ–Ω—Ç—Ä–æ–ª—å
      case 'healer':
        return 'üíö'; // –õ–µ—á–µ–Ω–∏–µ
      default:
        return 'üìä'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const getSpecName = (specialization) => {
    switch (specialization) {
      case 'damage':
        return '–£—Ä–æ–Ω';
      case 'tank':
        return '–ó–∞—â–∏—Ç–∞';
      case 'support':
        return '–ü–æ–¥–¥–µ—Ä–∂–∫–∞';
      case 'control':
        return '–ö–æ–Ω—Ç—Ä–æ–ª—å';
      case 'healer':
        return '–õ–µ—á–µ–Ω–∏–µ';
      default:
        return '–£–Ω–∏–≤–µ—Ä—Å–∞–ª';
    }
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
  const canManageMember = (member) => {
    // –õ–∏–¥–µ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏
    if (currentUserRole === 'leader') {
      return true;
    }
    
    // –û—Ñ–∏—Ü–µ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ã—á–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    if (currentUserRole === 'officer' && member.role === 'member') {
      return true;
    }
    
    return false;
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ –æ—Ñ–∏—Ü–µ—Ä–∞
  const handlePromote = async (member) => {
    if (currentUserRole !== 'leader') {
      actions.addNotification({
        message: '–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        type: 'error'
      });
      return;
    }
    
    if (member.role !== 'member') {
      actions.addNotification({
        message: '–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—É—é —Ä–æ–ª—å',
        type: 'error'
      });
      return;
    }
    
    setLoading(true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
      /*
      await actions.dispatch({
        type: 'UPDATE_MEMBER_ROLE',
        payload: {
          groupId: member.groupId,
          userId: member.userId,
          newRole: 'officer'
        }
      });
      */
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      actions.addNotification({
        message: `${member.user.username} –ø–æ–≤—ã—à–µ–Ω –¥–æ –û—Ñ–∏—Ü–µ—Ä–∞`,
        type: 'success'
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      setSelectedMember(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      actions.addNotification({
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—ã—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${error.message}`,
        type: 'error'
      });
    } finally {
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –æ—Ñ–∏—Ü–µ—Ä–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const handleDemote = async (member) => {
    if (currentUserRole !== 'leader') {
      actions.addNotification({
        message: '–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –ø–æ–Ω–∏–∂–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        type: 'error'
      });
      return;
    }
    
    if (member.role !== 'officer') {
      actions.addNotification({
        message: '–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ä–æ–ª–∏',
        type: 'error'
      });
      return;
    }
    
    setLoading(true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
      /*
      await actions.dispatch({
        type: 'UPDATE_MEMBER_ROLE',
        payload: {
          groupId: member.groupId,
          userId: member.userId,
          newRole: 'member'
        }
      });
      */
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      actions.addNotification({
        message: `${member.user.username} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞`,
        type: 'success'
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      setSelectedMember(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      actions.addNotification({
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω–∏–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${error.message}`,
        type: 'error'
      });
    } finally {
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
  const handleKick = async (member) => {
    if (!canManageMember(member)) {
      actions.addNotification({
        message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
        type: 'error'
      });
      return;
    }
    
    if (member.userId === leaderId) {
      actions.addNotification({
        message: '–ù–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∏—Ç—å –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã',
        type: 'error'
      });
      return;
    }
    
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å ${member.user.username} –∏–∑ –≥—Ä—É–ø–ø—ã?`)) {
      return;
    }
    
    setLoading(true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
      /*
      await actions.dispatch({
        type: 'REMOVE_MEMBER',
        payload: {
          groupId: member.groupId,
          userId: member.userId
        }
      });
      */
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      actions.addNotification({
        message: `${member.user.username} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã`,
        type: 'success'
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      setSelectedMember(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      actions.addNotification({
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${error.message}`,
        type: 'error'
      });
    } finally {
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞
  const handleTransferLeadership = async (member) => {
    if (currentUserRole !== 'leader') {
      actions.addNotification({
        message: '–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ',
        type: 'error'
      });
      return;
    }
    
    if (member.userId === leaderId) {
      actions.addNotification({
        message: '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã',
        type: 'error'
      });
      return;
    }
    
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ ${member.user.username}?`)) {
      return;
    }
    
    setLoading(true);
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞
      /*
      await actions.dispatch({
        type: 'TRANSFER_LEADERSHIP',
        payload: {
          groupId: member.groupId,
          newLeaderId: member.userId
        }
      });
      */
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      actions.addNotification({
        message: `–õ–∏–¥–µ—Ä—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–æ ${member.user.username}`,
        type: 'success'
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      setSelectedMember(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞:', error);
      actions.addNotification({
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ: ${error.message}`,
        type: 'error'
      });
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className={styles.memberList}>
      {members.map(member => {
        const roleInfo = getRoleInfo(member.role);
        const isLeader = member.userId === leaderId;
        const isCurrentUser = member.userId === currentUserId;
        const canManage = canManageMember(member) && !isCurrentUser;
        
        return (
          <div 
            key={member.userId} 
            className={`${styles.memberItem} ${selectedMember?.userId === member.userId ? styles.selected : ''}`}
            onClick={() => setSelectedMember(selectedMember?.userId === member.userId ? null : member)}
          >
            <div className={styles.memberInfo}>
              <div className={styles.nameWrapper}>
                <span className={styles.role}>{roleInfo.icon}</span>
                <span className={styles.username}>
                  {member.user.username}
                  {isCurrentUser && <span className={styles.currentUser}> (–í—ã)</span>}
                </span>
              </div>
              
              <div className={styles.stats}>
                <span className={styles.level}>
                  –£—Ä–æ–≤–µ–Ω—å {member.user.cultivationLevel}
                </span>
                <span className={styles.specialization}>
                  {getSpecIcon(member.specialization)} {getSpecName(member.specialization)}
                </span>
              </div>
            </div>
            
            {/* –î–µ–π—Å—Ç–≤–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º */}
            {selectedMember?.userId === member.userId && (
              <div className={styles.memberActions}>
                {isLeader && currentUserRole === 'leader' && (
                  <span className={styles.leaderNote}>–õ–∏–¥–µ—Ä –≥—Ä—É–ø–ø—ã</span>
                )}
                
                {currentUserRole === 'leader' && !isLeader && member.role === 'member' && (
                  <Button 
                    className={styles.promoteButton}
                    onClick={() => handlePromote(member)}
                    disabled={loading}
                  >
                    –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ –æ—Ñ–∏—Ü–µ—Ä–∞
                  </Button>
                )}
                
                {currentUserRole === 'leader' && member.role === 'officer' && (
                  <Button 
                    className={styles.demoteButton}
                    onClick={() => handleDemote(member)}
                    disabled={loading}
                  >
                    –ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                  </Button>
                )}
                
                {currentUserRole === 'leader' && !isLeader && (
                  <Button 
                    className={styles.transferButton}
                    onClick={() => handleTransferLeadership(member)}
                    disabled={loading}
                  >
                    –ü–µ—Ä–µ–¥–∞—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ
                  </Button>
                )}
                
                {canManage && (
                  <Button 
                    className={styles.kickButton}
                    onClick={() => handleKick(member)}
                    disabled={loading}
                  >
                    –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã
                  </Button>
                )}
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
};

export default MemberList;
