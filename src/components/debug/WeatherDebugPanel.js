import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useGame } from '../../context/GameContext';
import { forceWeatherChange } from '../../context/actions/weather-actions';

const DebugContainer = styled.div`
  background-color: rgba(0, 0, 0, 0.8);
  border: 1px solid #555;
  padding: 15px;
  margin-top: 10px;
  border-radius: 5px;
`;

const Title = styled.h3`
  color: #ffcc00;
  margin-top: 0;
  margin-bottom: 15px;
  font-size: 1rem;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const Row = styled.div`
  display: flex;
  margin-bottom: 10px;
  gap: 10px;
  align-items: center;
  flex-wrap: wrap;
`;

const Button = styled.button`
  background-color: #333;
  color: #fff;
  border: 1px solid #555;
  padding: 5px 10px;
  border-radius: 3px;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    background-color: #444;
  }
  
  &:active {
    background-color: #222;
  }
`;

const SmallText = styled.div`
  font-size: 0.8rem;
  color: #999;
  margin-top: 5px;
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 2px 6px;
  border-radius: 3px;
  font-size: 0.8rem;
  font-weight: bold;
  background-color: ${props => props.error ? '#ff5555' : props.warning ? '#ffaa33' : '#55aa55'};
  color: white;
  margin-left: 8px;
`;

const InfoGrid = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 8px;
  margin-top: 10px;
  font-size: 0.9rem;
`;

const InfoItem = styled.div`
  display: flex;
  justify-content: space-between;
  border-bottom: 1px dashed rgba(255, 255, 255, 0.1);
  padding: 4px 0;
`;

const Label = styled.span`
  color: #aaa;
`;

const Value = styled.span`
  color: ${props => props.error ? '#ff5555' : props.warning ? '#ffaa33' : '#fff'};
  font-weight: ${props => props.error || props.warning ? 'bold' : 'normal'};
`;

/**
 * –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 */
function WeatherDebugPanel() {
  const { state, dispatch } = useGame();
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ
  const weather = state.weather || {};
  const worldTime = state.world?.time || {};
  const [lastRefresh, setLastRefresh] = useState(Date.now());
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã –ø–æ–≥–æ–¥—ã
  const handleForceWeatherChange = () => {
    dispatch(forceWeatherChange());
    console.log('üîÑ WeatherDebugPanel: –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–æ–≥–æ–¥—ã');
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–Ω—è —Å–µ–∑–æ–Ω–∞
  const handleSyncSeasonDay = () => {
    dispatch({ type: 'SYNC_SEASON_DAY' });
    console.log('üîÑ WeatherDebugPanel: –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–Ω—è —Å–µ–∑–æ–Ω–∞');
  };
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –∏ –º–µ–Ω—è–µ—Ç –ø–æ–≥–æ–¥—É
  useEffect(() => {
    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –ø–æ–≥–æ–¥—ã —Ä–∞–≤–µ–Ω 0, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–º–µ–Ω—É –ø–æ–≥–æ–¥—ã
    if (weather.nextWeatherChange === 0) {
      console.log('‚ö†Ô∏è WeatherDebugPanel: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω—É–ª–µ–≤–æ–π nextWeatherChange, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–º–µ–Ω—É –ø–æ–≥–æ–¥—ã');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–º–µ–Ω—É –ø–æ–≥–æ–¥—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const timer = setTimeout(() => {
        dispatch(forceWeatherChange());
        console.log('üå¶Ô∏è WeatherDebugPanel: –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–æ–≥–æ–¥—ã –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞');
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [weather.nextWeatherChange, dispatch]);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  useEffect(() => {
    const timer = setInterval(() => {
      setLastRefresh(Date.now());
    }, 3000);
    
    return () => clearInterval(timer);
  }, []);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–π–º–µ—Ä –ø–æ–≥–æ–¥—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–º
  const isTimerZero = weather.nextWeatherChange === 0;
  const isTimerLow = weather.nextWeatherChange > 0 && weather.nextWeatherChange < 5;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–Ω—è —Å–µ–∑–æ–Ω–∞
  const worldDay = worldTime.day || 1;
  const seasonDay = weather.seasonDay || 1;
  const isSeasonDayMismatch = worldDay !== seasonDay && worldDay <= 30;
  
  return (
    <DebugContainer>
      <Title>
        <span>üß™</span> –û—Ç–ª–∞–¥–∫–∞ –ø–æ–≥–æ–¥—ã
      </Title>
      
      <Row>
        <Button onClick={handleForceWeatherChange}>
          –°–º–µ–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É
        </Button>
        <Button onClick={handleSyncSeasonDay}>
          –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω
        </Button>
        <div>
          –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: {weather.currentWeather} ({Math.min(100, Math.round((weather.weatherIntensity || 0) * 100))}%)
        </div>
      </Row>
      
      <Row>
        <div>
          –î–æ —Å–º–µ–Ω—ã –ø–æ–≥–æ–¥—ã: {weather.nextWeatherChange || 0} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          {isTimerZero && <StatusBadge error>–ó–ê–°–¢–†–Ø–õ–û –ù–ê 0!</StatusBadge>}
          {isTimerLow && <StatusBadge warning>–ü–û–ß–¢–ò 0</StatusBadge>}
        </div>
      </Row>
      
      <InfoGrid>
        <InfoItem>
          <Label>–î–µ–Ω—å (world):</Label>
          <Value>{worldTime.day || '?'}</Value>
        </InfoItem>
        <InfoItem>
          <Label>–î–µ–Ω—å —Å–µ–∑–æ–Ω–∞:</Label>
          <Value error={isSeasonDayMismatch}>{seasonDay} {isSeasonDayMismatch && `(–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ${worldTime.day})`}</Value>
        </InfoItem>
        <InfoItem>
          <Label>–í—Ä–µ–º—è (world):</Label>
          <Value>{worldTime.hour || 0}:{String(worldTime.minute || 0).padStart(2, '0')}</Value>
        </InfoItem>
        <InfoItem>
          <Label>–í—Ä–µ–º—è (weather):</Label>
          <Value>{weather.hour || 0}:{String(weather.minute || 0).padStart(2, '0')}</Value>
        </InfoItem>
        <InfoItem>
          <Label>weatherChangeAt:</Label>
          <Value>{weather.weatherChangeAt || 'undefined'}</Value>
        </InfoItem>
        <InfoItem>
          <Label>–ï—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑:</Label>
          <Value>{weather.forecast && weather.forecast.length > 0 ? `–î–∞ (${weather.forecast.length} —ç–ª–µ–º.)` : '–ù–µ—Ç'}</Value>
        </InfoItem>
      </InfoGrid>
      
      <SmallText>
        –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–≥–æ–¥—ã. –ü–∞–Ω–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –∏
        —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–Ω—è —Å–µ–∑–æ–Ω–∞ —Å –æ–±—â–∏–º –¥–Ω–µ–º –º–∏—Ä–∞. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date(lastRefresh).toLocaleTimeString()}
      </SmallText>
    </DebugContainer>
  );
}

export default WeatherDebugPanel;
