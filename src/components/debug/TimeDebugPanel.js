import React, { useState, useEffect, useCallback, useRef } from 'react';
import styled from 'styled-components';
import { useGame } from '../../context/GameContext';
import { updateGameTime } from '../../context/actions/weather-actions';
import WeatherService from '../../services/weather-service-adapter';
import { connectDebugTools } from '../../utils/debugTools';

// –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const ENABLE_LOGS = false;

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏
const DebugPanel = styled.div`
  position: fixed;
  bottom: 20px;
  right: 20px;
  background-color: rgba(0, 0, 0, 0.8);
  border: 1px solid #444;
  border-radius: 5px;
  padding: 15px;
  color: #fff;
  font-family: monospace;
  min-width: 300px;
  z-index: 9999;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
`;

const PanelTitle = styled.h3`
  margin: 0 0 15px 0;
  color: #ffd700;
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: #aaa;
  cursor: pointer;
  font-size: 16px;
  padding: 0;
  &:hover {
    color: #fff;
  }
`;

const TimeInfo = styled.div`
  margin-bottom: 10px;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 5px;
`;

const Label = styled.span`
  color: #aaa;
`;

const Value = styled.span`
  color: #fff;
  font-weight: bold;
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 10px;
  margin-top: 15px;
  flex-wrap: wrap;
`;

const SliderContainer = styled.div`
  margin-top: 15px;
`;

const SliderRow = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 5px;
`;

const Slider = styled.input`
  width: 100%;
  -webkit-appearance: none;
  height: 8px;
  border-radius: 4px;
  background: #333;
  outline: none;
  
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: #ffd700;
    cursor: pointer;
  }
  
  &::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: #ffd700;
    cursor: pointer;
  }
`;

const Button = styled.button`
  background-color: #333;
  border: 1px solid #555;
  border-radius: 3px;
  color: #fff;
  padding: 5px 10px;
  cursor: pointer;
  transition: background-color 0.2s;
  
  &:hover {
    background-color: #444;
  }
  
  &:active {
    background-color: #555;
  }
`;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */
function TimeDebugPanel({ onClose }) {
  const { state, actions } = useGame();
  const [timeInfo, setTimeInfo] = useState(null);
  const [isVisible, setIsVisible] = useState(true);
  const [customMultiplier, setCustomMultiplier] = useState(WeatherService.TIME_MULTIPLIER);
  const [clickedButton, setClickedButton] = useState(null);
  const refreshTimerRef = useRef(null);
  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏
  const fetchTimeInfo = useCallback(() => {
      console.log('üìä TimeDebugPanel - fetchTimeInfo, –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
        world_time: state.world?.time,
        weather: state.weather
      });
      
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ world.time
      if (state.world?.time) {
        console.log('‚≠ê‚≠ê –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ü–†–ê–í–î–´: state.world.time =', state.world.time);
      }
  
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û state.world.time, –∏–≥–Ω–æ—Ä–∏—Ä—É—è weather
      const worldTime = state.world?.time || {};
      
      // –í–ê–ñ–ù–û: –Ø–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ worldTime —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
      const hour = worldTime.hour !== undefined ? Number(worldTime.hour) : 12;
      const minute = worldTime.minute !== undefined ? Number(worldTime.minute) : 0;
      const day = worldTime.day !== undefined ? Number(worldTime.day) : 1;
      const season = worldTime.season || 'spring';
      
      // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç—ã –¥–∞–Ω–Ω—ã–µ
      console.log('üîç –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó state.world.time:', { 
        hour, 
        minute, 
        day,
        season
      });
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ hour/minute
      const isDayTime = hour >= 6 && hour < 20;
      const formattedTime = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
      const currentTime = hour * 60 + minute;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å—É—Ç–æ–∫ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
      const daytimePeriod = 
        (hour >= 5 && hour < 7) ? 'dawn' :
        (hour >= 7 && hour < 11) ? 'morning' :
        (hour >= 11 && hour < 14) ? 'noon' :
        (hour >= 14 && hour < 17) ? 'afternoon' :
        (hour >= 17 && hour < 20) ? 'evening' :
        (hour >= 20 && hour < 23) ? 'night' : 'deepNight';
      
      const daytimeName = {
        dawn: '–†–∞—Å—Å–≤–µ—Ç',
        morning: '–£—Ç—Ä–æ',
        noon: '–ü–æ–ª–¥–µ–Ω—å',
        afternoon: '–î–µ–Ω—å',
        evening: '–í–µ—á–µ—Ä',
        night: '–ù–æ—á—å',
        deepNight: '–ì–ª—É–±–æ–∫–∞—è –Ω–æ—á—å'
      }[daytimePeriod] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å —Å–µ–∑–æ–Ω–∞ —Å –º–∏—Ä–æ–≤—ã–º –¥–Ω–µ–º
      const synchronizedSeasonDay = day; // –í—Å–µ–≥–¥–∞ –±–µ—Ä–µ–º –¥–µ–Ω—å —Å–µ–∑–æ–Ω–∞ = –º–∏—Ä–æ–≤–æ–π –¥–µ–Ω—å
      
      // –ï—Å–ª–∏ –¥–µ–Ω—å —Å–µ–∑–æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
      if (state.weather?.seasonDay !== day) {
        console.log('üîÑ TimeDebugPanel: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–Ω—è —Å–µ–∑–æ–Ω–∞', {
          —Ç–µ–∫—É—â–∏–π_–¥–µ–Ω—å_—Å–µ–∑–æ–Ω–∞: state.weather?.seasonDay,
          –º–∏—Ä–æ–≤–æ–π_–¥–µ–Ω—å: day,
          –¥–µ–π—Å—Ç–≤–∏–µ: '–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'
        });
        
        // –í—ã–∑—ã–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
        if (day !== undefined && actions && actions.dispatch) {
          setTimeout(() => {
            actions.dispatch({ type: 'SYNC_SEASON_DAY' });
          }, 100);
        }
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—Ä–µ–º–µ–Ω–∏
      const computedTimeInfo = {
        hour,
        minute,
        dayCount: day,
        formattedTime,
        isDayTime,
        daytimePeriod,
        daytimeName,
        currentTime,
        currentSeason: season,
        seasonDay: synchronizedSeasonDay, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        // –≠—Ç–∏ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        currentWeather: state.weather?.currentWeather || 'clear',
        nextWeatherChange: state.weather?.nextWeatherChange || 60
      };
      
      console.log('‚è∞‚è∞ TimeDebugPanel - –ò–¢–û–ì–û–í–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏:', computedTimeInfo);
      
      setTimeInfo(computedTimeInfo);
    }, [state]);
  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–Ω—è
  const prevDayRef = useRef(null);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    connectDebugTools({ context: { state } });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    fetchTimeInfo();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–µ–∂–µ - –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã)
    refreshTimerRef.current = setInterval(fetchTimeInfo, 3000);
    
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (refreshTimerRef.current) {
        clearInterval(refreshTimerRef.current);
      }
    };
  }, [state, fetchTimeInfo]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–Ω—è
  useEffect(() => {
    const currentDay = state.world?.time?.day;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (prevDayRef.current === null) {
      prevDayRef.current = currentDay;
      return;
    }
    
    // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
    if (currentDay !== prevDayRef.current) {
      console.log('üéØüéØüéØ –î–ï–ù–¨ –ò–ó–ú–ï–ù–ò–õ–°–Ø –í UI –ö–û–ú–ü–û–ù–ï–ù–¢–ï:', {
        prevDay: prevDayRef.current,
        newDay: currentDay,
        worldTimeObject: {...state.world?.time},
        timeInfo: timeInfo,
        detectedChange: true
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
      prevDayRef.current = currentDay;
    }
  }, [state.world?.time?.day, timeInfo]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
  const advanceTime = useCallback((minutes) => {
    try {
      console.log('üîç advanceTime –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', minutes);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ actions –∏ dispatch —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (!actions) {
        console.error('üö´ actions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }
      
      if (!actions.dispatch) {
        console.error('üö´ actions.dispatch –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. actions:', actions);
        return;
      }
      
      console.log('‚úÖ actions –∏ dispatch —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      
      // –í–ê–ñ–ù–û: –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è diag, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      console.log('üî¨ DIAG: –ò—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:', {
        worldTime: state.world?.time, 
        weather: {
          hour: state.weather?.hour,
          minute: state.weather?.minute,
          dayCount: state.weather?.dayCount
        }
      });
      
      console.log('‚ö°‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º updateGameTime –¥–ª—è –°–ò–ù–•–†–û–ù–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏');
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫—à–µ–Ω —Å —è–≤–Ω—ã–º —Ñ–ª–∞–≥–æ–º —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const action = updateGameTime(minutes, true);
      
      // –í–ê–ñ–ù–û: —è–≤–Ω–æ –º–∞—Ä–∫–∏—Ä—É–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üìå –û–¢–ü–†–ê–í–õ–Ø–ï–ú updateGameTime:', {
        minutes,
        isManual: true,
        action
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä 
      actions.dispatch(action);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      window.dispatchEvent(new CustomEvent('manual_time_update', {
        detail: { type: 'manual_time_update', minutes, timestamp: Date.now() }
      }));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      window.__forceSyncWeatherTime = true;

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const checkTimestamps = [100, 500, 1500]; // –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 0.1, 0.5 –∏ 1.5 —Å–µ–∫—É–Ω–¥—ã
      
      // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
      const scheduleChecks = () => {
        checkTimestamps.forEach((timestamp, index) => {
          setTimeout(() => {
            console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ #${index + 1} (${timestamp} –º—Å)...`);
            
            // –°–ø–µ—Ä–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            fetchTimeInfo();
            
            // ‚ö†Ô∏è‚ö†Ô∏è –û–ß–ï–ù–¨ –í–ê–ñ–ù–û! –ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–†–Ø–ú–£–Æ –∫–æ–º–∞–Ω–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            // –≠—Ç–æ –æ–±—Ö–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
            if (index === checkTimestamps.length - 1) { // –¢–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
              console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø');
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ dispatch –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              if (actions && actions.dispatch) {
                console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DIRECT_FORCE_SYNC_WEATHER_TIME');
                actions.dispatch({
                  type: 'DIRECT_FORCE_SYNC_WEATHER_TIME',
                  payload: {} // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã, —Ä–µ–¥—å—é—Å–µ—Ä —Å–∞–º –ø–æ–ª—É—á–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                });
              }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
              fetchTimeInfo();
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É world.time –∏ weather - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞
              if (state.world?.time && state.weather) {
                // –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                console.log('üîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ê–ù–ù–´–• –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø:', {
                  worldHour: {
                    value: state.world.time.hour,
                    type: typeof state.world.time.hour,
                    isNumber: !isNaN(Number(state.world.time.hour))
                  },
                  worldMinute: {
                    value: state.world.time.minute,
                    type: typeof state.world.time.minute,
                    isNumber: !isNaN(Number(state.world.time.minute))
                  },
                  weatherHour: {
                    value: state.weather.hour,
                    type: typeof state.weather.hour,
                    isNumber: !isNaN(Number(state.weather.hour))
                  },
                  weatherMinute: {
                    value: state.weather.minute,
                    type: typeof state.weather.minute,
                    isNumber: !isNaN(Number(state.weather.minute))
                  }
                });
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –Ω–µ –ø—Ä–æ—Å—Ç–æ Number(), –∞ parseInt() —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ NaN
                // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞ –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è
                const worldHour = parseInt(state.world.time.hour, 10);
                const worldMinute = parseInt(state.world.time.minute, 10);
                const weatherHour = parseInt(state.weather.hour, 10);
                const weatherMinute = parseInt(state.weather.minute, 10);
                
                // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û –≤—ã–ø–æ–ª–Ω–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
                const valuesAreValid = 
                  !isNaN(worldHour) && 
                  !isNaN(worldMinute) && 
                  !isNaN(weatherHour) && 
                  !isNaN(weatherMinute);
                
                // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—â—ë –∏ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –º–∏–Ω—É—Ç
                // –≠—Ç–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                const minuteStringsEqual = String(state.world.time.minute) === String(state.weather.minute);
                
                // –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                const isHourSynced = worldHour === weatherHour;
                // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–∏–Ω—É—Ç - –ø–æ —á–∏—Å–ª–∞–º –ò –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                const isMinuteSynced = (worldMinute === weatherMinute) || minuteStringsEqual;
                const isDaySynced = parseInt(state.world.time.day, 10) === parseInt(state.weather.dayCount, 10);
                const isSeasonSynced = state.world.time.season === state.weather.currentSeason;
                
                if (!isHourSynced || !isMinuteSynced || !isDaySynced || !isSeasonSynced || !valuesAreValid) {
                  console.error('‚ö†Ô∏è –û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –º–µ–∂–¥—É world.time –∏ weather:', {
                    hourSynced: isHourSynced,
                    minuteSynced: isMinuteSynced,
                    minuteStringsEqual, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                    daySynced: isDaySynced,
                    seasonSynced: isSeasonSynced,
                    valuesAreValid, // –í—Å–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
                    worldTime: {
                      hour: worldHour,
                      minute: worldMinute,
                      hourRaw: state.world.time.hour,
                      minuteRaw: state.world.time.minute,
                      day: state.world.time.day,
                      season: state.world.time.season,
                    },
                    weather: {
                      hour: weatherHour,
                      minute: weatherMinute,
                      hourRaw: state.weather.hour,
                      minuteRaw: state.weather.minute,
                      dayCount: state.weather.dayCount,
                      currentSeason: state.weather.currentSeason
                    }
                  });
                  
                  // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–Ω—É—Ç–∞–º–∏,
                  // –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—ë –≤—Ä—É—á–Ω—É—é
                  if (!isMinuteSynced && actions && actions.dispatch) {
                    console.log('üîß –†–£–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –º–∏–Ω—É—Ç –≤ weather: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º minute = ' + state.world.time.minute);
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—à–µ–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
                    actions.dispatch({
                      type: 'FIX_WEATHER_MINUTES',
                      payload: {
                        minute: state.world.time.minute
                      }
                    });
                  }
                } else {
                  console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–∞!');
                }
              }
            }, 200); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          }, timestamp);
        });
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
      scheduleChecks();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ advanceTime:', error);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      if (error && error.toString().includes('TypeError')) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      }
    }
  }, [actions, fetchTimeInfo]);
  
  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —á–∞—Å–æ–≤
  const advanceGameHours = useCallback((hours) => {
    try {
      console.log(`üïí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${hours} –∏–≥—Ä–æ–≤—ã—Ö —á–∞—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ actions –∏ dispatch —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (!actions) {
        console.error('üö´ actions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }
      
      if (!actions.dispatch) {
        console.error('üö´ actions.dispatch –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. actions:', actions);
        return;
      }
      
      console.log('‚úÖ actions –∏ dispatch —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      console.log('üî¨ DIAG: –ò—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —á–∞—Å–æ–≤:', {
        worldTime: state.world?.time, 
        hours
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—à–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —á–∞—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
      actions.dispatch({
        type: 'DIRECT_ADD_GAME_HOURS',
        payload: {
          hours: hours,
          timestamp: Date.now()
        }
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      window.dispatchEvent(new CustomEvent('manual_time_update', {
        detail: { type: 'manual_game_hours_update', hours, timestamp: Date.now() }
      }));
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const checkTimestamps = [100, 500];
      
      checkTimestamps.forEach((timestamp, index) => {
        setTimeout(() => {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          fetchTimeInfo();
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
          if (index === checkTimestamps.length - 1) {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤');
            if (actions && actions.dispatch) {
              actions.dispatch({
                type: 'DIRECT_FORCE_SYNC_WEATHER_TIME',
                payload: {}
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              setTimeout(fetchTimeInfo, 200);
            }
          }
        }, timestamp);
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ advanceGameHours:', error);
    }
  }, [actions, fetchTimeInfo]);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ª–∞–¥–∫–∏
  const showConsoleDebug = useCallback(() => {
    if (typeof window !== 'undefined' && window.getGameTime) {
      window.getGameTime({ state });
    } else {
      console.info('–§—É–Ω–∫—Ü–∏—è getGameTime() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
  }, [state]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—Ä–µ–º–µ–Ω–∏
  const updateTimeMultiplier = useCallback((newValue) => {
    console.log('üîß updateTimeMultiplier –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:', newValue);
    
    const multiplier = parseInt(newValue, 10);
    if (!isNaN(multiplier) && multiplier > 0) {
      // –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const oldMultiplier = WeatherService.TIME_MULTIPLIER;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      WeatherService.TIME_MULTIPLIER = multiplier;
      setCustomMultiplier(multiplier);
      
      console.log(`‚úÖ TIME_MULTIPLIER –∏–∑–º–µ–Ω–µ–Ω: ${oldMultiplier} ‚Üí ${multiplier}`);
      
      // –°–æ–æ–±—â–∞–µ–º –¥—Ä—É–≥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      window.dispatchEvent(new CustomEvent('time_multiplier_changed', {
        detail: { timeMultiplier: multiplier }
      }));
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      try {
        if (actions && actions.dispatch) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—à–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          actions.dispatch({
            type: 'UPDATE_TIME_MULTIPLIER',
            payload: { multiplier }
          });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ UPDATE_TIME_MULTIPLIER:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è:', newValue);
    }
  }, [actions]);
  
  // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
  const handleClose = () => {
    setIsVisible(false);
    if (onClose) onClose();
  };
  
  if (!isVisible || !timeInfo) return null;
  
  return (
    <DebugPanel>
      <PanelTitle>
        –û—Ç–ª–∞–¥–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        <CloseButton onClick={handleClose}>√ó</CloseButton>
      </PanelTitle>
      
      <TimeInfo>
        <Label>–í—Ä–µ–º—è:</Label>
        <Value>{timeInfo.formattedTime}</Value>
        
        <Label>–ü–µ—Ä–∏–æ–¥ —Å—É—Ç–æ–∫:</Label>
        <Value>{timeInfo.daytimeName}</Value>
        
        <Label>–î–µ–Ω—å:</Label>
        <Value>{timeInfo.dayCount}</Value>
        
        <Label>–°–µ–∑–æ–Ω:</Label>
        <Value>
          {timeInfo.currentSeason} (–¥–µ–Ω—å {timeInfo.seasonDay})
          {(timeInfo.dayCount !== timeInfo.seasonDay) && 
            <span style={{ color: '#ff6666', marginLeft: '5px' }}>
              ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ!
            </span>
          }
        </Value>
        
        <Label>–ü–æ–≥–æ–¥–∞:</Label>
        <Value>{timeInfo.currentWeather}</Value>
        
        <Label>–î–æ —Å–º–µ–Ω—ã –ø–æ–≥–æ–¥—ã:</Label>
        <Value>
          {timeInfo.nextWeatherChange 
            ? `${timeInfo.nextWeatherChange} –º–∏–Ω. –∏–≥—Ä. / ${Math.ceil(timeInfo.nextWeatherChange / WeatherService.TIME_MULTIPLIER)} –º–∏–Ω. —Ä–µ–∞–ª.` 
            : '–ù/–î'}
        </Value>
        
        <Label>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏:</Label>
        <Value>1:{customMultiplier}</Value>
      </TimeInfo>
      
      <SliderContainer>
        <Label>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—Ä–µ–º–µ–Ω–∏:</Label>
        <SliderRow>
          <span>1</span>
          <Slider 
            type="range" 
            min="1" 
            max="240" 
            value={customMultiplier}
            onChange={(e) => {
              console.log('üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—Ä–µ–º–µ–Ω–∏:', e.target.value);
              updateTimeMultiplier(e.target.value);
            }}
            style={{
              background: `linear-gradient(to right, #ffd700 0%, #ffd700 ${(customMultiplier/240)*100}%, #333 ${(customMultiplier/240)*100}%, #333 100%)`
            }}
          />
          <span>240</span>
        </SliderRow>
        <Value style={{ textAlign: 'center', color: '#ffd700' }}>
          1 –º–∏–Ω. —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ = {customMultiplier} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        </Value>
      </SliderContainer>
      
      <ButtonGroup>
        <Button 
          onClick={() => {
            // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–Ω—è —Å–µ–∑–æ–Ω–∞ —Å –º–∏—Ä–æ–≤—ã–º –¥–Ω–µ–º
            setClickedButton('sync_day');
            
            try {
              if (actions && actions.dispatch) {
                console.log('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–Ω—è —Å–µ–∑–æ–Ω–∞ —Å –º–∏—Ä–æ–≤—ã–º –¥–Ω–µ–º');
                actions.dispatch({
                  type: 'SYNC_SEASON_DAY'
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                setTimeout(() => {
                  fetchTimeInfo();
                  console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–Ω—è —Å–µ–∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                }, 300);
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–Ω—è —Å–µ–∑–æ–Ω–∞:', error);
            }
            
            setTimeout(() => setClickedButton(null), 1000);
          }}
          style={{
            backgroundColor: clickedButton === 'sync_day' ? '#00663d' : '#006633',
            transform: clickedButton === 'sync_day' ? 'scale(0.95)' : undefined,
            boxShadow: clickedButton === 'sync_day' ? '0 0 10px #00cc66' : undefined,
            borderColor: clickedButton === 'sync_day' ? '#00cc66' : undefined
          }}
        >
          –°–∏–Ω—Ö—Ä. –¥–µ–Ω—å —Å–µ–∑–æ–Ω–∞
        </Button>
        
        <Button 
          onClick={() => {
            // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–æ–≥–æ–¥—ã
            setClickedButton('change_weather');
            
            try {
              if (actions && actions.dispatch) {
                console.log('üå§Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–º–µ–Ω—É –ø–æ–≥–æ–¥—ã');
                actions.dispatch({
                  type: 'FORCE_WEATHER_CHANGE'
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–æ–≥–æ–¥—ã
                setTimeout(() => {
                  fetchTimeInfo();
                  console.log('‚úÖ –ü–æ–≥–æ–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞');
                }, 300);
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–≥–æ–¥—ã:', error);
            }
            
            setTimeout(() => setClickedButton(null), 1000);
          }}
          style={{
            backgroundColor: clickedButton === 'change_weather' ? '#1a538c' : '#0066cc',
            transform: clickedButton === 'change_weather' ? 'scale(0.95)' : undefined,
            boxShadow: clickedButton === 'change_weather' ? '0 0 10px #66aaff' : undefined,
            borderColor: clickedButton === 'change_weather' ? '#66aaff' : undefined
          }}
        >
          –°–º–µ–Ω–∏—Ç—å –ø–æ–≥–æ–¥—É
        </Button>
        
        <Button 
          onClick={() => {
            setClickedButton('1hour');
            advanceGameHours(1);
            // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => setClickedButton(null), 1000);
          }}
          style={{
            backgroundColor: clickedButton === '1hour' ? '#7a5c00' : undefined,
            transform: clickedButton === '1hour' ? 'scale(0.95)' : undefined,
            boxShadow: clickedButton === '1hour' ? '0 0 10px #ffd700' : undefined,
            borderColor: clickedButton === '1hour' ? '#ffd700' : undefined
          }}
        >
          +1 —á–∞—Å –∏–≥—Ä.
        </Button>
        <Button 
          onClick={() => {
            setClickedButton('3hours');
            advanceGameHours(3);
            setTimeout(() => setClickedButton(null), 1000);
          }}
          style={{
            backgroundColor: clickedButton === '3hours' ? '#7a5c00' : undefined,
            transform: clickedButton === '3hours' ? 'scale(0.95)' : undefined,
            boxShadow: clickedButton === '3hours' ? '0 0 10px #ffd700' : undefined,
            borderColor: clickedButton === '3hours' ? '#ffd700' : undefined
          }}
        >
          +3 —á–∞—Å–∞ –∏–≥—Ä.
        </Button>
        <Button 
          onClick={() => {
            setClickedButton('6hours');
            advanceGameHours(6);
            setTimeout(() => setClickedButton(null), 1000);
          }}
          style={{
            backgroundColor: clickedButton === '6hours' ? '#7a5c00' : undefined,
            transform: clickedButton === '6hours' ? 'scale(0.95)' : undefined,
            boxShadow: clickedButton === '6hours' ? '0 0 10px #ffd700' : undefined,
            borderColor: clickedButton === '6hours' ? '#ffd700' : undefined
          }}
        >
          +6 —á–∞—Å–æ–≤ –∏–≥—Ä.
        </Button>
        <Button 
          onClick={() => {
            setClickedButton('12hours');
            advanceGameHours(12);
            setTimeout(() => setClickedButton(null), 1000);
          }}
          style={{
            backgroundColor: clickedButton === '12hours' ? '#7a5c00' : undefined,
            transform: clickedButton === '12hours' ? 'scale(0.95)' : undefined,
            boxShadow: clickedButton === '12hours' ? '0 0 10px #ffd700' : undefined,
            borderColor: clickedButton === '12hours' ? '#ffd700' : undefined
          }}
        >
          +12 —á–∞—Å–æ–≤ –∏–≥—Ä.
        </Button>
        <Button 
          onClick={() => {
            setClickedButton('console');
            showConsoleDebug();
            setTimeout(() => setClickedButton(null), 500);
          }}
          style={{
            backgroundColor: clickedButton === 'console' ? '#666' : undefined,
            transform: clickedButton === 'console' ? 'scale(0.95)' : undefined
          }}
        >
          –ö–æ–Ω—Å–æ–ª—å
        </Button>
      </ButtonGroup>
    </DebugPanel>
  );
}

export default TimeDebugPanel;
