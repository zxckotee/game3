import React, { useEffect, useState, useReducer } from 'react';
import styled from 'styled-components';
import { useGame } from '../../context/GameContext';
import useTimeWeather from '../../hooks/useTimeWeather';

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const ForecastContainer = styled.div`
  background-color: rgba(20, 20, 20, 0.8);
  border: 1px solid #555;
  border-radius: 8px;
  padding: 10px 15px;
  margin-bottom: 15px;
  color: #fff;
`;

const ForecastTitle = styled.h3`
  font-size: 1.1rem;
  color: #ffd700;
  margin: 0 0 15px 0;
  display: flex;
  align-items: center;
  padding-bottom: 8px;
  border-bottom: 1px solid rgba(255, 215, 0, 0.3);
  
  span {
    margin-right: 8px;
  }
`;

const ForecastCards = styled.div`
  display: flex;
  gap: 10px;
  overflow-x: auto;
  padding-bottom: 5px;
  
  /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */
  &::-webkit-scrollbar {
    height: 6px;
  }
  
  &::-webkit-scrollbar-track {
    background: rgba(30, 30, 30, 0.6);
    border-radius: 3px;
  }
  
  &::-webkit-scrollbar-thumb {
    background: rgba(150, 150, 150, 0.6);
    border-radius: 3px;
  }
`;

const WeatherCard = styled.div`
  flex: 0 0 auto;
  min-width: 180px;
  background-color: rgba(50, 50, 50, 0.6);
  border-radius: 6px;
  padding: 12px;
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: ${props => {
      switch (props.weatherType) {
        case 'clear': return 'linear-gradient(to right, #FFD700, #FFA500)'; // –ó–æ–ª–æ—Ç–æ–π
        case 'cloudy': return 'linear-gradient(to right, #B0C4DE, #778899)'; // –°–∏–Ω–µ–≤–∞—Ç–æ-—Å–µ—Ä—ã–π
        case 'rain': return 'linear-gradient(to right, #4682B4, #1E90FF)'; // –°–∏–Ω–∏–π
        case 'thunderstorm': return 'linear-gradient(to right, #483D8B, #6A5ACD)'; // –ü—É—Ä–ø—É—Ä–Ω—ã–π
        case 'fog': return 'linear-gradient(to right, #D3D3D3, #A9A9A9)'; // –°–µ—Ä—ã–π
        case 'snow': return 'linear-gradient(to right, #F0F8FF, #B0E2FF)'; // –ì–æ–ª—É–±–æ–π
        default: return 'linear-gradient(to right, #FFD700, #FFA500)';
      }
    }};
    border-radius: 6px 6px 0 0;
  }
`;

const CardHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
`;

const WeatherType = styled.div`
  font-weight: bold;
  display: flex;
  align-items: center;
  gap: 6px;
`;

const WeatherIcon = styled.span`
  font-size: 1.3rem;
`;

const Intensity = styled.div`
  font-size: 0.85rem;
  color: ${props => {
    // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    return props.value > 100 ? '#FF7F7F' : '#7FFF7F';
  }};
`;

const TimeInfo = styled.div`
  font-size: 0.85rem;
  color: #ccc;
  margin-top: 5px;
`;

const CurrentWeatherFlag = styled.div`
  position: absolute;
  top: -8px;
  right: -8px;
  background-color: rgba(255, 215, 0, 0.8);
  color: #000;
  font-size: 0.7rem;
  font-weight: bold;
  padding: 2px 6px;
  border-radius: 4px;
  transform: rotate(5deg);
`;

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
const weatherIcons = {
  clear: '‚òÄÔ∏è',
  cloudy: '‚òÅÔ∏è',
  rain: 'üåßÔ∏è',
  thunderstorm: '‚õàÔ∏è',
  fog: 'üå´Ô∏è',
  snow: '‚ùÑÔ∏è'
};

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
const weatherNames = {
  clear: '–Ø—Å–Ω–æ',
  cloudy: '–û–±–ª–∞—á–Ω–æ',
  rain: '–î–æ–∂–¥—å',
  thunderstorm: '–ì—Ä–æ–∑–∞',
  fog: '–¢—É–º–∞–Ω',
  snow: '–°–Ω–µ–≥'
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
 */
function ForecastWidget() {
  const { state } = useGame();
  const timeWeather = useTimeWeather();
  const [_, forceUpdate] = useReducer(x => x + 1, 0);
  
  // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –±–µ—Ä–µ–º –°–¢–†–û–ì–û –∏–∑ state.weather, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
  const weather = state.weather || {};
  const forecast = weather.forecast || [];
  
  // –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
  const currentWeather = timeWeather.currentWeather;
  const weatherIntensity = timeWeather.weatherIntensity;
  const nextWeatherChange = weather.nextWeatherChange || 0;
  const { actions } = useGame();
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º nextWeatherChange –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º –ø–æ–≥–æ–¥—É, –µ—Å–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω 0
  useEffect(() => {
    if (nextWeatherChange === 0 && currentWeather) {
      console.log('‚ö†Ô∏è ForecastWidget: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω—É–ª–µ–≤–æ–π nextWeatherChange, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–º–µ–Ω—É –ø–æ–≥–æ–¥—ã');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º –ø–æ–≥–æ–¥—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const timer = setTimeout(() => {
        actions.dispatch({ type: 'FORCE_WEATHER_CHANGE' });
        console.log('üå¶Ô∏è ForecastWidget: –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–æ–≥–æ–¥—ã –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞');
      }, 500);
      
      return () => clearTimeout(timer);
    }
  }, [nextWeatherChange, currentWeather, actions]);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
  useEffect(() => {
    forceUpdate();
    console.log('üîÑ ForecastWidget: –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω', forecast);
  }, [JSON.stringify(forecast)]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞, –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–≥–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π div
  // –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π div –≤–º–µ—Å—Ç–æ null, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—É–∫–æ–≤ –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å
  if (!forecast || forecast.length === 0) {
    return <div></div>;
  }
  
  return (
    <ForecastContainer>
      <ForecastTitle>
        <span>üîÆ</span> –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
      </ForecastTitle>
      
      <ForecastCards>
        {/* –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ */}
        <WeatherCard weatherType={currentWeather}>
          <CurrentWeatherFlag>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</CurrentWeatherFlag>
          <CardHeader>
            <WeatherType>
              <WeatherIcon>{weatherIcons[currentWeather]}</WeatherIcon>
              {weatherNames[currentWeather]}
            </WeatherType>
            <Intensity value={Math.min(100, Math.round(weatherIntensity * 100))}>
              {Math.min(100, Math.round(weatherIntensity * 100))}%
            </Intensity>
          </CardHeader>
          <TimeInfo>
            –î–æ —Å–º–µ–Ω—ã: {nextWeatherChange} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          </TimeInfo>
        </WeatherCard>
        
        {/* –ü—Ä–æ–≥–Ω–æ–∑—ã */}
        {forecast.map((item, index) => (
          <WeatherCard key={index} weatherType={item.type}>
            <CardHeader>
              <WeatherType>
                <WeatherIcon>{weatherIcons[item.type]}</WeatherIcon>
                {weatherNames[item.type]}
              </WeatherType>
              <Intensity value={Math.min(100, Math.round(item.intensity * 100))}>
                {Math.min(100, Math.round(item.intensity * 100))}%
              </Intensity>
            </CardHeader>
            <TimeInfo>
              –ß–µ—Ä–µ–∑ {item.timeToOccur} –º–∏–Ω. –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            </TimeInfo>
            <TimeInfo>
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item.duration} –º–∏–Ω.
            </TimeInfo>
          </WeatherCard>
        ))}
      </ForecastCards>
    </ForecastContainer>
  );
}

export default ForecastWidget;
