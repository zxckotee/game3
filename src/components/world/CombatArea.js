import React, { useState, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { useGame } from '../../context/GameContext';
import CombatManager from '../combat/CombatManager';
import { enemies, getModifiedEnemySpawns } from '../../data/enemies-adapter';

const Container = styled.div`
  position: relative;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
`;

const WorldArea = styled.div`
  width: 100%;
  height: 100%;
  padding: 20px;
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const WeatherBanner = styled.div`
  background: rgba(30, 30, 30, 0.95);
  border-radius: 8px;
  padding: 10px 15px;
  margin-bottom: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-left: 3px solid #d4af37;
`;

const WeatherInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
`;

const WeatherIcon = styled.div`
  font-size: 1.8rem;
`;

const WeatherDetails = styled.div`
  display: flex;
  flex-direction: column;
`;

const WeatherType = styled.div`
  color: #d4af37;
  font-size: 1.1rem;
`;

const TimeOfDay = styled.div`
  color: #aaa;
  font-size: 0.9rem;
`;

const WeatherEffects = styled.div`
  color: #aaa;
  font-size: 0.8rem;
  max-width: 50%;
  
  span {
    color: ${props => props.positive ? '#a3be8c' : '#bf616a'};
  }
`;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã
const getTimeIcon = (timeOfDay) => {
  switch(timeOfDay) {
    case '—Ä–∞—Å—Å–≤–µ—Ç': return 'üåÖ';
    case '—É—Ç—Ä–æ': return 'üåÑ';
    case '–ø–æ–ª–¥–µ–Ω—å': return '‚òÄÔ∏è';
    case '–¥–µ–Ω—å': return 'üåû';
    case '–≤–µ—á–µ—Ä': return 'üåá';
    case '–Ω–æ—á—å': return 'üåô';
    default: return '‚è∞';
  }
};

const getWeatherIcon = (weatherType) => {
  switch(weatherType) {
    case '–Ø—Å–Ω–æ': return '‚òÄÔ∏è';
    case '–û–±–ª–∞—á–Ω–æ': return '‚òÅÔ∏è';
    case '–î–æ–∂–¥—å': return 'üåßÔ∏è';
    case '–ì—Ä–æ–∑–∞': return '‚õàÔ∏è';
    case '–¢—É–º–∞–Ω': return 'üå´Ô∏è';
    case '–°–Ω–µ–≥': return '‚ùÑÔ∏è';
    default: return 'üåà';
  }
};

const AreaInfo = styled.div`
  background: rgba(30, 30, 30, 0.95);
  border-radius: 8px;
  padding: 20px;
`;

const AreaTitle = styled.h2`
  color: #d4af37;
  margin: 0 0 10px 0;
`;

const AreaDescription = styled.p`
  color: #aaa;
  margin: 0;
  line-height: 1.6;
`;

const EnemiesList = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 15px;
`;

const EnemyCard = styled.div`
  background: rgba(30, 30, 30, 0.95);
  border-radius: 8px;
  padding: 15px;
  cursor: pointer;
  transition: all 0.3s ease;
  border: 1px solid transparent;
  
  ${props => props.available && `
    &:hover {
      border-color: #d4af37;
      transform: translateY(-2px);
    }
  `}
  
  ${props => !props.available && `
    opacity: 0.7;
    cursor: not-allowed;
  `}
`;

const EnemyHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 10px;
`;

const EnemyIcon = styled.div`
  font-size: 2rem;
`;

const EnemyInfo = styled.div`
  flex: 1;
`;

const EnemyName = styled.h3`
  color: #d4af37;
  margin: 0;
  font-size: 1.1rem;
`;

const EnemyLevel = styled.div`
  color: ${props => props.available ? '#aaa' : '#f44336'};
  font-size: 0.9rem;
`;

const EnemyDescription = styled.p`
  color: #aaa;
  margin: 0 0 10px 0;
  font-size: 0.9rem;
`;

const EnemyStats = styled.div`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 5px;
  font-size: 0.8rem;
  color: #aaa;
`;

const StatRow = styled.div`
  display: flex;
  justify-content: space-between;
`;

const RewardsList = styled.div`
  margin-top: 10px;
  padding-top: 10px;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
`;

const RewardItem = styled.div`
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 0.8rem;
  color: #aaa;
  
  span {
    color: #d4af37;
  }
`;

function CombatArea({ areaId }) {
  const { state, actions } = useGame();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º selectedEnemy, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ –≤—Ä–∞–≥–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const [selectedEnemy, setSelectedEnemy] = useState(() => {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–∞–≥–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (state.combat.inCombat && (state.combat.enemy || state.combat.enemyCombatState)) {
      console.log('CombatArea: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      return state.combat.enemy || state.combat.enemyCombatState;
    }
    return null;
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ - –≤—ã–∑—ã–≤–∞–µ–º –≤—Å–µ —Ö—É–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const defaultWeather = {
    weatherType: '–Ø—Å–Ω–æ',
    timeOfDay: '–¥–µ–Ω—å',
    weatherIntensity: 5,
    weatherEffects: {
      combat: {
        damageModifiers: {},
        hitChanceModifier: 1.0,
        dodgeChanceModifier: 1.0,
        critChanceModifier: 1.0,
        enemySpawnRateModifier: 1.0
      }
    }
  };
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç weather —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
  const weather = {
    ...defaultWeather,
    ...(state.weather || {}),
    weatherEffects: {
      ...defaultWeather.weatherEffects,
      ...(state.weather?.weatherEffects || {}),
      combat: {
        ...defaultWeather.weatherEffects.combat,
        ...(state.weather?.weatherEffects?.combat || {})
      }
    }
  };
  
  // –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã
  const getEnemyLevel = (spawn) => {
    return Math.floor(
      spawn.minLevel + 
      Math.random() * (spawn.maxLevel - spawn.minLevel + 1)
    );
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  const spawnEnemy = (spawn) => {
    // –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    const baseEnemy = enemies.find(e => e.id === spawn.id);
    if (!baseEnemy) {
      console.error(`–í—Ä–∞–≥ —Å ID ${spawn.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö enemies. –î–æ—Å—Ç—É–ø–Ω—ã–µ ID:`, enemies.map(e => e.id));
      
      // –í–º–µ—Å—Ç–æ null —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return {
        id: spawn.id,
        name: spawn.name || `–í—Ä–∞–≥ ${spawn.id}`,
        icon: spawn.icon || 'üëπ',
        description: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∏–∑ ${areaId}`,
        level: spawn.minLevel || 1,
        requiredLevel: spawn.minLevel || 1,
        category: spawn.category || 'normal',
        stats: {
          health: 100,
          energy: 50,
          physicalDefense: 10,
          spiritualDefense: 10,
          accuracy: 70,
          evasion: 20
        },
        attacks: [
          {
            name: "–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞",
            damage: 10,
            damageType: "physical",
            energyCost: 0
          }
        ],
        experience: 50,
        currency: {
          min: 5,
          max: 15
        },
        loot: []
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
    const cacheKey = `${areaId}_${spawn.id}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
    const cachedEnemy = state.world?.generatedEnemies?.[cacheKey];
    
    if (cachedEnemy) {
      console.log(`üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${cacheKey}`, {
        level: cachedEnemy.level,
        requiredLevel: cachedEnemy.requiredLevel
      });
      
      return cachedEnemy;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
    const level = getEnemyLevel(spawn);
    const levelMultiplier = 1 + (level - baseEnemy.level) * 0.1;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º requiredLevel
    const newEnemy = {
      ...baseEnemy,
      level,
      requiredLevel: spawn.minLevel, // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º requiredLevel –∏–∑ spawn.minLevel
      stats: {
        ...baseEnemy.stats,
        health: Math.floor(baseEnemy.stats.health * levelMultiplier),
        energy: Math.floor(baseEnemy.stats.energy * levelMultiplier),
        physicalDefense: Math.floor(baseEnemy.stats.physicalDefense * levelMultiplier),
        spiritualDefense: Math.floor(baseEnemy.stats.spiritualDefense * levelMultiplier)
      },
      attacks: baseEnemy.attacks.map(attack => ({
        ...attack,
        damage: Math.floor(attack.damage * levelMultiplier)
      })),
      experience: Math.floor(baseEnemy.experience * levelMultiplier),
      currency: {
        min: Math.floor(baseEnemy.currency.min * levelMultiplier),
        max: Math.floor(baseEnemy.currency.max * levelMultiplier)
      }
    };
    
    // –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    actions.cacheGeneratedEnemy(areaId, spawn.id, newEnemy);
    
    console.log(`üéÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: ${cacheKey}`, {
      level: newEnemy.level,
      requiredLevel: newEnemy.requiredLevel
    });
    
    return newEnemy;
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≤–µ—Ä—Ö
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–∞–≥–∏ –≤ enemies:', enemies.map(e => e.id));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getModifiedEnemySpawns –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const areaEnemies = getModifiedEnemySpawns(
    areaId,
    weather.timeOfDay,
    weather.weatherType
  );
  
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç getModifiedEnemySpawns:', areaEnemies);
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω–µ –±–ª–æ–∫–æ–≤ —É—Å–ª–æ–≤–∏–π
  let availableEnemies = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ areaEnemies –º–∞—Å—Å–∏–≤–æ–º
  if (!Array.isArray(areaEnemies)) {
    console.error('areaEnemies –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', areaEnemies);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  } else {
    try {
      // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      availableEnemies = areaEnemies.map(spawn => {
        console.log('–°–ø–∞–≤–Ω –≤—Ä–∞–≥–∞:', spawn);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ spawn –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        if (!spawn || typeof spawn !== 'object') {
          console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç spawn:', spawn);
          return null;
        }
        
        const enemy = spawnEnemy(spawn);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∞–≤–Ω–∞:', enemy);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ enemy
        if (!enemy || !enemy.stats) {
          console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç enemy:', enemy);
          return null;
        }
        
        return {
          ...enemy,
          available: state.player.cultivation.level >= spawn.minLevel
        };
      }).filter(enemy => enemy !== null); // –£–¥–∞–ª—è–µ–º null-—ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–∞–≥–æ–≤:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
  // –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  useEffect(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º
    if (state.combat.inCombat &&
        (state.combat.enemy || state.combat.enemyCombatState) &&
        (!selectedEnemy || state.combat.isProcessingAction)) {
      
      console.log('CombatArea: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—è');
      const globalEnemy = state.combat.enemy || state.combat.enemyCombatState;
      
      if (globalEnemy && globalEnemy.id) {
        setSelectedEnemy(globalEnemy);
      }
    }
    // –ï—Å–ª–∏ –±–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –Ω–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º
    else if (!state.combat.inCombat && selectedEnemy) {
      console.log('CombatArea: –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ');
      setSelectedEnemy(null);
    }
  }, [state.combat, selectedEnemy]);

  // –°–æ–∑–¥–∞–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const prevTabRef = useRef(state.ui.selectedTab);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–∞—Ä—Ç—ã –≤–æ –≤—Ä–µ–º—è –±–æ—è
  useEffect(() => {
    const currentTab = state.ui.selectedTab;
    const prevTab = prevTabRef.current;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É
    prevTabRef.current = currentTab;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–∞—Ä—Ç—ã –∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π
    if (currentTab === 'map' && prevTab !== 'map' && state.combat.inCombat) {
      console.log('CombatArea: –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–∞—Ä—Ç—ã –≤–æ –≤—Ä–µ–º—è –±–æ—è');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
      if (state.combat.isProcessingAction) {
        console.log('CombatArea: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ "–∑–∞–≤–∏—Å—à–µ–µ" —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥ NPC');
        // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É CombatManager, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–æ–π
        actions.updateCombatState({ isProcessingAction: false, forceNPCTurn: true });
      }
    }
  }, [state.ui.selectedTab, state.combat.inCombat]);

  const handleEnemySelect = (enemy) => {
    if (!enemy.available) return;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –±–æ–π —É–∂–µ –∏–¥–µ—Ç —Å —ç—Ç–∏–º –∂–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
    if (selectedEnemy && selectedEnemy.id === enemy.id && state.combat.inCombat) {
      console.log('CombatArea: –≠—Ç–æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω:', enemy.name);
      return;
    }
    
    // –ï—Å–ª–∏ –±–æ–π —É–∂–µ –∏–¥–µ—Ç —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ
    if (state.combat.inCombat) {
      console.log('CombatArea: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ');
      actions.endCombat();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–∞–≥–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    if (!enemy || typeof enemy !== 'object') {
      console.error('CombatArea: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–∞–≥–∞', enemy);
      return;
    }
    
    if (!enemy.stats) {
      console.error('CombatArea: –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç stats', enemy);
      return;
    }
    
    console.log('CombatArea: –í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –¥–ª—è –±–æ—è:', enemy.name, enemy);
    
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º startCombat –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    actions.startCombat(enemy);
    
    // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setSelectedEnemy(enemy);
  };
  
  const handleCombatEnd = (result) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
    if (state.combat.inCombat) {
      // –û—á–∏—â–∞–µ–º –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ, —Ç–∞–∫ –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSelectedEnemy(null);
      actions.endCombat(); // –í—ã–∑—ã–≤–∞–µ–º endCombat –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      
      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('CombatArea: –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:', result);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –±–æ—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
    } else {
      console.log('CombatArea: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  };
  
  // –í–º–µ—Å—Ç–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –æ–¥–Ω–æ–º return statement
  
  return (
    <Container>
      {selectedEnemy && state.combat.inCombat ? (
        <CombatManager
          enemy={selectedEnemy}
          onEnd={handleCombatEnd}
          weatherEffects={weather.weatherEffects}
          key={`combat-${selectedEnemy.id}-${state.combat.forceNPCTurn ? 'forced' : 'normal'}`}
        />
      ) : (
        <WorldArea>
          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ */}
          <WeatherBanner>
            <WeatherInfo>
              <WeatherIcon>
                {getWeatherIcon(weather.weatherType)}
                {getTimeIcon(weather.timeOfDay)}
              </WeatherIcon>
              <WeatherDetails>
                <WeatherType>{weather.weatherType}</WeatherType>
                <TimeOfDay>{weather.formattedTime || '12:00'} ({weather.timeOfDay})</TimeOfDay>
              </WeatherDetails>
            </WeatherInfo>
            
            <WeatherEffects>
              {(weather.weatherEffects?.combat?.hitChanceModifier !== undefined && 
                weather.weatherEffects.combat.hitChanceModifier !== 1.0) && (
                <div>–®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è: 
                  <span positive={weather.weatherEffects.combat.hitChanceModifier > 1.0}>
                    {weather.weatherEffects.combat.hitChanceModifier > 1.0 ? ' +' : ' -'}
                    {Math.abs(Math.round((weather.weatherEffects.combat.hitChanceModifier - 1) * 100))}%
                  </span>
                </div>
              )}
              {(weather.weatherEffects?.combat?.critChanceModifier !== undefined && 
                weather.weatherEffects.combat.critChanceModifier !== 1.0) && (
                <div>–®–∞–Ω—Å –∫—Ä–∏—Ç–∞: 
                  <span positive={weather.weatherEffects.combat.critChanceModifier > 1.0}>
                    {weather.weatherEffects.combat.critChanceModifier > 1.0 ? ' +' : ' -'}
                    {Math.abs(Math.round((weather.weatherEffects.combat.critChanceModifier - 1) * 100))}%
                  </span>
                </div>
              )}
            </WeatherEffects>
          </WeatherBanner>
          <AreaInfo>
            <AreaTitle>
              {areaId === 'starting_area' && '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞'}
              {areaId === 'mountain_path' && '–ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞'}
              {areaId === 'ancient_ruins' && '–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã'}
            </AreaTitle>
            <AreaDescription>
              {areaId === 'starting_area' && 
                '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä–æ–≤. –ó–¥–µ—Å—å –æ–±–∏—Ç–∞—é—Ç —Å–ª–∞–±—ã–µ –¥—É—Ö–æ–≤–Ω—ã–µ –∑–≤–µ—Ä–∏, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.'
              }
              {areaId === 'mountain_path' && 
                '–ò–∑–≤–∏–ª–∏—Å—Ç–∞—è —Ç—Ä–æ–ø–∞, –≤–µ–¥—É—â–∞—è –≤ –≥–æ—Ä—ã. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –∏ –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã.'
              }
              {areaId === 'ancient_ruins' && 
                '–ó–∞–≥–∞–¥–æ—á–Ω—ã–µ —Ä—É–∏–Ω—ã –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏. –í —ç—Ç–æ–º –æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ –æ–±–∏—Ç–∞—é—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—É—Ö–∏ –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥—Ä–µ–≤–Ω–∏–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞.'
              }
            </AreaDescription>
          </AreaInfo>
          
          <EnemiesList>
            {availableEnemies.map(enemy => (
              <EnemyCard
                key={enemy.id}
                available={enemy.available}
                onClick={() => handleEnemySelect(enemy)}
              >
                <EnemyHeader>
                  <EnemyIcon>{enemy.icon}</EnemyIcon>
                  <EnemyInfo>
                    <EnemyName>{enemy.name}</EnemyName>
                    <EnemyLevel available={enemy.available}>
                      {enemy.available 
                        ? `–£—Ä–æ–≤–µ–Ω—å ${enemy.level}`
                        : `–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${enemy.requiredLevel}`
                      }
                    </EnemyLevel>
                  </EnemyInfo>
                </EnemyHeader>
                
                <EnemyDescription>
                  {enemy.description}
                </EnemyDescription>
                
                <EnemyStats>
                  <StatRow>
                    <span>–ó–¥–æ—Ä–æ–≤—å–µ:</span>
                    <span>{enemy.stats.health}</span>
                  </StatRow>
                  <StatRow>
                    <span>–ó–∞—â–∏—Ç–∞:</span>
                    <span>
                      {enemy.stats.physicalDefense !== undefined
                        ? `${enemy.stats.physicalDefense || 0}/${enemy.stats.spiritualDefense || 0}`
                        : (enemy.stats.defense !== undefined ? enemy.stats.defense : "0")}
                    </span>
                  </StatRow>
                  <StatRow>
                    <span>–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                    <span>{enemy.stats.accuracy}</span>
                  </StatRow>
                  <StatRow>
                    <span>–£–∫–ª–æ–Ω–µ–Ω–∏–µ:</span>
                    <span>{enemy.stats.evasion}</span>
                  </StatRow>
                </EnemyStats>
                
                <RewardsList>
                  <RewardItem>
                    <span>‚ú®</span> {enemy.experience} –æ–ø—ã—Ç–∞
                  </RewardItem>
                  <RewardItem>
                    <span>üí∞</span> {enemy.currency.min}-{enemy.currency.max} –º–æ–Ω–µ—Ç
                  </RewardItem>
                  {enemy.loot.map((item, index) => (
                    <RewardItem key={index}>
                      <span>{item.icon || 'üì¶'}</span>
                      {item.name} ({Math.floor(item.chance)}%)
                    </RewardItem>
                  ))}
                </RewardsList>
              </EnemyCard>
            ))}
          </EnemiesList>
        </WorldArea>
      )}
    </Container>
  );
}

export default CombatArea;
