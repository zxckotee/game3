import React from 'react';
import './ActionPanel.css';
import { techniques } from '../../data/combat';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—é
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Function} props.onAction - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
 * @param {Object} props.cooldowns - –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ —Ç–µ—Ö–Ω–∏–∫
 * @param {Array} props.availableTechniques - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
 * @param {boolean} props.isMyTurn - –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —Ö–æ–¥ –ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
 * @param {string} props.selectedAction - –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
 * @param {string} props.selectedTechniqueId - ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
 */
const ActionPanel = ({
  onAction,
  cooldowns = {},
  availableTechniques = [],
  isMyTurn = true,
  selectedAction = null,
  selectedTechniqueId = null,
  currentEnergy = 100,
  maxEnergy = 100,
  isActionBlocked = false,     // –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞
  actionCooldown = 0,          // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  actionCooldownTotal = 5,     // –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  effects = [],               // –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  statsModifiers = { damage: 0, defense: 0, speed: 0, energyRegen: 0 } // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
}) => {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
  const now = new Date();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞ –≤ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ
  const isOnCooldown = (techniqueId) => {
    if (!cooldowns[techniqueId]) return false;
    
    const cooldownEndTime = new Date(cooldowns[techniqueId]);
    return now < cooldownEndTime;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const getRemainingCooldown = (techniqueId) => {
    if (!cooldowns[techniqueId]) return 0;
    
    const cooldownEndTime = new Date(cooldowns[techniqueId]);
    const remainingMs = Math.max(0, cooldownEndTime - now);
    return Math.ceil(remainingMs / 1000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
  const getActionIcon = (actionType, techniqueId) => {
    switch (actionType) {
      case 'attack':
        return '‚öîÔ∏è';
      case 'defense':
        return 'üõ°Ô∏è';
      case 'technique':
        // –ï—Å–ª–∏ technique - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ techniques
        const techniqueObj = availableTechniques.find(t =>
          (typeof t === 'object' && t.id === techniqueId) || t === techniqueId
        );
        const technique = typeof techniqueObj === 'object' ? techniqueObj : techniques[techniqueId];
        return technique?.icon || '‚ú®';
      default:
        return '‚ùì';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
  const formatCooldown = (seconds) => {
    if (seconds < 60) return `${seconds}—Å`;
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}–º ${remainingSeconds}—Å`;
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const cooldownProgress = actionCooldownTotal > 0
    ? ((actionCooldownTotal - actionCooldown) / actionCooldownTotal) * 100
    : 0;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ–≥–ª—É—à–µ–Ω–∏—è
  const isStunned = effects.some(effect => effect.type === 'stun');
  
  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const showEffectModifiers = () => {
    const modifiers = [];
    
    if (statsModifiers.damage !== 0) {
      modifiers.push(
        <div key="damage" className={`effect-modifier ${statsModifiers.damage > 0 ? 'positive' : 'negative'}`}>
          –£—Ä–æ–Ω: {statsModifiers.damage > 0 ? '+' : ''}{statsModifiers.damage}%
        </div>
      );
    }
    
    if (statsModifiers.defense !== 0) {
      modifiers.push(
        <div key="defense" className={`effect-modifier ${statsModifiers.defense > 0 ? 'positive' : 'negative'}`}>
          –ó–∞—â–∏—Ç–∞: {statsModifiers.defense > 0 ? '+' : ''}{statsModifiers.defense}%
        </div>
      );
    }
    
    if (statsModifiers.speed !== 0) {
      modifiers.push(
        <div key="speed" className={`effect-modifier ${statsModifiers.speed > 0 ? 'positive' : 'negative'}`}>
          –°–∫–æ—Ä–æ—Å—Ç—å: {statsModifiers.speed > 0 ? '+' : ''}{statsModifiers.speed}%
        </div>
      );
    }
    
    if (statsModifiers.energyRegen !== 0) {
      modifiers.push(
        <div key="energyRegen" className={`effect-modifier ${statsModifiers.energyRegen > 0 ? 'positive' : 'negative'}`}>
          –í–æ—Å—Å—Ç. —ç–Ω–µ—Ä–≥–∏–∏: +{statsModifiers.energyRegen}
        </div>
      );
    }
    
    return modifiers;
  };

  return (
    <div className="action-panel-container">
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∞–π–º–∞—É—Ç–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏ */}
      {isActionBlocked && actionCooldown > 0 && (
        <div className="action-cooldown-container">
          <div className="cooldown-text">–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: {actionCooldown}—Å</div>
          <div className="cooldown-progress-bar">
            <div
              className="cooldown-progress-fill"
              style={{ width: `${cooldownProgress}%` }}
            ></div>
          </div>
        </div>
      )}
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è */}
      {effects && effects.length > 0 && (
        <div className="active-effects-container">
          <div className="effects-summary">
            <div className="effects-title">–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</div>
            <div className="effects-modifiers">
              {showEffectModifiers()}
            </div>
          </div>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–≥–ª—É—à–µ–Ω–∏—è */}
          {isStunned && (
            <div className="stun-indicator">
              <div className="stun-icon">üí´</div>
              <div className="stun-text">–û–ì–õ–£–®–ï–ù–ò–ï</div>
            </div>
          )}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±—ã—á–Ω–æ–π –∞—Ç–∞–∫–∏ */}
      <button
        className={`action-button attack ${selectedAction === 'attack' ? 'selected' : ''} ${!isMyTurn || isActionBlocked ? 'disabled' : ''}`}
        onClick={() => isMyTurn && !isActionBlocked && onAction('attack')}
        disabled={!isMyTurn || isActionBlocked}
      >
        <div className="tooltip">–ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞, –Ω–∞–Ω–æ—Å—è—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É (0 —ç–Ω–µ—Ä–≥–∏–∏)</div>
        <div className="action-icon">{getActionIcon('attack')}</div>
        <div className="action-name">–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞</div>
        <div className="energy-cost">0</div>
      </button>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞—â–∏—Ç—ã */}
      <button
        className={`action-button defense ${selectedAction === 'defense' ? 'selected' : ''} ${!isMyTurn || isActionBlocked ? 'disabled' : ''}`}
        onClick={() => isMyTurn && !isActionBlocked && onAction('defense')}
        disabled={!isMyTurn || isActionBlocked}
      >
        <div className="tooltip">–ó–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞, —Å–Ω–∏–∂–∞—é—â–∞—è –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω –Ω–∞ 40% –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∞—è 20 –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏</div>
        <div className="action-icon">{getActionIcon('defense')}</div>
        <div className="action-name">–ó–∞—â–∏—Ç–∞</div>
        <div className="energy-cost" style={{ color: '#66bb6a' }}>+20</div>
      </button>

      {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Ö–Ω–∏–∫ */}
      {availableTechniques.map(technique => {
        // –ï—Å–ª–∏ technique - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ techniques
        const techniqueObj = typeof technique === 'object' ? technique : techniques[technique];
        if (!techniqueObj) return null;
        
        const techniqueId = typeof technique === 'object' ? technique.id : technique;

        const onCooldown = isOnCooldown(techniqueId);
        const remainingCooldown = getRemainingCooldown(techniqueId);
        const isSelected = selectedAction === 'technique' && selectedTechniqueId === techniqueId;

        return (
          <button
            key={techniqueId}
            className={`action-button technique ${!isMyTurn || isActionBlocked || onCooldown || currentEnergy < (techniqueObj.energyCost || 20) ? 'disabled' : ''} ${isSelected ? 'selected' : ''}`}
            onClick={() => isMyTurn && !isActionBlocked && !onCooldown && currentEnergy >= (techniqueObj.energyCost || 20) && onAction('technique', techniqueId)}
            disabled={!isMyTurn || isActionBlocked || onCooldown || currentEnergy < (techniqueObj.energyCost || 20)}
          >
            <div className="tooltip">{techniqueObj.description || techniqueObj.name} (–ó–∞—Ç—Ä–∞—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏: {techniqueObj.energyCost || 20})</div>
            <div className="action-icon">{getActionIcon('technique', techniqueId)}</div>
            <div className="action-name">{techniqueObj.name}</div>
            
            <div className="energy-cost">{techniqueObj.energyCost || 20}</div>
          </button>
        );
      })}
    </div>
  );
};

export default ActionPanel;