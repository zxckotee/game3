import React from 'react';
import './BattleEffects.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ—è
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Array} props.effects - –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
const BattleEffects = ({ effects = [] }) => {
  if (!effects || effects.length === 0) {
    return (
      <div className="effects-container">
        <div className="effects-title">–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</div>
        <div className="no-effects">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤</div>
      </div>
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  const getEffectIcon = (effect) => {
    // –ï—Å–ª–∏ —É —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (effect.icon) {
      return effect.icon;
    }
    
    // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —ç—Ñ—Ñ–µ–∫—Ç–∞
    switch (effect.type) {
      case 'regenerate': return 'üîÑ';
      case 'burn': return 'üî•';
      case 'bleed': return 'üí¢';
      case 'pierce': return '‚öîÔ∏è';
      case 'weaken': return '‚¨áÔ∏è';
      case 'protect': return 'üõ°Ô∏è';
      case 'speed': return '‚ö°';
      case 'stun': return 'üí´';
      case 'buff': return '‚ÜóÔ∏è';
      case 'debuff': return '‚ÜòÔ∏è';
      default: return '‚Ä¢';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è CSS –∫–ª–∞—Å—Å–∞
  const getEffectCssClass = (effect) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º CSS –∫–ª–∞—Å—Å –ø–æ —Ç–∏–ø—É —ç—Ñ—Ñ–µ–∫—Ç–∞
    switch (effect.type) {
      case 'regenerate':
      case 'protect':
      case 'speed':
        return 'buff';
      case 'burn':
      case 'bleed':
      case 'pierce':
      case 'weaken':
      case 'stun':
        return 'debuff';
      default:
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∞
        if (effect.damage_boost) return 'buff';
        if (effect.damage_reduction) return 'buff';
        if (effect.healing_boost) return 'buff';
        if (effect.damage_over_time) return 'debuff';
        if (effect.stun) return 'debuff';
        if (effect.silence) return 'debuff';
        return 'neutral';
    }
  };

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ —Ç–∏–ø—É –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–∫–∏–Ω–≥–∞
  const groupedEffects = effects.reduce((acc, effect) => {
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    let remainingSeconds = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ - –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ —Å—Ç–∞—Ä—ã–π
    if (effect.durationMs && effect.startTime) {
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
      const now = Date.now();
      const elapsedMs = now - effect.startTime;
      const remainingMs = Math.max(0, effect.durationMs - elapsedMs);
      remainingSeconds = Math.ceil(remainingMs / 1000);
    } else if (effect.remainingSeconds !== undefined) {
      // –£–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã
      remainingSeconds = effect.remainingSeconds;
    } else if (effect.displayValue && typeof effect.displayValue === 'string') {
      // –ï—Å–ª–∏ –µ—Å—Ç—å displayValue –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X —Å–µ–∫."
      const match = effect.displayValue.match(/(\d+)\s*—Å–µ–∫/);
      if (match) {
        remainingSeconds = parseInt(match[1], 10);
      }
    } else if (effect.duration) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ duration –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. –≤ –ë–î —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–µ–∫—É–Ω–¥—ã
      remainingSeconds = (effect.duration - (effect.elapsedTurns || 0));
    } else {
      // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
      remainingSeconds = 3;
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç NaN
    if (isNaN(remainingSeconds)) {
      remainingSeconds = 3;
    }
    
    if (!acc[effect.type]) {
      acc[effect.type] = {
        ...effect,
        count: 1,
        remainingSeconds: remainingSeconds,
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è —Å–∏—Å—Ç–µ–º—ã —Ö–æ–¥–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
        elapsedTurns: undefined,
        remainingTurns: undefined
      };
    } else {
      // –î–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      acc[effect.type].count += 1;
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è
      if (remainingSeconds > acc[effect.type].remainingSeconds) {
        acc[effect.type].remainingSeconds = remainingSeconds;
      }
    }
    return acc;
  }, {});
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const uniqueEffects = Object.values(groupedEffects);

  return (
    <div className="battle-effects-container">
      <div className="effects-title">–≠—Ñ—Ñ–µ–∫—Ç—ã</div>
      <ul className="effects-list">
        {uniqueEffects.map((effect, index) => {
          const effectCssClass = getEffectCssClass(effect);
          // –°—á–∏—Ç–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—Ç–µ–∫–∞—é—â–∏–º, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
          const isExpiring = effect.remainingSeconds <= 5;
          
          return (
            <li
              key={`${effect.type}-${index}`}
              className={`effect-item ${effectCssClass} ${isExpiring ? 'expiring' : ''} ${effect.isNew ? 'new' : ''}`}
              title={`${effect.description || effect.name} (${effect.remainingSeconds} —Å–µ–∫.)`}
            >
              <div className={`effect-icon ${effectCssClass}`}>
                {getEffectIcon(effect)}
                {effect.count > 1 && <span className="effect-count">{effect.count}</span>}
              </div>
              <div className="effect-name">{effect.name}</div>
              <div className={`effect-duration ${isExpiring ? 'expiring' : ''}`}>
                {effect.remainingSeconds} —Å–µ–∫.
              </div>
            </li>
          );
        })}
      </ul>
    </div>
  );
};

export default BattleEffects;