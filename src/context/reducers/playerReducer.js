import ACTION_TYPES from '../actions/actionTypes';
import CharacterStatsServiceAPI from '../../services/character-stats-api';
import BonusServiceAPI from '../../services/bonus-service-api';
import InventoryService from '../../services/inventory-adapter';
import EquipmentService from '../../services/equipment-service-adapter'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
import { ensureEquipmentHasCalculatedBonuses, ensureItemHasCalculatedBonuses } from '../../utils/equipmentBonusHelper';
import { normalizeStatusEffects, mergeEffects, reindexEffects, normalizePlayerEffects } from '../../utils/effectsNormalizer';
import { createNormalizedSectData, collectAllSectBenefits, cleanEffects } from '../../utils/sectUtils';
import { syncSectRelationshipToSocial, syncSocialToSectRelationship, updateRelationshipAndLoyalty } from '../../utils/sectRelationshipSyncer.js';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
const DEBUG_EQUIPMENT = true; // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
let lastError = null;

// –†–µ–¥—É–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏–≥—Ä–æ–∫–æ–º
export const playerReducer = (state, action) => {
  switch (action.type) {
    case ACTION_TYPES.SET_USER:
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', action.payload);
      return {
        ...state,
        auth: {
          ...state.auth,
          user: action.payload,
          isAuthenticated: !!action.payload
        }
      };
    case ACTION_TYPES.UPDATE_PLAYER:
      return {
        ...state,
        player: {
          ...state.player,
          ...action.payload,
        },
      };
      
    case ACTION_TYPES.UPDATE_PLAYER_STATS:
      return {
        ...state,
        player: {
          ...state.player,
          stats: {
            ...state.player.stats,
            ...action.payload,
          },
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ç–æ—Ä–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö
          secondaryStats: CharacterStatsServiceAPI.calculateSecondaryStats({
            ...state.player.stats,
            ...action.payload,
          }, state.player.cultivation),
        },
      };
      
    case ACTION_TYPES.UPDATE_CULTIVATION:
      console.log('üåÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏:', {
        —Ç–µ–∫—É—â–∞—è: state.player.cultivation,
        –Ω–æ–≤–∞—è: action.payload
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!action.payload) {
        console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        return state;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è (stage, level, energy, maxEnergy –∏ —Ç.–¥.)
      const hasValidData = action.payload.stage &&
                          action.payload.level &&
                          typeof action.payload.energy === 'number';
      
      if (!hasValidData) {
        console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è:',
          !action.payload.stage ? 'stage' : '',
          !action.payload.level ? 'level' : '',
          typeof action.payload.energy !== 'number' ? 'energy' : '');
        return state;
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null/undefined
      const safePayload = Object.entries(action.payload).reduce((acc, [key, value]) => {
        // –ò—Å–∫–ª—é—á–∞–µ–º null, undefined –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (value !== null && value !== undefined && value !== '') {
          acc[key] = value;
        } else {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
          if (state.player.cultivation && state.player.cultivation[key] !== undefined) {
            acc[key] = state.player.cultivation[key];
          }
        }
        return acc;
      }, {});
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
      // –Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
      const mergedCultivation = {
        ...state.player.cultivation,
        ...safePayload,
      };
      
      console.log('üåÄ –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏:', mergedCultivation);
      
      return {
        ...state,
        player: {
          ...state.player,
          cultivation: mergedCultivation,
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ç–æ—Ä–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
          secondaryStats: CharacterStatsServiceAPI.calculateSecondaryStats(
            state.player.stats,
            mergedCultivation
          ),
        },
      };
      
    case ACTION_TYPES.ADD_ITEM:
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      const existingItemIndex = state.player.inventory.items.findIndex(
        item => item.id === action.payload.id
      );
      
      if (existingItemIndex !== -1) {
        // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const updatedItems = [...state.player.inventory.items];
        updatedItems[existingItemIndex] = {
          ...updatedItems[existingItemIndex],
          quantity: updatedItems[existingItemIndex].quantity + (action.payload.quantity || 1)
        };
        
        return {
          ...state,
          player: {
            ...state.player,
            inventory: {
              ...state.player.inventory,
              items: updatedItems,
            },
          },
        };
      } else {
        // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        return {
          ...state,
          player: {
            ...state.player,
            inventory: {
              ...state.player.inventory,
              items: [...state.player.inventory.items, {
                ...action.payload,
                quantity: action.payload.quantity || 1
              }],
            },
          },
        };
      }
      
    case ACTION_TYPES.REMOVE_ITEM:
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
      const itemToRemoveIndex = state.player.inventory.items.findIndex(
        item => item.id === action.payload.id
      );
      
      if (itemToRemoveIndex === -1) {
        // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return state;
      }
      
      const itemToRemove = state.player.inventory.items[itemToRemoveIndex];
      const quantityToRemove = action.payload.quantity || 1;
      
      if (itemToRemove.quantity <= quantityToRemove) {
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –±–æ–ª—å—à–µ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
        return {
          ...state,
          player: {
            ...state.player,
            inventory: {
              ...state.player.inventory,
              items: state.player.inventory.items.filter((_, index) => index !== itemToRemoveIndex),
            },
          },
        };
      } else {
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —á–∞—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const updatedItems = [...state.player.inventory.items];
        updatedItems[itemToRemoveIndex] = {
          ...itemToRemove,
          quantity: itemToRemove.quantity - quantityToRemove
        };
        
        return {
          ...state,
          player: {
            ...state.player,
            inventory: {
              ...state.player.inventory,
              items: updatedItems,
            },
          },
        };
      }
      
    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    case ACTION_TYPES.UPDATE_INVENTORY:
      console.log('–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', action.payload);
      
      return {
        ...state,
        player: {
          ...state.player,
          inventory: {
            ...state.player.inventory,
            items: action.payload
          }
        }
      };
      
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    case ACTION_TYPES.CLEAR_INVENTORY:
      console.log('–û—á–∏—Å—Ç–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      return {
        ...state,
        player: {
          ...state.player,
          inventory: {
            ...state.player.inventory,
            items: []
          }
        }
      };
      
    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    case 'UPDATE_ITEM':
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', action.payload);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
      const itemToUpdateIndex = state.player.inventory.items.findIndex(
        item => item.id === action.payload.id
      );
      
      if (itemToUpdateIndex === -1) {
        // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        console.warn('–ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', action.payload.id);
        return state;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
      const updatedItemsList = [...state.player.inventory.items];
      updatedItemsList[itemToUpdateIndex] = {
        ...updatedItemsList[itemToUpdateIndex],
        ...action.payload
      };
      
      return {
        ...state,
        player: {
          ...state.player,
          inventory: {
            ...state.player.inventory,
            items: updatedItemsList
          }
        }
      };
      
    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    case 'ADD_ITEMS_BATCH':
      console.log('–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', action.payload);
      
      if (!Array.isArray(action.payload) || action.payload.length === 0) {
        return state; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      }
      
      const currentItems = [...state.player.inventory.items];
      const itemsToAdd = [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      action.payload.forEach(newItem => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        const existingItemIdx = currentItems.findIndex(item => item.id === newItem.id);
        
        if (existingItemIdx !== -1) {
          // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          currentItems[existingItemIdx] = {
            ...currentItems[existingItemIdx],
            quantity: currentItems[existingItemIdx].quantity + (newItem.quantity || 1)
          };
        } else {
          // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
          itemsToAdd.push({
            ...newItem,
            quantity: newItem.quantity || 1
          });
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      return {
        ...state,
        player: {
          ...state.player,
          inventory: {
            ...state.player.inventory,
            items: [...currentItems, ...itemsToAdd]
          }
        }
      };
      
    case ACTION_TYPES.UPDATE_CURRENCY:
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∞–ª—é—Ç—ã
      const newCurrency = { ...(state.player.inventory.currency || {}) };
      
      if (typeof action.payload === 'number') {
        // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ payload —ç—Ç–æ —á–∏—Å–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∑–æ–ª–æ—Ç–∞
        newCurrency.gold = (newCurrency.gold || 0) + action.payload;
      } else if (typeof action.payload === 'object') {
        // –ï—Å–ª–∏ payload —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–∞–ª—é—Ç
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ spiritStones –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const currentSpiritStones = newCurrency.spiritStones;
        
        Object.entries(action.payload).forEach(([currency, amount]) => {
          if (typeof amount === 'number') {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ç–æ—á–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if (action.isAdditive === true) {
              // –†–µ–∂–∏–º –î–û–ë–ê–í–õ–ï–ù–ò–Ø - –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–π (—Å–∫–ª–∞–¥—ã–≤–∞–µ–º)
              newCurrency[currency] = (newCurrency[currency] || 0) + amount;
            } else {
              // –†–µ–∂–∏–º –£–°–¢–ê–ù–û–í–ö–ò (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
              newCurrency[currency] = amount;
            }
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ spiritStones –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏ –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ action.payload
        if (currentSpiritStones !== undefined && action.payload.spiritStones === undefined) {
          // –ï—Å–ª–∏ spiritStones –±—ã–ª, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ payload, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
          newCurrency.spiritStones = currentSpiritStones;
          console.log('[CurrencyUpdate] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ spiritStones:', currentSpiritStones);
        }
      }
      
      // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã:', { 
        –±—ã–ª–æ: state.player.inventory.currency, 
        –Ω–æ–≤–æ–µ: newCurrency,
        —Ä–∞–∑–Ω–∏—Ü–∞: action.payload,
        —Ä–µ–∂–∏–º: action.isAdditive === true ? '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ' : '—É—Å—Ç–∞–Ω–æ–≤–∫–∞'
      });
      
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã:', newCurrency);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const currencyUpdatedState = {
        ...state,
        player: {
          ...state.player,
          inventory: {
            ...state.player.inventory,
            currency: newCurrency,
          }
        }
      };
      
      return currencyUpdatedState;
      
    case ACTION_TYPES.UPDATE_LOCATION:
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
      const locationPayload = action.payload;
      // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏
      const defaultLocations = [
        { id: 1, name: '–î–æ–ª–∏–Ω–∞ –ù–∞—á–∞–ª–∞', type: 'forest', x: 3, y: 3, description: '–ú–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–≤–æ–π –ø—É—Ç—å –º–æ–ª–æ–¥—ã–µ –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä—ã.', resources: [{ id: 1, name: '–î—É—Ö–æ–≤–Ω—ã–µ —Ç—Ä–∞–≤—ã', amount: '–ú–∞–ª–æ' }] },
        { id: 2, name: '–ì–æ—Ä—ã –û–±–ª–∞—á–Ω–æ–≥–æ –ü–∏–∫–∞', type: 'mountain', x: 5, y: 2, description: '–í—ã—Å–æ–∫–∏–µ –≥–æ—Ä—ã, –æ–∫—É—Ç–∞–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞–º–∏ –∏ –¥—É—Ö–æ–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π.', resources: [{ id: 2, name: '–î—É—Ö–æ–≤–Ω—ã–µ –∫–∞–º–Ω–∏', amount: '–°—Ä–µ–¥–Ω–µ' }] },
        { id: 3, name: '–ì–æ—Ä–æ–¥ –í–æ—Å—Ç–æ—á–Ω–æ–≥–æ –í–µ—Ç—Ä–∞', type: 'city', x: 7, y: 5, description: '–ö—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥, —Ü–µ–Ω—Ç—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏.', resources: [{ id: 3, name: '–¢–æ–≤–∞—Ä—ã', amount: '–ú–Ω–æ–≥–æ' }] },
        { id: 4, name: '–û–∑–µ—Ä–æ –û—Ç—Ä–∞–∂–µ–Ω–∏–π', type: 'water', x: 2, y: 6, description: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–∑–µ—Ä–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –∑–≤–µ–∑–¥—ã –¥–∞–∂–µ –¥–Ω–µ–º.', resources: [{ id: 4, name: '–í–æ–¥–Ω—ã–µ —ç—Å—Å–µ–Ω—Ü–∏–∏', amount: '–ú–Ω–æ–≥–æ' }] },
        { id: 5, name: '–ü–µ—â–µ—Ä–∞ –¢—ã—Å—è—á–∏ –ò—Å–ø—ã—Ç–∞–Ω–∏–π', type: 'dungeon', x: 8, y: 8, description: '–î—Ä–µ–≤–Ω–µ–µ –º–µ—Å—Ç–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π –¥–ª—è –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä–æ–≤.', resources: [{ id: 5, name: '–°–æ–∫—Ä–æ–≤–∏—â–∞', amount: '–†–µ–¥–∫–æ' }] }
      ];
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—â–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
      let fullLocationInfo = locationPayload;
      if (locationPayload && locationPayload.x !== undefined && (!locationPayload.name || !locationPayload.type)) {
        // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        const matchedLocation = defaultLocations.find(
          loc => loc.x === locationPayload.x && loc.y === locationPayload.y
        );
        
        if (matchedLocation) {
          fullLocationInfo = {
            ...matchedLocation,
            ...locationPayload // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          };
          console.log(`üåç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏: ${fullLocationInfo.name}`);
        }
      }
      
      return {
        ...state,
        world: {
          ...state.world,
          currentLocation: fullLocationInfo,
        },
        player: {
          ...state.player,
          location: fullLocationInfo,
        },
      };
      
    case ACTION_TYPES.ADD_STATUS_EFFECT:
      console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞:', action.payload);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç
      const currentEffects = normalizeStatusEffects(state.player.statusEffects);
      
      // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç id –∏ source
      const cleanNewEffect = cleanEffects([action.payload])[0];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
      const effectsWithNew = [...currentEffects, cleanNewEffect];
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ sectUtils
      const sectBenefits = collectAllSectBenefits(state.sect);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
      const playerWithNewEffect = {
        ...state.player,
        statusEffects: effectsWithNew
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ effectsNormalizer.js
      const normalizedPlayerWithNew = normalizePlayerEffects(playerWithNewEffect, state.sect);
      
      return {
        ...state,
        player: normalizedPlayerWithNew
      };
      
    case ACTION_TYPES.UPDATE_STATUS_EFFECT:
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞:', action.payload);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤
      const allEffects = normalizeStatusEffects(state.player.statusEffects);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
      const effectTypeToUpdate = action.payload.type;
      if (!effectTypeToUpdate) {
        console.error('–û—à–∏–±–∫–∞: —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', action.payload);
        return state;
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const cleanUpdatePayload = cleanEffects([action.payload])[0];
      
      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ —Ç–∏–ø—É –≤–º–µ—Å—Ç–æ ID
      const updatedEffects = allEffects.map(effect => 
        effect.type === effectTypeToUpdate ? {...effect, ...cleanUpdatePayload} : effect
      );
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
      const playerWithUpdatedEffect = {
        ...state.player,
        statusEffects: updatedEffects
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ effectsNormalizer.js
      const normalizedPlayerWithUpdated = normalizePlayerEffects(playerWithUpdatedEffect, state.sect);
      
      return {
        ...state,
        player: normalizedPlayerWithUpdated
      };
      
    case ACTION_TYPES.REMOVE_STATUS_EFFECT:
      // –¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ ID –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å —Ç–∏–ø–æ–º:', action.payload);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤
      const effectsArray = normalizeStatusEffects(state.player.statusEffects);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - ID –∏–ª–∏ —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
      const isTypeProvided = typeof action.payload === 'string';
      
      // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ —Ç–∏–ø—É –∏–ª–∏ ID
      const filteredEffects = isTypeProvided 
        ? effectsArray.filter(effect => effect.type !== action.payload)
        : effectsArray.filter(effect => effect.id !== action.payload);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
      const playerWithRemovedEffect = {
        ...state.player,
        statusEffects: filteredEffects
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ effectsNormalizer.js
      const normalizedPlayerWithRemoved = normalizePlayerEffects(playerWithRemovedEffect, state.sect);
      
      return {
        ...state,
        player: normalizedPlayerWithRemoved
      };
      
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    case ACTION_TYPES.NORMALIZE_EFFECTS:
      console.log('üìä –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
      const normalizedPlayer = normalizePlayerEffects(state.player, state.sect);
      
      console.log('‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã:', normalizedPlayer.statusEffects);
      
      return {
        ...state,
        player: normalizedPlayer
      };
    
    case ACTION_TYPES.EQUIP_ITEM:
      console.log('‚ñ∂Ô∏è‚ñ∂Ô∏è‚ñ∂Ô∏è –í–´–ó–û–í –î–ï–ô–°–¢–í–ò–Ø –≠–ö–ò–ü–ò–†–û–í–ö–ò –ü–†–ï–î–ú–ï–¢–ê ‚óÄÔ∏è‚óÄÔ∏è‚óÄÔ∏è');
      console.dir(action.payload);
      
      // –°–£–ü–ï–† –ñ–ï–°–¢–ö–ò–ô –ö–û–°–¢–´–õ–¨ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ –∏ –µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
      const itemToCheck = action.payload;
      if (itemToCheck && (itemToCheck.requirements || (itemToCheck.properties && itemToCheck.properties.requirements))) {
        console.log('üö´üö´üö´ –ü–†–ï–î–ú–ï–¢ –ò–ú–ï–ï–¢ –¢–†–ï–ë–û–í–ê–ù–ò–Ø - –ü–†–û–í–ï–†–Ø–ï–ú –ò–• üö´üö´üö´');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        const allReqs = itemToCheck.requirements || itemToCheck.properties?.requirements || {};
        console.log('–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–†–ï–î–ú–ï–¢–ê:', JSON.stringify(allReqs));
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        const playerData = {
          level: state.player.level || 1,
          stats: state.player.stats || {},
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
          strength: state.player.stats?.strength || 0,
          intellect: state.player.stats?.intellect || 0,
          agility: state.player.stats?.agility || 0,
          spirit: state.player.stats?.spirit || 0,
          health: state.player.stats?.health || 0
        };
        console.log('–î–ê–ù–ù–´–ï –ü–ï–†–°–û–ù–ê–ñ–ê:', JSON.stringify(playerData));
        
        let failedRequirements = [];
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û! –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (—Ñ–æ—Ä–º–∞—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        if (Array.isArray(allReqs)) {
          console.log('üö® –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞');
          
          // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ
          for (const req of allReqs) {
            const reqType = req.type?.toLowerCase();
            const reqValue = req.value || 0;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–≤–Ω—é
            if (reqType === 'level') {
              console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è: ${reqValue} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.level} (–∏–≥—Ä–æ–∫)`);
              if (playerData.level < reqValue) {
                failedRequirements.push(`–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${reqValue}`);
                console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.level} < ${reqValue}`);
              }
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É
            else if (reqType === 'intelligence' || reqType === 'intellect') {
              console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: ${reqValue} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.intellect} (–∏–≥—Ä–æ–∫)`);
              if (playerData.intellect < reqValue) {
                failedRequirements.push(`–¢—Ä–µ–±—É–µ–º—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: ${reqValue}`);
                console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.intellect} < ${reqValue}`);
              }
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é
            else if (reqType === 'perception' || reqType === 'spirit') {
              console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è: ${reqValue} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.spirit} (–∏–≥—Ä–æ–∫)`);
              if (playerData.spirit < reqValue) {
                failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ: ${reqValue}`);
                console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.spirit} < ${reqValue}`);
              }
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏–ª–µ
            else if (reqType === 'strength') {
              console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–∏–ª—ã: ${reqValue} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.strength} (–∏–≥—Ä–æ–∫)`);
              if (playerData.strength < reqValue) {
                failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–∞—è —Å–∏–ª–∞: ${reqValue}`);
                console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å–∏–ª—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.strength} < ${reqValue}`);
              }
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≤–∫–æ—Å—Ç–∏
            else if (reqType === 'dexterity' || reqType === 'agility') {
              console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ª–æ–≤–∫–æ—Å—Ç–∏: ${reqValue} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.agility} (–∏–≥—Ä–æ–∫)`);
              if (playerData.agility < reqValue) {
                failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–∞—è –ª–æ–≤–∫–æ—Å—Ç—å: ${reqValue}`);
                console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ª–æ–≤–∫–æ—Å—Ç–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.agility} < ${reqValue}`);
              }
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–¥–æ—Ä–æ–≤—å—é
            else if (reqType === 'vitality' || reqType === 'health') {
              console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: ${reqValue} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.health} (–∏–≥—Ä–æ–∫)`);
              if (playerData.health < reqValue) {
                failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${reqValue}`);
                console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.health} < ${reqValue}`);
              }
            }
          }
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        else {
          console.log('üö® –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞');
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–≤–Ω—é
          if (allReqs.level) {
            console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è: ${allReqs.level} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.level} (–∏–≥—Ä–æ–∫)`);
            if (playerData.level < allReqs.level) {
              failedRequirements.push(`–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${allReqs.level}`);
              console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.level} < ${allReqs.level}`);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏–ª–µ
          if (allReqs.strength) {
            console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–∏–ª—ã: ${allReqs.strength} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.strength} (–∏–≥—Ä–æ–∫)`);
            if (playerData.strength < allReqs.strength) {
              failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–∞—è —Å–∏–ª–∞: ${allReqs.strength}`);
              console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å–∏–ª—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.strength} < ${allReqs.strength}`);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É
          const reqIntellect = allReqs.intelligence || allReqs.intellect;
          if (reqIntellect) {
            console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: ${reqIntellect} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.intellect} (–∏–≥—Ä–æ–∫)`);
            if (playerData.intellect < reqIntellect) {
              failedRequirements.push(`–¢—Ä–µ–±—É–µ–º—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: ${reqIntellect}`);
              console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.intellect} < ${reqIntellect}`);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≤–∫–æ—Å—Ç–∏
          const reqAgility = allReqs.dexterity || allReqs.agility;
          if (reqAgility) {
            console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ª–æ–≤–∫–æ—Å—Ç–∏: ${reqAgility} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.agility} (–∏–≥—Ä–æ–∫)`);
            if (playerData.agility < reqAgility) {
              failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–∞—è –ª–æ–≤–∫–æ—Å—Ç—å: ${reqAgility}`);
              console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ª–æ–≤–∫–æ—Å—Ç–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.agility} < ${reqAgility}`);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥—É—Ö—É/–≤–æ—Å–ø—Ä–∏—è—Ç–∏—é
          const reqSpirit = allReqs.perception || allReqs.spirit;
          if (reqSpirit) {
            console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è: ${reqSpirit} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.spirit} (–∏–≥—Ä–æ–∫)`);
            if (playerData.spirit < reqSpirit) {
              failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ: ${reqSpirit}`);
              console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.spirit} < ${reqSpirit}`);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–¥–æ—Ä–æ–≤—å—é
          const reqHealth = allReqs.vitality || allReqs.health;
          if (reqHealth) {
            console.log(`üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: ${reqHealth} (—Ç—Ä–µ–±—É–µ—Ç—Å—è) vs ${playerData.health} (–∏–≥—Ä–æ–∫)`);
            if (playerData.health < reqHealth) {
              failedRequirements.push(`–¢—Ä–µ–±—É–µ–º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${reqHealth}`);
              console.log(`‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${playerData.health} < ${reqHealth}`);
            }
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if (failedRequirements.length > 0) {
          console.log('üõëüõëüõë –ë–õ–û–ö–ò–†–û–í–ö–ê –≠–ö–ò–ü–ò–†–û–í–ö–ò: –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
          console.log('‚ùå –ù–ï–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:', failedRequirements);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
          return {
            ...state,
            notifications: [
              ...(state.notifications || []),
              {
                id: Date.now(),
                message: `–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${failedRequirements.join(', ')}`,
                type: 'error'
              }
            ]
          };
        }
        
        console.log('‚úÖ‚úÖ‚úÖ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´, –†–ê–ó–†–ï–®–ê–ï–ú –≠–ö–ò–ü–ò–†–û–í–ö–£');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
      if (!action.payload || !action.payload.id) {
        console.error('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞', action.payload);
        return state;
      }
      
      // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–Ω–µ –±–ª–æ–∫–∞ try, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
      let itemToEquip;
      
      try {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –∏–º–µ–µ—Ç –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
        itemToEquip = ensureItemHasCalculatedBonuses(action.payload);
        
        // –§—Ä–æ–Ω—Ç–µ–Ω–¥-–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —É–¥–∞–ª–µ–Ω—ã - –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        console.log('üì¶ –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:', itemToEquip?.name || itemToEquip?.id);
        
        if (DEBUG_EQUIPMENT) {
          console.log('üìã –û–¢–õ–ê–î–ö–ê –≠–ö–ò–ü–ò–†–û–í–ö–ò:');
          console.log('üì¶ –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', JSON.stringify(itemToEquip, null, 2));
          console.log('üîÑ –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞:', itemToEquip.type);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', error);
        lastError = error;
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
      if (!itemToEquip) {
        console.error('‚ùå –û—à–∏–±–∫–∞: itemToEquip –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π');
        return state; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –ø–æ–º–µ—á–∞—è –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      const updatedInventoryItems = state.player.inventory.items.map(item => {
        // –ü–æ–º–µ—á–∞–µ–º —ç–∫–∏–ø–∏—Ä—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç
        if (item.id === itemToEquip.id) {
          return { ...item, equipped: true };
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
        if (item.type === 'armor' && itemToEquip.type === 'armor' && item.id !== itemToEquip.id && item.equipped) {
          // –ü–æ–ª—É—á–∞–µ–º armorType –¥–ª—è –æ–±–æ–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
          const itemArmorType = item.properties?.armorType || item.armorType;
          const newItemArmorType = itemToEquip.properties?.armorType || itemToEquip.armorType;
          
          // –ï—Å–ª–∏ –ø–æ–¥—Ç–∏–ø –±—Ä–æ–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const getArmorTypeFromName = (name) => {
            if (!name) return 'body'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            name = name.toLowerCase();
            if (name.includes('—à–ª–µ–º') || name.includes('—à–∞–ø–∫–∞') || name.includes('–∫–∞–ø—é—à–æ–Ω')) {
              return 'head';
            } else if (name.includes('—Å–∞–ø–æ–≥') || name.includes('–±–æ—Ç–∏–Ω') || name.includes('–æ–±—É–≤—å')) {
              return 'legs';
            } else if (name.includes('–ø–µ—Ä—á–∞—Ç') || name.includes('—Ä—É–∫–∞–≤')) {
              return 'hands';
            } else {
              return 'body'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
          };
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
          const effectiveItemType = itemArmorType || getArmorTypeFromName(item.name);
          const effectiveNewItemType = newItemArmorType || getArmorTypeFromName(itemToEquip.name);
          
          console.log(`–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –±—Ä–æ–Ω–∏: ${item.name} (${effectiveItemType}) –∏ ${itemToEquip.name} (${effectiveNewItemType})`);
          
          // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–∞ "head"), —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–º–µ—Ç
          if (effectiveItemType === effectiveNewItemType) {
            console.log(`–°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç ${item.name}, —Ç.–∫. —ç–∫–∏–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ (${effectiveNewItemType})`);
            return { ...item, equipped: false };
          }
          
          // –ü—Ä–µ–¥–º–µ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ç–∏–ø–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "head" –∏ "legs") –æ—Å—Ç–∞—é—Ç—Å—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
          return item;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ä—É–∂–∏–µ –∏ —É–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ –¥—Ä—É–≥–æ–µ –æ—Ä—É–∂–∏–µ, —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
        if (item.type === 'weapon' && itemToEquip.type === 'weapon' && item.id !== itemToEquip.id && item.equipped) {
          return { ...item, equipped: false };
        }
        
        // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ - –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–µ
        if ((item.type === 'accessory' && itemToEquip.type === 'accessory') || 
            (item.type === 'artifact' && itemToEquip.type === 'artifact')) {
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
          // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ø–æ–∑–≤–æ–ª—è—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞/–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        }
        
        return item;
      });
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      const updatedPlayer = {
        ...state.player,
        inventory: {
          ...state.player.inventory,
          items: updatedInventoryItems
        }
      };
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
      const equippedItems = {};
      updatedInventoryItems
        .filter(item => item.equipped)
        .forEach(item => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
          let slot = null;
          
          switch(item.type) {
            case 'weapon':
              slot = 'weapon';
              break;
            case 'armor':
              const armorType = item.properties?.armorType || item.armorType;
              if (armorType === 'head') slot = 'headArmor';
              else if (armorType === 'body') slot = 'bodyArmor';
              else if (armorType === 'legs') slot = 'legArmor';
              else if (armorType === 'hands') slot = 'handArmor';
              else {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω
                const name = item.name.toLowerCase();
                if (name.includes('—à–ª–µ–º') || name.includes('—à–∞–ø–∫–∞')) slot = 'headArmor';
                else if (name.includes('—Å–∞–ø–æ–≥') || name.includes('–±–æ—Ç–∏–Ω')) slot = 'legArmor';
                else if (name.includes('–ø–µ—Ä—á–∞—Ç') || name.includes('—Ä—É–∫–∞–≤')) slot = 'handArmor';
                else slot = 'bodyArmor'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –±—Ä–æ–Ω—è –¥–ª—è —Ç–µ–ª–∞
              }
              break;
            case 'accessory':
              // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
              if (!equippedItems['accessory1']) slot = 'accessory1';
              else slot = 'accessory2';
              break;
            case 'artifact':
              // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
              if (!equippedItems['artifact1']) slot = 'artifact1';
              else slot = 'artifact2';
              break;
          }
          
          if (slot) {
            equippedItems[slot] = ensureItemHasCalculatedBonuses(item);
          }
        });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
      console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ—Å–ª–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', equippedItems);
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ APPLY_EQUIPMENT_BONUSES –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
      const stateWithItem = {
        ...state,
        player: updatedPlayer
      };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
      const equipBonusesState = playerReducer(stateWithItem, { 
        type: ACTION_TYPES.APPLY_EQUIPMENT_BONUSES, 
        payload: equippedItems 
      });
      
      return equipBonusesState;
      
    case ACTION_TYPES.UNEQUIP_ITEM:
      console.log('–°–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', action.payload);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ—Ç
      if (!action.payload) {
        console.error('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Å–ª–æ—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞');
        return state;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
      const slotToUnequip = action.payload;
      const itemsToUpdate = state.player.inventory.items.map(item => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ
        let itemSlot = null;
        
        if (item.equipped) {
          switch(item.type) {
            case 'weapon':
              itemSlot = 'weapon';
              break;
            case 'armor':
              const armorType = item.properties?.armorType || item.armorType;
              if (armorType === 'head') itemSlot = 'headArmor';
              else if (armorType === 'body') itemSlot = 'bodyArmor';
              else if (armorType === 'legs') itemSlot = 'legArmor';
              else if (armorType === 'hands') itemSlot = 'handArmor';
              else {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω
                const name = item.name.toLowerCase();
                if (name.includes('—à–ª–µ–º') || name.includes('—à–∞–ø–∫–∞')) itemSlot = 'headArmor';
                else if (name.includes('—Å–∞–ø–æ–≥') || name.includes('–±–æ—Ç–∏–Ω')) itemSlot = 'legArmor';
                else if (name.includes('–ø–µ—Ä—á–∞—Ç') || name.includes('—Ä—É–∫–∞–≤')) itemSlot = 'handArmor';
                else itemSlot = 'bodyArmor'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –±—Ä–æ–Ω—è –¥–ª—è —Ç–µ–ª–∞
              }
              break;
            case 'accessory':
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —ç—Ç–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É (–ø–µ—Ä–≤—ã–π –∏–ª–∏ –≤—Ç–æ—Ä–æ–π)
              const equippedAccessories = state.player.inventory.items.filter(
                i => i.equipped && i.type === 'accessory'
              );
              
              if (equippedAccessories.length === 1) {
                // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Å–µ—Å—Å—É–∞—Ä —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω, –æ–Ω –≤—Å–µ–≥–¥–∞ –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ—Ç–µ
                if (slotToUnequip === 'accessory1') {
                  itemSlot = 'accessory1';
                }
              } else if (equippedAccessories.length >= 2) {
                // –ï—Å–ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–≤–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞, –Ω–∞—Ö–æ–¥–∏–º —ç—Ç–æ—Ç –≤ –º–∞—Å—Å–∏–≤–µ
                const accessoryIndex = equippedAccessories.findIndex(a => a.id === item.id);
                
                // –ü–µ—Ä–≤—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä –≤ —Å–ª–æ—Ç–µ accessory1, –≤—Ç–æ—Ä–æ–π –≤ accessory2
                if (accessoryIndex === 0 && slotToUnequip === 'accessory1') {
                  itemSlot = 'accessory1';
                } else if (accessoryIndex === 1 && slotToUnequip === 'accessory2') {
                  itemSlot = 'accessory2';
                }
              }
              break;
            case 'artifact':
              // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
              const equippedArtifacts = state.player.inventory.items.filter(
                i => i.equipped && i.type === 'artifact'
              );
              
              if (equippedArtifacts.length === 1) {
                if (slotToUnequip === 'artifact1') {
                  itemSlot = 'artifact1';
                }
              } else if (equippedArtifacts.length >= 2) {
                const artifactIndex = equippedArtifacts.findIndex(a => a.id === item.id);
                
                if (artifactIndex === 0 && slotToUnequip === 'artifact1') {
                  itemSlot = 'artifact1';
                } else if (artifactIndex === 1 && slotToUnequip === 'artifact2') {
                  itemSlot = 'artifact2';
                }
              }
              break;
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç —Å–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å
          if (itemSlot === slotToUnequip) {
            return { ...item, equipped: false };
          }
        }
        
        return item;
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      const playerAfterUnequip = {
        ...state.player,
        inventory: {
          ...state.player.inventory,
          items: itemsToUpdate
        }
      };
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
      const remainingEquippedItems = {};
      itemsToUpdate
        .filter(item => item.equipped)
        .forEach(item => {
          let slot = null;
          
          switch(item.type) {
            case 'weapon':
              slot = 'weapon';
              break;
            case 'armor':
              // –¢–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –≤—ã—à–µ
              const armorType = item.properties?.armorType || item.armorType;
              if (armorType === 'head') slot = 'headArmor';
              else if (armorType === 'body') slot = 'bodyArmor';
              else if (armorType === 'legs') slot = 'legArmor';
              else if (armorType === 'hands') slot = 'handArmor';
              else {
                const name = item.name.toLowerCase();
                if (name.includes('—à–ª–µ–º') || name.includes('—à–∞–ø–∫–∞')) slot = 'headArmor';
                else if (name.includes('—Å–∞–ø–æ–≥') || name.includes('–±–æ—Ç–∏–Ω')) slot = 'legArmor';
                else if (name.includes('–ø–µ—Ä—á–∞—Ç') || name.includes('—Ä—É–∫–∞–≤')) slot = 'handArmor';
                else slot = 'bodyArmor';
              }
              break;
            case 'accessory':
              if (!remainingEquippedItems['accessory1']) slot = 'accessory1';
              else slot = 'accessory2';
              break;
            case 'artifact':
              if (!remainingEquippedItems['artifact1']) slot = 'artifact1';
              else slot = 'artifact2';
              break;
          }
          
          if (slot) {
            remainingEquippedItems[slot] = ensureItemHasCalculatedBonuses(item);
          }
        });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –æ—Å—Ç–∞–≤—à–µ–π—Å—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
      console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:', remainingEquippedItems);
      
      const stateAfterUnequip = {
        ...state,
        player: playerAfterUnequip
      };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
      const unequipBonusesState = playerReducer(stateAfterUnequip, { 
        type: ACTION_TYPES.APPLY_EQUIPMENT_BONUSES, 
        payload: remainingEquippedItems 
      });
      
      return unequipBonusesState;
      
    case ACTION_TYPES.APPLY_EQUIPMENT_BONUSES:
      console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', action.payload);
      
      if (!action.payload || !Object.keys(action.payload).length) {
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤');
        return {
          ...state,
          player: {
            ...state.player,
            equipmentBonuses: {
              stats: {},
              combat: {},
              cultivation: {},
              elemental: {},
              special: []
            }
          }
        };
      }
      
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
      const equippedItemsWithBonuses = ensureEquipmentHasCalculatedBonuses(action.payload);
      console.log('–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏:', equippedItemsWithBonuses);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –≤ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
      let equipmentBonuses;
      const hasPreCalculatedBonuses = Object.values(equippedItemsWithBonuses).some(
        item => item && item.calculatedBonuses
      );
      
      if (hasPreCalculatedBonuses) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
        equipmentBonuses = {
          stats: { strength: 0, dexterity: 0, vitality: 0, intelligence: 0, perception: 0, luck: 0 },
          combat: { physicalDamage: 0, magicDamage: 0, physicalDefense: 0, magicDefense: 0, critChance: 0, critDamage: 0, dodgeChance: 0 },
          cultivation: { energyMax: 0, energyRegen: 0, comprehensionRate: 0, breakthroughChance: 0 },
          elemental: { fire: 0, water: 0, earth: 0, air: 0, light: 0, dark: 0 },
          special: []
        };
        
        // –°—É–º–º–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã –∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        Object.values(action.payload).forEach(item => {
          if (!item || !item.calculatedBonuses) return;
          
          const bonuses = item.calculatedBonuses;
          
          // –°—É–º–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã
          if (bonuses.stats) {
            Object.entries(bonuses.stats).forEach(([stat, value]) => {
              if (equipmentBonuses.stats[stat] !== undefined) {
                equipmentBonuses.stats[stat] += value;
              }
            });
          }
          
          // –°—É–º–º–∏—Ä—É–µ–º –±–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
          if (bonuses.combat) {
            Object.entries(bonuses.combat).forEach(([stat, value]) => {
              if (equipmentBonuses.combat[stat] !== undefined) {
                equipmentBonuses.combat[stat] += value;
              }
            });
          }
          
          // –°—É–º–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
          if (bonuses.cultivation) {
            Object.entries(bonuses.cultivation).forEach(([stat, value]) => {
              if (equipmentBonuses.cultivation[stat] !== undefined) {
                equipmentBonuses.cultivation[stat] += value;
              }
            });
          }
          
          // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∏—Ö–∏–π–Ω—ã–µ –±–æ–Ω—É—Å—ã
          if (bonuses.elemental) {
            Object.entries(bonuses.elemental).forEach(([element, value]) => {
              if (equipmentBonuses.elemental[element] !== undefined) {
                equipmentBonuses.elemental[element] += value;
              }
            });
          }
          
          // –°–æ–±–∏—Ä–∞–µ–º –æ—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
          if (bonuses.special && Array.isArray(bonuses.special)) {
            equipmentBonuses.special = [
              ...equipmentBonuses.special,
              ...bonuses.special
            ];
          }
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º BonusService
        console.log('‚ö†Ô∏è –ü—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º BonusService');
        // –≠–¢–û–¢ –í–´–ó–û–í –ë–û–õ–¨–®–ï –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –ù–ê–ü–†–Ø–ú–£–Æ –ó–î–ï–°–¨
        // TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –≤ action creator (thunk),
        // –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å BonusServiceAPI.calculateAllBonuses
        // –∏ –¥–∏—Å–ø–∞—Ç—á–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
        // –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏.
        console.warn('–¢–†–ï–ë–£–ï–¢–°–Ø –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ action creator.');
        equipmentBonuses = {}; // –ó–∞–≥–ª—É—à–∫–∞
      }
      
      console.log('–ò—Ç–æ–≥–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', equipmentBonuses);
      
      // –í–ê–ñ–ù–û: –ù–ï –∏–∑–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
      // –ë–æ–Ω—É—Å—ã –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ –≤—Ç–æ—Ä–∏—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—Ç–æ—Ä–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const baseSecondaryStats = CharacterStatsServiceAPI.calculateSecondaryStats(
        state.player.stats,
        state.player.cultivation
      );
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –∫ –≤—Ç–æ—Ä–∏—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
      const secondaryWithBonuses = {
        ...baseSecondaryStats,
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–µ–≤—ã–µ –±–æ–Ω—É—Å—ã
        physicalAttack: (baseSecondaryStats.physicalAttack || 0) + (equipmentBonuses.combat.physicalDamage || 0),
        magicalAttack: (baseSecondaryStats.magicalAttack || 0) + (equipmentBonuses.combat.magicDamage || 0),
        physicalDefense: (baseSecondaryStats.physicalDefense || 0) + (equipmentBonuses.combat.physicalDefense || 0),
        magicDefense: (baseSecondaryStats.magicDefense || 0) + (equipmentBonuses.combat.magicDefense || 0),
        critChance: (baseSecondaryStats.critChance || 0) + (equipmentBonuses.combat.critChance || 0),
        critDamage: (baseSecondaryStats.critDamage || 0) + (equipmentBonuses.combat.critDamage || 0),
        evasion: (baseSecondaryStats.evasion || 0) + (equipmentBonuses.combat.dodgeChance || 0)
      };
      
      console.log('–í—Ç–æ—Ä–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:', secondaryWithBonuses);
      
      return {
        ...state,
        player: {
          ...state.player,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          // stats: state.player.stats, 
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—Ç–æ—Ä–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏
          secondaryStats: secondaryWithBonuses,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
          equipmentBonuses: equipmentBonuses
        }
      };
      
    case ACTION_TYPES.LEARN_TECHNIQUE:
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É –∏–∑ payload
      const technique = action.payload;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö
      const existingTechnique = state.player.techniques.find(t => t.id === technique.id);
      
      if (existingTechnique) {
        // –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞ —É–∂–µ –∏–∑—É—á–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return state;
      }
      
      // –í—ã—á–∏—Ç–∞–µ–º –æ–ø—ã—Ç –∏ –≤–∞–ª—é—Ç—É
      const learnCost = technique.upgradeCost ? technique.upgradeCost(1) : { experience: 50, currency: 20 };
      const currentExperience = state.player.cultivation.experience || 0;
      const newExperience = Math.max(0, currentExperience - learnCost.experience);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
      const currentCurrency = state.player.inventory.currency || {};
      let learnCurrencyUpdate = { ...currentCurrency };
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–∞–ª—é—Ç
      if (typeof learnCost.currency === 'object') {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –≤–∞–ª—é—Ç
        Object.entries(learnCost.currency).forEach(([type, amount]) => {
          learnCurrencyUpdate[type] = (learnCurrencyUpdate[type] || 0) - amount;
        });
      } else {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∑–æ–ª–æ—Ç–æ
        learnCurrencyUpdate.gold = (learnCurrencyUpdate.gold || 0) - learnCost.currency;
      }
      
      // –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      console.log("–ò–∑—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:", technique);
      return {
        ...state,
        player: {
          ...state.player,
          techniques: [
            ...state.player.techniques,
            {
              id: technique.id,
              name: technique.name,
              description: technique.description,
              type: technique.type,
              icon: technique.icon,
              damage: technique.damage,
              damageType: technique.damageType,
              energyCost: technique.energyCost,
              cooldown: technique.cooldown,
              effects: technique.effects,
              level: 1,
              experience: 0,
              maxLevel: technique.maxLevel,
              requiredLevel: technique.requiredLevel,
              learnedAt: new Date().toISOString()
            }
          ],
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
          cultivation: {
            ...state.player.cultivation,
            experience: newExperience
          },
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
          inventory: {
            ...state.player.inventory,
            currency: learnCurrencyUpdate
          }
        }
      };
      
    case ACTION_TYPES.UPGRADE_TECHNIQUE:
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
      const { techniqueId, cost } = action.payload;
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Ö–Ω–∏–∫—É –≤ —Å–ø–∏—Å–∫–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö
      const techniqueToUpgrade = state.player.techniques.find(t => t.id === techniqueId);
      
      // –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (!techniqueToUpgrade) {
        console.error(`–¢–µ—Ö–Ω–∏–∫–∞ —Å ID ${techniqueId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞`);
        return state;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
      const currentExp = state.player.cultivation.experience || 0;
      const updatedExperience = Math.max(0, currentExp - cost.experience);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
      const currentCurr = state.player.inventory.currency || {};
      let upgradeCurrencyUpdate = { ...currentCurr };
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–∞–ª—é—Ç
      if (typeof cost.currency === 'object') {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –≤–∞–ª—é—Ç
        Object.entries(cost.currency).forEach(([type, amount]) => {
          upgradeCurrencyUpdate[type] = (upgradeCurrencyUpdate[type] || 0) - amount;
        });
      } else {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∑–æ–ª–æ—Ç–æ
        upgradeCurrencyUpdate.gold = (upgradeCurrencyUpdate.gold || 0) - cost.currency;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
      const { getTechniqueById } = require('../../data/techniques');
      
      // –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ö–Ω–∏–∫–µ
      const baseTechnique = getTechniqueById(techniqueId);
      console.log("–ë–∞–∑–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞:", baseTechnique);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –≤—Å–µ –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const updatedTechniques = state.player.techniques.map(t => {
        if (t.id === techniqueId) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —É—Ä–æ–≤–Ω—è
          const newLevel = t.level + 1;
          const levelMultiplier = 1 + (newLevel - 1) * 0.2; // +20% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–Ω –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Ä–æ–≤–Ω–µ–º
          const updatedTechnique = {
            ...t,
            level: newLevel,
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            damage: t.damage ? Math.floor(t.damage * levelMultiplier) : t.damage,
            healing: t.healing ? Math.floor(t.healing * levelMultiplier) : t.healing,
            energyCost: t.energyCost ? Math.floor(t.energyCost * (1 + (newLevel - 1) * 0.1)) : t.energyCost,
          };
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          if (t.effects && Array.isArray(t.effects)) {
            updatedTechnique.effects = t.effects.map(effect => {
              const updatedEffect = { ...effect };
              
              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
              if (updatedEffect.damage) {
                updatedEffect.damage = Math.floor(updatedEffect.damage * levelMultiplier);
              }
              
              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏—Å—Ü–µ–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
              if (updatedEffect.healing) {
                updatedEffect.healing = Math.floor(updatedEffect.healing * levelMultiplier);
              }
              
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —É—Ä–æ–≤–Ω—è
              
              return updatedEffect;
            });
          }
          
          console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞:", updatedTechnique);
          return updatedTechnique;
        }
        return t;
      });
      
      return {
        ...state,
        player: {
          ...state.player,
          techniques: updatedTechniques,
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
          cultivation: {
            ...state.player.cultivation,
            experience: updatedExperience
          },
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
          inventory: {
            ...state.player.inventory,
            currency: upgradeCurrencyUpdate
          }
        }
      };
    
    case ACTION_TYPES.UPDATE_RELATIONSHIP:
      const character = action.payload;
      
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ SocialTab.js)
      const defaultRelationships = [
        { id: 'master_li', name: '–ú–∞—Å—Ç–µ—Ä –õ–∏', role: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫', level: 80, events: [], image: '/assets/images/npc/master_li.png' },
        { id: 'merchant_chen', name: '–¢–æ—Ä–≥–æ–≤–µ—Ü –ß–µ–Ω', role: '–¢–æ—Ä–≥–æ–≤–µ—Ü', level: 40, events: [], image: '/assets/images/npc/merchant_chen.png' },
        { id: 'lady_yun', name: '–ì–æ—Å–ø–æ–∂–∞ –Æ–Ω—å', role: '–¢–æ—Ä–≥–æ–≤–µ—Ü', level: 40, events: [], image: '/assets/images/npc/lady_yun.png' },
        { id: 'elder_zhang', name: '–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞ –ß–∂–∞–Ω', role: '–¢–æ—Ä–≥–æ–≤–µ—Ü', level: 60, events: [], image: '/assets/images/npc/elder_zhang.png' },
        { id: 'merchant_zhao', name: '–¢–æ—Ä–≥–æ–≤–µ—Ü –ß–∂–∞–æ', role: '–¢–æ—Ä–≥–æ–≤–µ—Ü', level: 30, events: [], image: '/assets/images/npc/merchant_zhao.png' },
        { id: 'village_chief_wang', name: '–°—Ç–∞—Ä–æ—Å—Ç–∞ –¥–µ—Ä–µ–≤–Ω–∏ –í–∞–Ω–≥', role: '–õ–∏–¥–µ—Ä –æ–±—â–∏–Ω—ã', level: 50, events: [], image: '/assets/images/npc/village_chief_wang.png' },
        { id: 'hermit_feng', name: '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –æ—Ç—à–µ–ª—å–Ω–∏–∫ –§—ç–Ω', role: '–û—Ç—à–µ–ª—å–Ω–∏–∫', level: 20, events: [], image: '/assets/images/npc/hermit_feng.png' }
      ];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ relationships –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤
      let relationships = state.player.relationships || [...defaultRelationships];
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
      if (!Array.isArray(relationships)) {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å ID—à–Ω–∏–∫–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤
        relationships = Object.values(relationships);
      }
      
      // –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID
      const existingCharIndex = relationships.findIndex(rel => rel.id === character.id);
      
      let updatedRelationships;
      if (existingCharIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        updatedRelationships = [...relationships];
        updatedRelationships[existingCharIndex] = character;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
        updatedRelationships = [...relationships, character];
      }
      
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å ${character.name} –¥–æ —É—Ä–æ–≤–Ω—è ${character.level}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º relationships –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:
      // 1. –í player.relationships (–æ—Ç–∫—É–¥–∞ –∏—Ö —Å—á–∏—Ç—ã–≤–∞–µ—Ç SocialTab.js)
      // 2. –í player.social.relationships (—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ initialState.js)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ social –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const social = state.player.social || {};
      
      return {
        ...state,
        player: {
          ...state.player,
          relationships: updatedRelationships,
          social: {
            ...social,
            relationships: updatedRelationships
          }
        }
      };
    
    case 'UPDATE_SOCIAL_FRIENDS':
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:', action.payload);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
      if (!Array.isArray(action.payload)) {
        console.error('–û—à–∏–±–∫–∞: payload –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', action.payload);
        return state;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ social –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const socialObj = state.player.social || {};
      
      return {
        ...state,
        player: {
          ...state.player,
          social: {
            ...socialObj,
            friends: action.payload
          }
        }
      };
    
    case ACTION_TYPES.REPAIR_TECHNIQUES:
      console.log('üîß –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –º–∞—Å—Å–∏–≤ —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      if (!Array.isArray(state.player.techniques) || state.player.techniques.length === 0) {
        console.log('üîß –ù–µ—Ç —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        return state;
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–∏–∫–∏, –±–µ—Ä—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤ techniques.js
      try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫
        const { techniques } = require('../../data/techniques');
        
        // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const repairedTechniques = state.player.techniques.map(playerTechnique => {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          const level = playerTechnique.level || 1;
          const experience = playerTechnique.experience || 0;
          const masteryLevel = playerTechnique.masteryLevel || 0;
          const lastUsed = playerTechnique.lastUsed || null;
          const id = playerTechnique.id;
          
          // –ò—â–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
          const baseTechnique = techniques.find(t => t.id === id);
          
          if (!baseTechnique) {
            console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ —Å ID: ${id}`);
            return playerTechnique; // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
          }
          
          // –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
          const levelMultiplier = 1 + (level - 1) * 0.2;
          
          // –°–æ–∑–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          const repairedTechnique = {
            ...baseTechnique,
            id,
            level,
            experience,
            masteryLevel,
            lastUsed,
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Ä–æ–≤–Ω–µ–º
            damage: Math.floor((baseTechnique.damage || 0) * levelMultiplier),
            healing: Math.floor((baseTechnique.healing || 0) * levelMultiplier),
            energyCost: Math.floor((baseTechnique.energyCost || 10) * (1 + (level - 1) * 0.1))
          };
          
          console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞ ${repairedTechnique.name} (ID: ${id}, –£—Ä–æ–Ω: ${repairedTechnique.damage})`);
          return repairedTechnique;
        });
        
        console.log(`üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${repairedTechniques.length} —Ç–µ—Ö–Ω–∏–∫`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage –≤–º–µ—Å—Ç–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
          const updatedState = {
            ...state,
            player: {
              ...state.player,
              techniques: repairedTechniques
            }
          };
          
          if (typeof localStorage !== 'undefined') {
            localStorage.setItem('gameState', JSON.stringify(updatedState));
            console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
          }
        } catch (saveError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', saveError);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return {
          ...state,
          player: {
            ...state.player,
            techniques: repairedTechniques
          }
        };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫:', error);
        return state; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    
    case ACTION_TYPES.UPDATE_COMBAT_STATE: {
      return {
        ...state,
        combat: {
          ...state.combat,
          ...action.payload
        }
      };
    }
    
    case ACTION_TYPES.USE_TECHNIQUE: {
      const { techniqueId } = action.payload;
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å ID: ${techniqueId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Ö–Ω–∏–∫—É –≤ —Å–ø–∏—Å–∫–µ
      const techniqueIndex = state.player.techniques.findIndex(t => t.id === techniqueId);
      
      if (techniqueIndex === -1) {
        console.error(`‚ùå –¢–µ—Ö–Ω–∏–∫–∞ —Å ID ${techniqueId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return state;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –æ–ø—ã—Ç —Ç–µ—Ö–Ω–∏–∫–∏
      const updatedTechniques = [...state.player.techniques];
      const technique = updatedTechniques[techniqueIndex];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º lastUsed –∏ experience
      updatedTechniques[techniqueIndex] = {
        ...technique,
        lastUsed: new Date().toISOString(),
        experience: (technique.experience || 0) + 1
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ø–æ—Ä–æ–≥ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
      const masteryThreshold = 100 * ((technique.masteryLevel || 0) + 1);
      if ((updatedTechniques[techniqueIndex].experience || 0) >= masteryThreshold) {
        updatedTechniques[techniqueIndex].masteryLevel = (updatedTechniques[techniqueIndex].masteryLevel || 0) + 1;
        updatedTechniques[techniqueIndex].experience -= masteryThreshold;
        
        console.log(`üåü –ü–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ç–µ—Ö–Ω–∏–∫–∏ ${technique.name} –¥–æ ${updatedTechniques[techniqueIndex].masteryLevel}`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
      const newState = {
        ...state,
        player: {
          ...state.player,
          techniques: updatedTechniques
        }
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        localStorage.setItem('gameState', JSON.stringify(newState));
        console.log('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏:', error);
      }
      
      return newState;
    }
    
    case ACTION_TYPES.ADD_COMBAT_HISTORY: {
      console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤:', action.payload);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!action.payload || typeof action.payload !== 'object') {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤:', action.payload);
        return state;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
      const currentHistory = Array.isArray(state.player.combatHistory) 
        ? state.player.combatHistory 
        : [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ (—á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–æ–∏ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É)
      const updatedHistory = [
        {
          ...action.payload,
          timestamp: action.payload.timestamp || Date.now() // –î–æ–±–∞–≤–ª—è–µ–º timestamp, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        },
        ...currentHistory
      ];
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 50 –∑–∞–ø–∏—Å–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const limitedHistory = updatedHistory.slice(0, 50);
      
      console.log(`üìä –ò—Å—Ç–æ—Ä–∏—è –±–æ–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${limitedHistory.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤
      try {
        const newState = {
          ...state,
          player: {
            ...state.player,
            combatHistory: limitedHistory
          }
        };
        
        localStorage.setItem('gameState', JSON.stringify(newState));
        console.log('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–µ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        
        return newState;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–µ–≤:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        return {
          ...state,
          player: {
            ...state.player,
            combatHistory: limitedHistory
          }
        };
      }
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ç—ã —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
    case ACTION_TYPES.SYNC_SECT_TO_SOCIAL: {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ç—ã —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏');
      
      if (!state.sect || !state.sect.sect) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–∫—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ');
        return state;
      }

      // –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—å —Å–µ–∫—Ç—ã, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —á–ª–µ–Ω–∞–º–∏ —Å–µ–∫—Ç—ã
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const updatedRelationships = syncSectRelationshipToSocial(
        state.player.relationships || [],
        state.sect.sect,
        sectLoyalty
      );
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ç—ã (${sectLoyalty})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º social –∏ relationships
      const updatedSocial = state.player.social || {};
      
      return {
        ...state,
        player: {
          ...state.player,
          relationships: updatedRelationships,
          social: {
            ...updatedSocial,
            relationships: updatedRelationships
          }
        }
      };
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é —Å–µ–∫—Ç—ã
    case ACTION_TYPES.SYNC_SOCIAL_TO_SECT: {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é —Å–µ–∫—Ç—ã');
      
      if (!state.player.relationships && (!state.player.social || !state.player.social.relationships)) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return state;
      }
      
      const socialRelationshipsForSectSync = state.player.relationships ||
                          (state.player.social && state.player.social.relationships) ||
                          [];
      
      const newLoyalty = syncSocialToSectRelationship(socialRelationshipsForSectSync, state.sect && state.sect.sect);
      
      if (newLoyalty === null || newLoyalty === undefined) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ç—ã');
        return state;
      }
      
      console.log(`‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å —Å–µ–∫—Ç—ã (${newLoyalty}) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π`);
      
      return {
        ...state,
        calculatedSectLoyalty: newLoyalty
      };
    }
    case ACTION_TYPES.UPDATE_RELATIONSHIP: {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è:', action.payload);
      if (!action.payload || !action.payload.id) {
        return state;
      }
      
      const newRelationships = state.player.social.relationships.map(rel => {
        if (rel.id === action.payload.id) {
          return { ...rel, ...action.payload };
        }
        return rel;
      });

      return {
        ...state,
        player: {
          ...state.player,
          social: {
            ...state.player.social,
            relationships: newRelationships,
          },
        },
      };
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sectRelationshipSyncer.js)
    case ACTION_TYPES.UPDATE_SOCIAL_RELATIONSHIPS: {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π');
      
      if (!action.payload || !Array.isArray(action.payload)) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö');
        return state;
      }
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (${action.payload.length} –∑–∞–ø–∏—Å–µ–π)`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º social –∏ relationships
      return {
        ...state,
        player: {
          ...state.player,
          relationships: action.payload,
          social: {
            ...(state.player.social || {}),
            relationships: action.payload
          }
        }
      };
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    case ACTION_TYPES.UPDATE_RELATIONSHIP_AND_LOYALTY: {
      console.log('üîÑ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
      
      if (!action.payload || !action.payload.name || action.payload.value === undefined) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', action.payload);
        return state;
      }
      
      const { name, value } = action.payload;
      console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å "${name}" –¥–æ —É—Ä–æ–≤–Ω—è ${value}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      const updatedState = updateRelationshipAndLoyalty(state, name, value);
      
      return updatedState;
    }
      
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
    case ACTION_TYPES.ENRICH_ITEM_REQUEST:
      console.log(`[ENRICH] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: ${action.payload.itemId}`);
      return state; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    
    case ACTION_TYPES.ENRICH_ITEM_SUCCESS:
      console.log(`[ENRICH] ========== –ù–ê–ß–ê–õ–û –û–ë–û–ì–ê–©–ï–ù–ò–Ø –ü–†–ï–î–ú–ï–¢–ê –í REDUX: ${action.payload.itemId} ==========`);
      console.log(`[ENRICH] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è:`, JSON.stringify(action.payload, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ enriched
      if (action.payload.updateFlagOnly === true) {
        console.log(`[ENRICH] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥–∞ enriched –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${action.payload.itemId}`);
        
        // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        let itemToUpdateIndex = state.player.inventory.items.findIndex(
          item => item.id === action.payload.itemId || String(item.id) === String(action.payload.itemId)
        );
        
        if (itemToUpdateIndex === -1) {
          console.warn(`[ENRICH] ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç ${action.payload.itemId} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return state;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const updatedItems = [...state.player.inventory.items];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ enriched
        updatedItems[itemToUpdateIndex] = {
          ...updatedItems[itemToUpdateIndex],
          enriched: true
        };
        
        console.log(`[ENRICH] ‚úÖ –§–ª–∞–≥ enriched –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${action.payload.itemId}`);
        
        return {
          ...state,
          player: {
            ...state.player,
            inventory: {
              ...state.player.inventory,
              items: updatedItems
            }
          }
        };
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞, –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö —Å—Ä–∞–∑—É
      if (action.payload.fromCache === true && action.payload.itemDetails) {
        console.log(`[ENRICH] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${action.payload.itemId}`);
        
        // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        let itemToUpdateIndex = state.player.inventory.items.findIndex(
          item => item.id === action.payload.itemId || String(item.id) === String(action.payload.itemId)
        );
        
        if (itemToUpdateIndex === -1) {
          console.warn(`[ENRICH] ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç ${action.payload.itemId} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return state;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        const currentItem = state.player.inventory.items[itemToUpdateIndex];
        const cachedItem = action.payload.itemDetails;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const updatedItems = [...state.player.inventory.items];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        updatedItems[itemToUpdateIndex] = {
          ...currentItem,
          ...cachedItem,
          enriched: true
        };
        
        console.log(`[ENRICH] ‚úÖ –ü—Ä–µ–¥–º–µ—Ç ${action.payload.itemId} –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫–µ—à–∞`);
        
        return {
          ...state,
          player: {
            ...state.player,
            inventory: {
              ...state.player.inventory,
              items: updatedItems
            }
          }
        };
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`[ENRICH] –¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:`);
      state.player.inventory.items.forEach((item, index) => {
        console.log(`[ENRICH] ${index}: ${item.name} (ID: ${item.id || '–Ω–µ—Ç ID'}, —Ç–∏–ø: ${item.type || '–Ω–µ—Ç —Ç–∏–ø–∞'})`);
      });
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
      let itemToEnrichIndex = -1;
      
      // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ id
      itemToEnrichIndex = state.player.inventory.items.findIndex(
        item => item.id === action.payload.itemId
      );
      
      console.log(`[ENRICH] –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ id '${action.payload.itemId}'. –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å: ${itemToEnrichIndex}`);
      
      // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é
      if (itemToEnrichIndex === -1) {
        const searchId = String(action.payload.itemId);
        itemToEnrichIndex = state.player.inventory.items.findIndex(
          item => String(item.id) === searchId
        );
        if (itemToEnrichIndex !== -1) {
          console.log(`[ENRICH] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID: ${searchId}`);
        }
      }
      
      // 3. –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
      if (itemToEnrichIndex === -1 && action.payload.itemDetails && action.payload.itemDetails.name) {
        const searchName = action.payload.itemDetails.name;
        itemToEnrichIndex = state.player.inventory.items.findIndex(
          item => item.name === searchName
        );
        if (itemToEnrichIndex !== -1) {
          console.log(`[ENRICH] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: ${searchName}`);
        }
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –ø–æ –∫–æ–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ id=bronze_sword)
      if (itemToEnrichIndex === -1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç —Å id, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
        // —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–æ–¥—É, —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å itemId
        const itemsWithMatchingIds = state.player.inventory.items
          .map((item, idx) => ({ item, idx }))
          .filter(({ item }) => item.id && typeof item.id === 'string');
        
        console.log(`[ENRICH] –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É:`,
          itemsWithMatchingIds.map(({ item, idx }) => `${idx}: ${item.id} - ${item.name}`));
        
        // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const similarItems = itemsWithMatchingIds.filter(({ item }) =>
          item.id.includes(String(action.payload.itemId)) ||
          String(action.payload.itemId).includes(item.id));
        
        if (similarItems.length > 0) {
          console.log(`[ENRICH] –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:`,
            similarItems.map(({ item, idx }) => `${idx}: ${item.id} - ${item.name}`));
          
          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Ö–æ–∂–∏–π –ø—Ä–µ–¥–º–µ—Ç
          itemToEnrichIndex = similarItems[0].idx;
          console.log(`[ENRICH] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ö–æ–∂–∏–π –ø—Ä–µ–¥–º–µ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º ${itemToEnrichIndex}`);
        }
      }
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      if (itemToEnrichIndex === -1) {
        console.warn(`[ENRICH] ‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${action.payload.itemId}`);
        console.warn(`[ENRICH] –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:`, JSON.stringify(action.payload.itemDetails, null, 2));
        return state;
      }
      
      console.log(`[ENRICH] ‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${itemToEnrichIndex}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –æ–±–æ–≥–∞—â–µ–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const currentItem = state.player.inventory.items[itemToEnrichIndex];
      
      if (currentItem.enriched === true) {
        console.log(`[ENRICH] ‚ÑπÔ∏è –ü—Ä–µ–¥–º–µ—Ç ${action.payload.itemId} —É–∂–µ –æ–±–æ–≥–∞—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return state;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
      const enrichData = action.payload.itemDetails;
      
      if (!enrichData) {
        console.warn(`[ENRICH] ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${action.payload.itemId}`);
        return state;
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log(`[ENRICH] –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:`, JSON.stringify(
        Object.keys(currentItem).sort().reduce((obj, key) => {
          obj[key] = Array.isArray(currentItem[key]) ?
            `Array(${currentItem[key].length})` :
            (typeof currentItem[key] === 'object' ? '{Object}' : currentItem[key]);
          return obj;
        }, {})
      , null, 2));
      
      console.log(`[ENRICH] –¢–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç:`, JSON.stringify(currentItem, null, 2));
      console.log(`[ENRICH] –î–∞–Ω–Ω—ã–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è:`, JSON.stringify(enrichData, null, 2));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
      const enrichedItems = [...state.player.inventory.items];
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
      const enrichedItem = { ...currentItem };
      
      // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      if (enrichData.name) enrichedItem.name = enrichData.name;
      if (enrichData.description) enrichedItem.description = enrichData.description;
      if (enrichData.type) enrichedItem.type = enrichData.type;
      if (enrichData.rarity) enrichedItem.rarity = enrichData.rarity;
      if (enrichData.icon) enrichedItem.icon = enrichData.icon;
      
      // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
      if (enrichData.base_price !== undefined) enrichedItem.basePrice = enrichData.base_price;
      if (enrichData.armor_type) enrichedItem.armorType = enrichData.armor_type;
      if (enrichData.set_id) enrichedItem.setId = enrichData.set_id;
      
      // –ú–∞—Å—Å–∏–≤—ã –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—É—Å—Ç—ã
      if (enrichData.effects && Array.isArray(enrichData.effects) && enrichData.effects.length > 0) {
        enrichedItem.effects = enrichData.effects;
        console.log(`[ENRICH] –î–æ–±–∞–≤–ª–µ–Ω–æ ${enrichData.effects.length} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤`);
      } else {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ effects, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ —Ä–∞–Ω—å—à–µ (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è)
        delete enrichedItem.effects;
        console.log(`[ENRICH] –≠—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–ª–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ`);
      }
      
      if (enrichData.requirements && Array.isArray(enrichData.requirements) && enrichData.requirements.length > 0) {
        enrichedItem.requirements = enrichData.requirements;
        console.log(`[ENRICH] –î–æ–±–∞–≤–ª–µ–Ω–æ ${enrichData.requirements.length} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`);
      } else {
        delete enrichedItem.requirements;
        console.log(`[ENRICH] –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–ª–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ`);
      }
      
      if (enrichData.specialEffects && Array.isArray(enrichData.specialEffects) && enrichData.specialEffects.length > 0) {
        enrichedItem.specialEffects = enrichData.specialEffects;
        console.log(`[ENRICH] –î–æ–±–∞–≤–ª–µ–Ω–æ ${enrichData.specialEffects.length} —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤`);
      } else {
        delete enrichedItem.specialEffects;
        console.log(`[ENRICH] –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–ª–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ`);
      }
      
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
      enrichedItem.enriched = true;
      enrichedItem.enrichedAt = Date.now();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log(`[ENRICH] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:`, JSON.stringify(
        Object.keys(enrichedItem).sort().reduce((obj, key) => {
          obj[key] = Array.isArray(enrichedItem[key]) ?
            `Array(${enrichedItem[key].length})` :
            (typeof enrichedItem[key] === 'object' ? '{Object}' : enrichedItem[key]);
          return obj;
        }, {})
      , null, 2));
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
      enrichedItems[itemToEnrichIndex] = enrichedItem;
      
      console.log(`[ENRICH] ‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω:`, JSON.stringify({
        id: enrichedItems[itemToEnrichIndex].id,
        name: enrichedItems[itemToEnrichIndex].name,
        type: enrichedItems[itemToEnrichIndex].type,
        effects: enrichedItems[itemToEnrichIndex].effects?.length || 0,
        enriched: enrichedItems[itemToEnrichIndex].enriched
      }, null, 2));
      
      const updatedState = {
        ...state,
        player: {
          ...state.player,
          inventory: {
            ...state.player.inventory,
            items: enrichedItems
          }
        }
      };
      
      console.log(`[ENRICH] ========== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–û–ì–ê–©–ï–ù–ò–Ø –ü–†–ï–î–ú–ï–¢–ê ${action.payload.itemId} (${enrichedItems[itemToEnrichIndex].id}) ==========`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ localStorage –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        const cacheKey = `enriched_${action.payload.itemId}`;
        localStorage.setItem(cacheKey, JSON.stringify(enrichedItems[itemToEnrichIndex]));
        console.log(`[ENRICH] üíæ –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage: ${cacheKey}`);
      } catch (error) {
        console.error(`[ENRICH] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:`, error);
      }
      
      return updatedState;
    
    case ACTION_TYPES.ENRICH_ITEM_FAILURE:
      console.warn(`[ENRICH] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: ${action.payload.itemId}`, action.payload.error);
      console.warn(`[ENRICH] –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:`, new Error().stack);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Ç–∞–∫–∏–º ID
      console.log(`[ENRICH] –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ID '${action.payload.itemId}' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...`);
      const matchingItems = state.player.inventory.items
        .filter(item => item.id && (
          item.id === action.payload.itemId ||
          String(item.id).includes(String(action.payload.itemId)) ||
          String(action.payload.itemId).includes(String(item.id))
        ))
        .map(item => ({ id: item.id, name: item.name }));
      
      if (matchingItems.length > 0) {
        console.log(`[ENRICH] –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:`, matchingItems);
      } else {
        console.log(`[ENRICH] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º ID`);
      }
      
      return state; // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –ø—Ä–µ–¥–º–µ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      
    case ACTION_TYPES.UPDATE_CHARACTER_STATS:
      console.log('[PlayerReducer] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', action.payload);
      return {
        ...state,
        player: {
          ...state.player,
          characterStats: action.payload
        }
      };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    case ACTION_TYPES.UPLOAD_AVATAR_REQUEST:
      console.log('[PlayerReducer] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
      return {
        ...state,
        player: {
          ...state.player,
          avatarUploading: true,
          avatarError: null
        }
      };

    case ACTION_TYPES.UPLOAD_AVATAR_SUCCESS:
      console.log('[PlayerReducer] –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', action.payload);
      return {
        ...state,
        player: {
          ...state.player,
          avatar: action.payload,
          avatarUploading: false,
          avatarError: null
        }
      };

    case ACTION_TYPES.UPLOAD_AVATAR_FAILURE:
      console.log('[PlayerReducer] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', action.payload);
      return {
        ...state,
        player: {
          ...state.player,
          avatarUploading: false,
          avatarError: action.payload
        }
      };

    case ACTION_TYPES.SET_AVATAR:
      console.log('[PlayerReducer] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏:', action.payload);
      return {
        ...state,
        player: {
          ...state.player,
          avatar: action.payload
        }
      };

    case ACTION_TYPES.CLEAR_AVATAR:
      console.log('[PlayerReducer] –û—á–∏—Å—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏');
      return {
        ...state,
        player: {
          ...state.player,
          avatar: null,
          avatarError: null
        }
      };
      
    default:
      return state;
  }
};
