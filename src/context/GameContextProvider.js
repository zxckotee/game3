import React, { createContext, useContext, useReducer, useEffect, useRef } from 'react';
import apiService from '../services/api';
import SectService from '../services/sect-api';
import InventoryServiceAPI from '../services/inventory-api';
import CharacterProfileServiceAPI from '../services/character-profile-service-api';
import CharacterStatsServiceAPI from '../services/character-stats-api';
import InventoryService from '../services/inventory-adapter';
import initialState from './state/initialState';
import { rootReducer } from './reducers/rootReducer';
import ACTION_TYPES from './actions/actionTypes';
import relationshipsMiddleware from './middleware/relationshipsMiddleware';
import { checkAndNormalizeSectData } from '../utils/sectUtils';
import { normalizePlayerEffects } from '../utils/effectsNormalizer';
// import itemService from '../services/item-service'; // –£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
// console.log('[GameContext] –ò–º–ø–æ—Ä—Ç itemService:', !!itemService); // –£–¥–∞–ª–µ–Ω–æ
// console.log('[GameContext] –ú–µ—Ç–æ–¥—ã itemService:', itemService ? Object.keys(itemService) : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'); // –£–¥–∞–ª–µ–Ω–æ
import { initRelationshipSync } from '../utils/sectRelationshipSyncer';

// –û—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏ —Ñ–ª–∞–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è - –£–¥–∞–ª–µ–Ω–æ
// let itemEnrichmentQueue = [];
// let isEnrichmentScheduled = false;

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
export const GameContext = createContext();

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useGameContext = () => useContext(GameContext);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SectService –∏–∑ –∞–¥–∞–ø—Ç–µ—Ä–∞
// –û–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
const sectService = SectService;

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const GameContextProvider = ({ children }) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useReducer —Å –∫–æ—Ä–Ω–µ–≤—ã–º —Ä–µ–¥—É–∫—Ç–æ—Ä–æ–º –∏ –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const [state, dispatchBase] = useReducer(rootReducer, initialState);
  const stateRef = useRef(state);
  useEffect(() => {
    stateRef.current = state;
  }, [state]);
  
  
  // –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      window.__GAME_STATE__ = state;
      // –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç actions
      if (!window.__GAME_CONTEXT__) {
        window.__GAME_CONTEXT__ = { state, actions: {} };
      } else {
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.__GAME_CONTEXT__.state = state;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç –Ω–∞ body –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ DOM
      try {
        // –í–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ DOM (—á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ),
        // —Å–æ–∑–¥–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        document.body.setAttribute('data-gamestate-available', 'true');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if (state.player) {
          document.body.setAttribute('data-player-health', 
            `${state.player.stats?.health || 0}/${state.player.stats?.maxHealth || 100}`);
          document.body.setAttribute('data-player-level', 
            state.player.cultivation?.level || 1);
        }
      } catch (error) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ DOM-–æ–ø–µ—Ä–∞—Ü–∏–π
        console.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å DOM-–∞—Ç—Ä–∏–±—É—Ç—ã:', error);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      try {
        const stateUpdateEvent = new CustomEvent('game-state-updated', { 
          detail: { timestamp: Date.now() } 
        });
        window.dispatchEvent(stateUpdateEvent);
      } catch (error) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–±—ã—Ç–∏–π
        console.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      }
    }
  }, [state]); // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û (middleware) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const middlewareEnhancer = next => action => {
    // ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π state –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ middleware
    const middlewareAPI = {
      getState: () => stateRef.current, // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π state, –∞ –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π processedState
      dispatch: dispatchBase
    };
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É middleware
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É middleware
    // –í –∫–æ–Ω—Ü–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const relationshipsResult = relationshipsMiddleware(middlewareAPI)(next)(action);
    
    return relationshipsResult;
  };
  
  // –°–æ–∑–¥–∞–µ–º dispatch —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º middleware
  const dispatch = action => {
    return middlewareEnhancer(dispatchBase)(action);
  };
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initializeGame = async () => {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ localStorage, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã
        // –¢–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ GamePage –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        dispatch({
          type: ACTION_TYPES.SET_INITIALIZED,
          payload: true
        });
        
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage)');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
        dispatch({
          type: ACTION_TYPES.SET_ERROR,
          payload: error.message
        });
      }
    };
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initializeGame();
  }, []);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
    if (state.isInitialized && Array.isArray(state.player?.techniques) && state.player.techniques.length > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      const timer = setTimeout(() => {
        console.log('üõ†Ô∏è –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
        try {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫
          dispatch({
            type: ACTION_TYPES.REPAIR_TECHNIQUES
          });
          console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫:', error);
        }
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [state.isInitialized, state.player?.techniques]);
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã
  const normalizeSectDataAction = () => {
    console.log('üßπ –ó–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–µ–¥—É–∫—Ç–æ—Ä
    dispatch({ type: ACTION_TYPES.NORMALIZE_SECT_DATA });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    dispatch({ 
      type: ACTION_TYPES.ADD_NOTIFICATION, 
      payload: { 
        message: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã –±—ã–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 
        type: 'info' 
      } 
    });
    
    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    setTimeout(() => {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ–∫—Ç—ã –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', state.sect);
    }, 100);
    
    return state.sect;
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const normalizeEffectsAction = () => {
    console.log('üßπ –ó–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–µ–¥—É–∫—Ç–æ—Ä
    dispatch({ type: ACTION_TYPES.NORMALIZE_EFFECTS });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    dispatch({ 
      type: ACTION_TYPES.ADD_NOTIFICATION, 
      payload: { 
        message: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –±—ã–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 
        type: 'info' 
      } 
    });
    
    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    setTimeout(() => {
      console.log('‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', state.player.statusEffects);
    }, 100);
    
    return state.player.statusEffects;
  };
  
  // –î–æ–ø–æ–ª–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ–∫—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  useEffect(() => {
    if (state.isInitialized) {
      // –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => {
        try {
          // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã
          const sectCheckResult = checkAndNormalizeSectData(state);
          
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          if (sectCheckResult !== state) {
            console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é...');
            normalizeSectDataAction();
          }
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É —Å–µ–∫—Ç–æ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
          console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å–µ–∫—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π...');
          initRelationshipSync({
            getState: () => state,
            dispatch
          });
          
          // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          if (state.player && state.player.statusEffects) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ statusEffects –º–∞—Å—Å–∏–≤–æ–º
            if (!Array.isArray(state.player.statusEffects)) {
              console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞), –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é...');
              normalizeEffectsAction();
            } else {
              // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ statusEffects –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –Ω–æ –µ—Å—Ç—å –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã
              if (state.player.statusEffects.length === 0 && 
                  state.player.sect && 
                  state.player.sect.benefits && 
                  state.player.sect.benefits.length > 0) {
                console.log('üîç –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–µ–∫—Ç—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é...');
                normalizeEffectsAction();
              }
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:', error);
        }
      }, 1500); // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–≥—Ä–∞ —É—Å–ø–µ–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    }
  }, [state.isInitialized]);

const actions = {
    // –î–æ–±–∞–≤–ª—è–µ–º dispatch –≤ actions, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    dispatch,
    
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    setUser: (userData) => {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      dispatch({ type: ACTION_TYPES.SET_USER, payload: userData });
    },
    
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redux
    resetState: () => {
      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è Redux');
      dispatch({ type: ACTION_TYPES.RESET_STATE });
      
      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (typeof window !== 'undefined') {
        window.dispatchEvent(new CustomEvent('reset-state'));
      }
    },
    
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    normalizeEffects: () => {
      console.log('üßπ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
      return normalizeEffectsAction();
    },
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
    updatePlayer: (data) => dispatch({ type: ACTION_TYPES.UPDATE_PLAYER, payload: data }),
    updatePlayerStats: (stats) => dispatch({ type: ACTION_TYPES.UPDATE_PLAYER_STATS, payload: stats }),
    updateCultivation: (data) => dispatch({ type: ACTION_TYPES.UPDATE_CULTIVATION, payload: data }),
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    updateInventoryItems: (items) => dispatch({ type: ACTION_TYPES.UPDATE_INVENTORY, payload: items }),
    updateInventoryCurrency: (currency) => dispatch({ type: ACTION_TYPES.UPDATE_CURRENCY, payload: currency }),
    loadInventoryData: async (userIdToLoad) => {
      const currentUserId = userIdToLoad || state.player?.id;
      if (!currentUserId) {
        console.warn('[GameContext] loadInventoryData: userId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state.');
        // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –¥–∏—Å–ø–∞—Ç—á–∏—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        return;
      }
      console.log(`[GameContext] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è userId: ${currentUserId}`);
      try {
        const items = await InventoryServiceAPI.getInventoryItems(currentUserId);
        const profile = await CharacterProfileServiceAPI.getCharacterProfile(currentUserId);
        
        dispatch({ type: ACTION_TYPES.UPDATE_INVENTORY, payload: items || [] });
        if (profile && profile.currency) {
          dispatch({ type: ACTION_TYPES.UPDATE_CURRENCY, payload: profile.currency });
        } else {
          console.warn(`[GameContext] –ü—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è userId: ${currentUserId}`);
          // –î–∏—Å–ø–∞—Ç—á–∏–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª—é—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ undefined
          dispatch({ type: ACTION_TYPES.UPDATE_CURRENCY, payload: state.player.inventory.currency || {} });
        }
        console.log(`[GameContext] –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è userId: ${currentUserId}`);
      } catch (error) {
        console.error(`[GameContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è userId ${currentUserId}:`, error);
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–∏—Å–ø–∞—Ç—á–∏—Ç—å action –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        dispatch({
          type: ACTION_TYPES.ADD_NOTIFICATION,
          payload: {
            message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: ${error.message}`,
            type: 'error'
          }
        });
      }
    },
    refreshInventory: async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (!state.player || !state.player.id) {
          console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
          return;
        }
        
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–∑ API...');
        const userId = state.player.id;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API-—Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        const items = await InventoryServiceAPI.getInventoryItems(userId);
        console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ API`);
        dispatch({ type: ACTION_TYPES.UPDATE_INVENTORY, payload: items });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–∑ API:', error);
      }
    },
    
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    loadCharacterStats: async (userIdToLoad) => {
      const currentUserId = userIdToLoad || state.player?.id;
      if (!currentUserId) {
        console.warn('[GameContext] loadCharacterStats: userId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state.');
        return;
      }
      console.log(`[GameContext] –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è userId: ${currentUserId}`);
      try {
        const characterStats = await CharacterStatsServiceAPI.getCombinedCharacterState(currentUserId);
        dispatch({ type: ACTION_TYPES.UPDATE_CHARACTER_STATS, payload: characterStats });
        console.log(`[GameContext] –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è userId: ${currentUserId}`);
      } catch (error) {
        console.error(`[GameContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è userId ${currentUserId}:`, error);
        dispatch({
          type: ACTION_TYPES.ADD_NOTIFICATION,
          payload: {
            message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${error.message}`,
            type: 'error'
          }
        });
      }
    },
    
    addItem: (item) => dispatch({ type: ACTION_TYPES.ADD_ITEM, payload: item }),
    removeItem: (itemId) => {
      // Ensure we're passing an object with id property as payload as expected by the reducer
      const payload = typeof itemId === 'object' ? itemId : { id: itemId };
      console.log('Removing item with payload:', payload);
      dispatch({ type: ACTION_TYPES.REMOVE_ITEM, payload });
    },
    clearInventory: () => {
      console.log('–û—á–∏—Å—Ç–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redux');
      // –î–∏—Å–ø–∞—Ç—á–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ Redux
      dispatch({ type: ACTION_TYPES.CLEAR_INVENTORY });
      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
      window.dispatchEvent(new CustomEvent('clear-inventory'));
    },
    
    equipItem: (item) => {
      console.log('üìã GameContextProvider - –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞:', item?.name || item?.id);
      
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –≠–ö–ò–ü–ò–†–û–í–ö–ò –ü–†–ï–î–ú–ï–¢–û–í –° –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú–ò
      // –ö –£–†–û–í–ù–Æ –ò/–ò–õ–ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê–ú
      if (item) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç)
        const itemReqs = item.requirements || (item.properties && item.properties.requirements);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (itemReqs) {
          console.log('üîí –ù–ê–ô–î–ï–ù–´ –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–†–ï–î–ú–ï–¢–ê:', JSON.stringify(itemReqs));
          
          // –í–°–ï–ì–î–ê –ë–õ–û–ö–ò–†–£–ï–ú –≠–ö–ò–ü–ò–†–û–í–ö–£ –ü–†–ï–î–ú–ï–¢–û–í –° –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú–ò
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
          dispatch({
            type: ACTION_TYPES.ADD_NOTIFICATION,
            payload: {
              message: `–ù–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç ${item.name || 'Unknown'}: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`,
              type: 'error'
            }
          });
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
          return {
            success: false,
            reason: 'requirements_blocked',
            message: '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π'
          };
        }
      }
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ù–ï –∏–º–µ–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
      dispatch({ type: ACTION_TYPES.EQUIP_ITEM, payload: item });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return { success: true, item };
    },
    unequipItem: (slot) => dispatch({ type: ACTION_TYPES.UNEQUIP_ITEM, payload: slot }),
    updateCurrency: (currency, isAdditive = false) => dispatch({
      type: ACTION_TYPES.UPDATE_CURRENCY,
      payload: currency,
      isAdditive: isAdditive
    }),
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã —É–∂–µ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º–∏.
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    addCurrency: (currency) => {
      console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', currency);
      
      // –ü–µ—Ä–µ–¥–∞–µ–º –≤–∞–ª—é—Ç—É —Å —è–≤–Ω—ã–º —Ñ–ª–∞–≥–æ–º isAdditive=true, —É–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –∞ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å
      dispatch({ 
        type: ACTION_TYPES.UPDATE_CURRENCY, 
        payload: currency,
        isAdditive: true
      });
    },
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∏—Ä–∞
    updateLocation: (location) => dispatch({ type: ACTION_TYPES.UPDATE_LOCATION, payload: location }),
    updateTime: (time) => dispatch({ type: ACTION_TYPES.UPDATE_TIME, payload: time }),
    addEvent: (event) => dispatch({ type: ACTION_TYPES.ADD_EVENT, payload: event }),
    removeEvent: (eventId) => dispatch({ type: ACTION_TYPES.REMOVE_EVENT, payload: eventId }),
    cacheGeneratedEnemy: (areaId, enemyId, enemy) => 
      dispatch({ 
        type: ACTION_TYPES.CACHE_GENERATED_ENEMY, 
        payload: { areaId, enemyId, enemy } 
      }),
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    changeScreen: (screen) => dispatch({ type: ACTION_TYPES.CHANGE_SCREEN, payload: screen }),
    addNotification: (notification) => dispatch({ type: ACTION_TYPES.ADD_NOTIFICATION, payload: notification }),
    removeNotification: (notificationId) => dispatch({ type: ACTION_TYPES.REMOVE_NOTIFICATION, payload: notificationId }),
    updateSettings: (settings) => dispatch({ type: ACTION_TYPES.UPDATE_SETTINGS, payload: settings }),
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏
    saveGame: (callbacks) => dispatch({ type: ACTION_TYPES.SAVE_GAME, payload: callbacks }),
    loadGame: (state) => dispatch({ type: ACTION_TYPES.LOAD_GAME, payload: state }),
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤
    acceptQuest: (questId) => dispatch({ type: ACTION_TYPES.ACCEPT_QUEST, payload: questId }),
    completeQuest: (questId) => dispatch({ type: ACTION_TYPES.COMPLETE_QUEST, payload: questId }),
    updateQuestObjective: (data) => dispatch({ type: ACTION_TYPES.UPDATE_QUEST_OBJECTIVE, payload: data }),
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements: (achievements) => dispatch({ type: ACTION_TYPES.CHECK_ACHIEVEMENTS, payload: { achievements } }),
    completeAchievement: (achievement) => dispatch({ type: ACTION_TYPES.COMPLETE_ACHIEVEMENT, payload: achievement }),
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–µ—Ö–Ω–∏–∫
    learnTechnique: (technique) => dispatch({ type: ACTION_TYPES.LEARN_TECHNIQUE, payload: technique }),
    upgradeTechnique: (data) => dispatch({ type: ACTION_TYPES.UPGRADE_TECHNIQUE, payload: data }),
    useTechnique: (data) => dispatch({ type: ACTION_TYPES.USE_TECHNIQUE, payload: data }),
    repairTechniques: () => {
      console.log('üîß –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫');
      dispatch({ type: ACTION_TYPES.REPAIR_TECHNIQUES });
      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫
      dispatch({ 
        type: ACTION_TYPES.ADD_NOTIFICATION, 
        payload: { 
          message: '–¢–µ—Ö–Ω–∏–∫–∏ –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 
          type: 'success' 
        } 
      });
    },
    
    updateRelationship: (relationshipData) => {
      dispatch({ type: ACTION_TYPES.UPDATE_RELATIONSHIP, payload: relationshipData });
    },
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–æ—è
    startCombat: (enemy) => dispatch({ type: ACTION_TYPES.START_COMBAT, payload: enemy }),
    endCombat: () => dispatch({ type: ACTION_TYPES.END_COMBAT }),
    updateCombat: (data) => dispatch({ type: ACTION_TYPES.UPDATE_COMBAT, payload: data }),
    updateCombatState: (state) => dispatch({ type: ACTION_TYPES.UPDATE_COMBAT_STATE, payload: state }),
    addCombatLog: (log) => dispatch({ type: ACTION_TYPES.ADD_COMBAT_LOG, payload: log }),
    // –ù–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–µ–≤
    addCombatHistory: (combatResult) => {
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', combatResult);
      dispatch({ type: ACTION_TYPES.ADD_COMBAT_HISTORY, payload: combatResult });
    },
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–∞
    addStatusEffect: (effect) => dispatch({ type: ACTION_TYPES.ADD_STATUS_EFFECT, payload: effect }),
    updateStatusEffect: (effect) => dispatch({ type: ACTION_TYPES.UPDATE_STATUS_EFFECT, payload: effect }),
    removeStatusEffect: (effectId) => dispatch({ type: ACTION_TYPES.REMOVE_STATUS_EFFECT, payload: effectId }),
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥—É—Ö–æ–≤–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
    addSpiritPet: (pet) => dispatch({ type: ACTION_TYPES.ADD_SPIRIT_PET, payload: pet }),
    removeSpiritPet: (petId) => dispatch({ type: ACTION_TYPES.REMOVE_SPIRIT_PET, payload: petId }),
    updateSpiritPet: (data) => dispatch({ type: ACTION_TYPES.UPDATE_SPIRIT_PET, payload: data }),
    setActiveSpiritPet: (petId) => dispatch({ type: ACTION_TYPES.SET_ACTIVE_SPIRIT_PET, payload: petId }),
    feedSpiritPet: (data) => dispatch({ type: ACTION_TYPES.FEED_SPIRIT_PET, payload: data }),
    trainSpiritPet: (data) => dispatch({ type: ACTION_TYPES.TRAIN_SPIRIT_PET, payload: data }),
    usePetAbility: (data) => dispatch({ type: ACTION_TYPES.USE_PET_ABILITY, payload: data }),
    removeFleePet: (petId) => dispatch({ type: ACTION_TYPES.REMOVE_FLEEING_PET, payload: petId }),
    updatePetsState: () => dispatch({ type: ACTION_TYPES.UPDATE_PETS_STATE }),
    
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    applyEquipmentBonuses: (equippedItems) => {
      console.log('===== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ë–û–ù–£–°–û–í –≠–ö–ò–ü–ò–†–û–í–ö–ò =====');
      console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', equippedItems);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
      if (!equippedItems || typeof equippedItems !== 'object') {
        console.error('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ equippedItems', equippedItems);
        return;
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º null –∏ undefined –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const validEquippedItems = {};
      Object.entries(equippedItems).forEach(([key, item]) => {
        if (item) {
          validEquippedItems[key] = item;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
          if (!item.calculatedBonuses && item.itemId) {
            try {
              // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏–∑ equipment-items.js
              const { getEquipmentItemById } = require('../data/equipment-items');
              const detailedItem = getEquipmentItemById(parseInt(item.itemId));
              if (detailedItem && detailedItem.calculatedBonuses) {
                console.log(`üîç –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${item.name} (ID: ${item.itemId})`);
                validEquippedItems[key] = {
                  ...item,
                  calculatedBonuses: detailedItem.calculatedBonuses
                };
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ ${item.name}:`, error);
            }
          }
        }
      });
      
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:', validEquippedItems);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ 
      // (–Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–¥—é—Å–µ—Ä)
      dispatchBase({ 
        type: ACTION_TYPES.APPLY_EQUIPMENT_BONUSES, 
        payload: validEquippedItems 
      });
      
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
      setTimeout(() => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã:', state.player.equipmentBonuses);
      }, 100);
    },
    
    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    updateRelationship: (character) => {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º:', character);
      
      if (!character || !character.id || !character.name || character.level === undefined) {
        console.error('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', character);
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      // —Å—Ä–∞–∑—É –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—Ç–µ
      dispatch({ 
        type: ACTION_TYPES.UPDATE_RELATIONSHIP_AND_LOYALTY, 
        payload: {
          name: character.name,
          value: character.level
        }
      });
      
      // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ friends
      try {
        setTimeout(() => {
          if (state.player && state.player.social) {
            let relationships = state.player.social.relationships || [];
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ relationships - —ç—Ç–æ –º–∞—Å—Å–∏–≤
            if (!Array.isArray(relationships)) {
              console.warn('–û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö:', relationships);
              relationships = typeof relationships === 'object' && relationships !== null 
                ? Object.values(relationships) 
                : [];
            }
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ friends –∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å —É—Ä–æ–≤–Ω–µ–º >= 75
            let friends = [];
            try {
              friends = relationships
                .filter(relation => relation && typeof relation === 'object' && typeof relation.level === 'number' && relation.level >= 75)
                .map(relation => relation.id);
            } catch (filterError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –¥–ª—è –¥—Ä—É–∑–µ–π:', filterError);
              // –†—É—á–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
              friends = [];
              for (let i = 0; i < relationships.length; i++) {
                const relation = relationships[i];
                if (relation && typeof relation === 'object' && typeof relation.level === 'number' && relation.level >= 75) {
                  friends.push(relation.id);
                }
              }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ friends
            if (friends.length > 0) {
              console.log('üë´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:', friends);
              dispatch({
                type: 'UPDATE_SOCIAL_FRIENDS',
                payload: friends
              });
              
              // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"
              actions.checkAchievements(['ach8']);
            }
          }
        }, 100);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π:', error);
      }
    },
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–µ–∫—Ç
    loadUserSect: async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sectData = await sectService.getUserSect(state.player.id);
        
        if (sectData) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç benefits –≤ sectData –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
          if (sectData.benefits && !Array.isArray(sectData.benefits)) {
            console.warn('–ë–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤');
            const benefitsObj = sectData.benefits;
            sectData.benefits = [
              {type: 'cultivation_speed', modifier: Math.round((benefitsObj.cultivationSpeedBonus || 0) * 100)},
              {type: 'resource_gathering', modifier: Math.round((benefitsObj.resourceGatheringBonus || 0) * 100)},
              {type: 'technique_discount', modifier: Math.round((benefitsObj.techniqueDiscountPercent || 0) * 100)}
            ];
          }
          
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–∫—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
          dispatch({ type: ACTION_TYPES.SET_SECT, payload: sectData });
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Å–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
          const benefits = await sectService.getSectBenefits(state.player.id);
          
          // –ë–æ–Ω—É—Å—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è sect-service.js
          // –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          let processedBenefits = benefits;
          if (benefits && !Array.isArray(benefits)) {
            console.warn('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º');
            const benefitsObj = benefits;
            processedBenefits = [
              {type: 'cultivation_speed', modifier: Math.round((benefitsObj.cultivationSpeedBonus || 0) * 100)},
              {type: 'resource_gathering', modifier: Math.round((benefitsObj.resourceGatheringBonus || 0) * 100)},
              {type: 'technique_discount', modifier: Math.round((benefitsObj.techniqueDiscountPercent || 0) * 100)}
            ];
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
          dispatch({ type: ACTION_TYPES.UPDATE_SECT_BENEFITS, payload: processedBenefits });
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–∫—Ç–µ
          const rankInfo = await sectService.getUserSectRank(state.player.id);
          dispatch({ type: ACTION_TYPES.UPDATE_SECT_RANK, payload: rankInfo });
        }
        
        return sectData;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∫—Ç–µ:', error);
        dispatch({ 
          type: ACTION_TYPES.ADD_NOTIFICATION, 
          payload: { 
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–µ', 
            type: 'error' 
          } 
        });
        return null;
      }
    },
    
    contributeToSect: async (userId, sectId, energyAmount) => {
      try {
        // –í–Ω–æ—Å–∏–º –≤–∫–ª–∞–¥ –≤ —Å–µ–∫—Ç—É
        const result = await sectService.contributeToSect(userId, sectId, energyAmount);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dispatch({ 
          type: ACTION_TYPES.UPDATE_CULTIVATION, 
          payload: { energy: state.player.cultivation.energy - energyAmount } 
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–µ
        dispatch({ 
          type: `${ACTION_TYPES.CONTRIBUTE_TO_SECT}_SUCCESS`, 
          payload: result 
        });
        
        return result;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∞ –≤ —Å–µ–∫—Ç—É:', error);
        dispatch({ 
          type: `${ACTION_TYPES.CONTRIBUTE_TO_SECT}_ERROR`, 
          payload: error.message 
        });
        throw error;
      }
    },
    
    trainSectMember: async (userId, memberId, duration) => {
      try {
        // –¢—Ä–µ–Ω–∏—Ä—É–µ–º —á–ª–µ–Ω–∞ —Å–µ–∫—Ç—ã
        const result = await sectService.trainWithMember(userId, memberId, duration);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dispatch({ 
          type: ACTION_TYPES.UPDATE_CULTIVATION, 
          payload: { 
            energy: state.player.cultivation.energy - result.energySpent,
            experience: state.player.cultivation.experience + result.userGainedXP
          } 
        });
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        const sectData = state.sect?.sect;
        let currentLoyalty = 0;
        
        if (sectData && Array.isArray(sectData.members)) {
          const member = sectData.members.find(m => m.id === memberId);
          if (member) {
            currentLoyalty = member.loyalty || 0;
          }
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è 10
        const loyaltyIncrease = result.memberLoyalty - currentLoyalty;
        const cappedLoyaltyIncrease = Math.min(10, loyaltyIncrease);
        const cappedLoyalty = currentLoyalty + cappedLoyaltyIncrease;
        
        console.log(`‚úÖ –õ–æ—è–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞: –¢–µ–∫—É—â–∞—è=${currentLoyalty}, –ü—Ä–∏—Ä–æ—Å—Ç=${loyaltyIncrease}, –ú–∞–∫—Å.–ø—Ä–∏—Ä–æ—Å—Ç=10, –ù–æ–≤–∞—è=${cappedLoyalty}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ —Å–µ–∫—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é
        dispatch({ 
          type: `${ACTION_TYPES.TRAIN_SECT_MEMBER}_SUCCESS`, 
          payload: {
            memberId,
            memberLevel: result.memberLevel,
            memberExperience: result.memberExperience,
            memberRequiredExperience: result.memberRequiredExperience,
            memberRole: result.memberRole,
            memberLoyalty: cappedLoyalty // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
          } 
        });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—å —Å–µ–∫—Ç—ã —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
        // –ù–∞—Ö–æ–¥–∏–º —á–ª–µ–Ω–∞ —Å–µ–∫—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã
        if (sectData && Array.isArray(sectData.members)) {
          const member = sectData.members.find(m => m.id === memberId);
          if (member && member.name) {
            console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ -> –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è ${member.name}: ${cappedLoyalty}`);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            dispatch({ 
              type: ACTION_TYPES.UPDATE_RELATIONSHIP_AND_LOYALTY, 
              payload: {
                name: member.name,
                value: cappedLoyalty
              }
            });
          }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é
        return {
          ...result,
          memberLoyalty: cappedLoyalty
        };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —á–ª–µ–Ω–∞ —Å–µ–∫—Ç—ã:', error);
        dispatch({ 
          type: `${ACTION_TYPES.TRAIN_SECT_MEMBER}_ERROR`, 
          payload: error.message 
        });
        throw error;
      }
    },
    
    joinSect: async (userId, sectId) => {
      try {
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–µ–∫—Ç–µ
        const result = await sectService.joinSect(userId, sectId);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ sectId –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º getSectById
        console.log(`joinSect: –≥–æ—Ç–æ–≤–∏–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–µ —Å ID=${sectId}, —Ç–∏–ø: ${typeof sectId}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ 'available' –≤ getSectById
        if (sectId === 'available' || isNaN(parseInt(sectId))) {
          console.error(`–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ getSectById —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID: ${sectId}`);
          throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∫—Ç—ã: ${sectId}`);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–µ
        const sectData = await sectService.getSectById(sectId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–µ
        dispatch({ type: ACTION_TYPES.JOIN_SECT, payload: sectData });
        
        return result;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ–∫—Ç–µ:', error);
        dispatch({ 
          type: ACTION_TYPES.ADD_NOTIFICATION, 
          payload: { 
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–∫—Ç–µ: ' + error.message, 
            type: 'error' 
          } 
        });
        throw error;
      }
    },
    
    leaveSect: async (userId) => {
      try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ–∫—Ç—ã
        // await sectService.leaveSect(userId);
        
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–µ
        dispatch({ type: ACTION_TYPES.LEAVE_SECT });
        
        return true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–µ–∫—Ç—ã:', error);
        dispatch({ 
          type: ACTION_TYPES.ADD_NOTIFICATION, 
          payload: { 
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–µ–∫—Ç—ã: ' + error.message, 
            type: 'error' 
          } 
        });
        throw error;
      }
    },
    
    // –î–ª—è –≤—ã–±–æ—Ä–∞ —á–ª–µ–Ω–∞ —Å–µ–∫—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    selectSectMember: (member) => {
      dispatch({ type: 'SELECT_SECT_MEMBER', payload: member });
    },

    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    uploadAvatar: async (userId, file) => {
      try {
        console.log(`[GameContext] –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –î–∏—Å–ø–∞—Ç—á–∏–º –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
        dispatch({ type: ACTION_TYPES.UPLOAD_AVATAR_REQUEST });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É —á–µ—Ä–µ–∑ API
        const result = await CharacterProfileServiceAPI.uploadAvatar(userId, file);
        
        // –î–∏—Å–ø–∞—Ç—á–∏–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        dispatch({
          type: ACTION_TYPES.UPLOAD_AVATAR_SUCCESS,
          payload: result.avatar
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        dispatch({
          type: ACTION_TYPES.SET_AVATAR,
          payload: result.avatar
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        dispatch({
          type: ACTION_TYPES.ADD_NOTIFICATION,
          payload: {
            message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
            type: 'success'
          }
        });
        
        return result;
      } catch (error) {
        console.error('[GameContext] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        
        // –î–∏—Å–ø–∞—Ç—á–∏–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        dispatch({
          type: ACTION_TYPES.UPLOAD_AVATAR_FAILURE,
          payload: error.message
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        dispatch({
          type: ACTION_TYPES.ADD_NOTIFICATION,
          payload: {
            message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: ' + error.message,
            type: 'error'
          }
        });
        
        throw error;
      }
    },
    
    // loadAvatar —É–¥–∞–ª–µ–Ω - –∞–≤–∞—Ç–∞—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    
    clearAvatar: () => {
      dispatch({ type: ACTION_TYPES.CLEAR_AVATAR });
    },

  };
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º actions –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // –û–±–Ω–æ–≤–ª—è–µ–º actions –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω
      if (window.__GAME_CONTEXT__) {
        window.__GAME_CONTEXT__.actions = actions;
      }
      
      // –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º dispatch –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      window.__GAME_DISPATCH__ = dispatch;
      
      // –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      window.refreshGameState = () => {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã');
        try {
          const stateUpdateEvent = new CustomEvent('game-state-updated', { 
            detail: { timestamp: Date.now(), forced: true } 
          });
          window.dispatchEvent(stateUpdateEvent);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
          return window.__GAME_STATE__;
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
          return null;
        }
      };
    }
  }, [actions, dispatch]); // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ actions –∏–ª–∏ dispatch
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
  return (
    <GameContext.Provider value={{ state, actions }}>
      {children}
    </GameContext.Provider>
  );
};
