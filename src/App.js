import React, { useState, useEffect } from 'react';
import { HashRouter as Router, Routes, Route } from 'react-router-dom';
import styled from 'styled-components';

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –æ—Ç–ª–∞–¥–∫–∏
import { initDebugTools } from './utils/debugTools';
import DebugTools from './components/debug/DebugTools';

// –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
import LoginPage from './components/pages/LoginPage';
import CharacterCreationPage from './components/pages/CharacterCreationPage';
import GamePage from './components/pages/GamePage';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import GameTimeUpdater from './components/common/GameTimeUpdater';
import EffectsManager from './components/common/EffectsManager';
import InventoryManager from './components/common/InventoryManager';
import CultivationManager from './components/common/CultivationManager';
import CharacterStatsManager from './components/common/CharacterStatsManager';
import TechniqueManager from './components/common/TechniqueManager';
import SectManager from './components/common/SectManager';
import ResourceManager from './components/common/ResourceManager';
import AlchemyManager from './components/common/AlchemyManager';
import SpiritPetManager from './components/common/SpiritPetManager';
import MarketManager from './components/common/MarketManager';
import QuestManager from './components/common/QuestManager';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
import { GameContextProvider as OriginalGameContextProvider } from './context/GameContext';
import { integrateRelationshipSyncer } from './utils/sectRelationshipSyncer';

// –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π GameContextProvider —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π
const GameContextProvider = integrateRelationshipSyncer(OriginalGameContextProvider);

const AppContainer = styled.div`
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  background: #1a1a1a;
`;

const LoadingScreen = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: #111;
  color: #f0f0f0;
  font-family: '"Ma Shan Zheng", cursive';
  font-size: 2rem;
  flex-direction: column;
  text-align: center;
`;

const ErrorScreen = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: #111;
  color: #ff6b6b;
  font-family: '"Ma Shan Zheng", cursive';
  font-size: 1.5rem;
  flex-direction: column;
  text-align: center;
  padding: 20px;
`;

const ErrorTitle = styled.h1`
  color: #ff6b6b;
  margin-bottom: 20px;
`;

const ErrorMessage = styled.p`
  margin-bottom: 20px;
`;

const RetryButton = styled.button`
  padding: 10px 20px;
  background: #d4af37;
  color: #000;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  margin-top: 20px;
  font-weight: bold;
  
  &:hover {
    background: #f4cf47;
  }
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
function detectBrowser() {
  const userAgent = navigator.userAgent;
  let browserName;

  if (userAgent.match(/chrome|chromium|crios/i)) {
    browserName = "Chrome";
  } else if (userAgent.match(/firefox|fxios/i)) {
    browserName = "Firefox";
  } else if (userAgent.match(/safari/i)) {
    browserName = "Safari";
  } else if (userAgent.match(/opr\//i)) {
    browserName = "Opera";
  } else if (userAgent.match(/edg/i)) {
    browserName = "Edge";
  } else {
    browserName = "Unknown";
  }

  return browserName;
}

function App() {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [browserInfo, setBrowserInfo] = useState(null);
  
  useEffect(() => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä
    const browser = detectBrowser();
    setBrowserInfo(browser);
    console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞—É–∑–µ—Ä:', browser);
    
    // –ï—Å–ª–∏ —ç—Ç–æ Chrome, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º localStorage
    if (browser === 'Chrome') {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–≥—Ä–∞
        const savedState = localStorage.getItem('gameState');
        if (savedState) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ
            const parsedState = JSON.parse(savedState);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Chrome
            if (parsedState && typeof parsedState === 'object') {
              // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
              if (!parsedState.player) parsedState.player = {};
              if (!parsedState.player.social) parsedState.player.social = {};
              if (!parsedState.player.social.relationships) parsedState.player.social.relationships = {};
              if (!parsedState.player.progress) parsedState.player.progress = {};
              if (!parsedState.player.progress.discoveries) parsedState.player.progress.discoveries = {};
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              localStorage.setItem('gameState', JSON.stringify(parsedState));
              console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è Chrome');
            }
          } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', parseError);
            // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            localStorage.removeItem('gameState');
            console.log('–£–¥–∞–ª–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å localStorage:', err);
      }
    }
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    const timer = setTimeout(() => {
      try {
        setIsLoading(false);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        setIsLoading(false);
      }
    }, 2000);
    
    return () => clearTimeout(timer);
  }, []);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ store,
    // —Ç.–∫. –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º React Context –≤–º–µ—Å—Ç–æ Redux
    initDebugTools();
    
    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º,
    // –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏
    if (typeof window !== 'undefined') {
      window.showTimeHelp = () => {
        console.group('üïí –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:');
        console.log('1. –í –∫–æ–Ω—Å–æ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: getGameTime()');
        console.log('2. –≠—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        console.log('3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: gameDebug.getTime()');
        console.log('4. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ –∏ –º–∏–Ω—É—Ç—ã: getGameTime().formattedTime');
        console.log('5. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Å—É—Ç–æ–∫: getGameTime().daytimeName');
        console.groupEnd();
      };
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏
      setTimeout(() => {
        console.info('üí° –î–ª—è –ø–æ–º–æ—â–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–µ–¥–∏—Ç–µ: showTimeHelp()');
      }, 3000);
    }
  }, []);
  
  const handleRetry = () => {
    window.location.reload();
  };
  
  if (isLoading) {
    return (
      <LoadingScreen>
        <h1>–ü—É—Ç—å –∫ –ë–µ—Å—Å–º–µ—Ä—Ç–∏—é</h1>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Ä–∞ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏...</p>
        {browserInfo && <p style={{ fontSize: '1rem', marginTop: '10px' }}>–ë—Ä–∞—É–∑–µ—Ä: {browserInfo}</p>}
      </LoadingScreen>
    );
  }
  
  if (error) {
    return (
      <ErrorScreen>
        <ErrorTitle>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</ErrorTitle>
        <ErrorMessage>{error}</ErrorMessage>
        {browserInfo && <p>–ë—Ä–∞—É–∑–µ—Ä: {browserInfo}</p>}
        <RetryButton onClick={handleRetry}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</RetryButton>
      </ErrorScreen>
    );
  }
  
  return (
    <GameContextProvider>
      {/* GameTimeUpdater –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∏ –ø–æ–≥–æ–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ */}
      <GameTimeUpdater debug={true} />
      {/* EffectsManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <EffectsManager />
      {/* InventoryManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <InventoryManager />
      {/* CultivationManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <CultivationManager />
      {/* CharacterStatsManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <CharacterStatsManager />
      {/* TechniqueManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <TechniqueManager />
      {/* SectManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–∫—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <SectManager />
      {/* ResourceManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <ResourceManager />
      {/* AlchemyManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö –∏ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∞–ª—Ö–∏–º–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <AlchemyManager />
      {/* SpiritPetManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥—É—Ö–æ–≤–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <SpiritPetManager />
      {/* MarketManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <MarketManager />
      {/* QuestManager —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–µ—Å—Ç–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º */}
      <QuestManager />
      {/* –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ */}
      <DebugTools enabled={true} />
      <Router>
        <AppContainer>
          <Routes>
            <Route path="/" element={<LoginPage />} />
            <Route path="/character-creation" element={<CharacterCreationPage />} />
            <Route path="/game" element={<GamePage />} />
          </Routes>
        </AppContainer>
      </Router>
    </GameContextProvider>
  );
}

export default App;
