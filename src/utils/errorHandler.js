/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
 * –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è Android –±—Ä–∞—É–∑–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ "Script error"
 *
 * –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å, –Ω–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
const ERROR_HANDLER_CONFIG = {
  showErrorsToUser: false,  // false = —Å–∫—Ä—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, true = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
  logToConsole: true,       // –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
  sendToServer: true        // –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function sendErrorToServer(errorData) {
  try {
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–≤–æ–π API
    fetch('/api/errors', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(errorData)
    }).catch(() => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ü–∏–∫–ª—ã
    });
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ
function getBrowserInfo() {
  const ua = navigator.userAgent;
  return {
    userAgent: ua,
    browser: detectBrowser(ua),
    language: navigator.language,
    platform: navigator.platform,
    cookieEnabled: navigator.cookieEnabled,
    onLine: navigator.onLine,
    screen: {
      width: screen.width,
      height: screen.height,
      colorDepth: screen.colorDepth
    },
    viewport: {
      width: window.innerWidth,
      height: window.innerHeight
    },
    devicePixelRatio: window.devicePixelRatio,
    memory: getMemoryInfo(),
    url: window.location.href,
    timestamp: new Date().toISOString()
  };
}

function detectBrowser(userAgent) {
  if (userAgent.match(/chrome|chromium|crios/i)) return "Chrome";
  if (userAgent.match(/firefox|fxios/i)) return "Firefox";
  if (userAgent.match(/safari/i)) return "Safari";
  if (userAgent.match(/opr\//i)) return "Opera";
  if (userAgent.match(/edg/i)) return "Edge";
  if (userAgent.match(/msie|trident/i)) return "Internet Explorer";
  if (userAgent.match(/samsungbrowser/i)) return "Samsung Internet";
  if (userAgent.match(/ucbrowser/i)) return "UC Browser";
  return "Unknown";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
function getMemoryInfo() {
  if (!performance.memory) return null;
  
  const memory = performance.memory;
  return {
    usedJSHeapSize: memory.usedJSHeapSize,
    totalJSHeapSize: memory.totalJSHeapSize,
    jsHeapSizeLimit: memory.jsHeapSizeLimit,
    memoryPressure: memory.usedJSHeapSize / memory.jsHeapSizeLimit,
    deviceMemory: navigator.deviceMemory || null
  };
}

// –î–µ—Ç–µ–∫—Ü–∏—è Android –∏ –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
function getAndroidInfo() {
  const ua = navigator.userAgent;
  const isAndroid = /Android/.test(ua);
  
  if (!isAndroid) return null;
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é Android
  const androidVersion = ua.match(/Android\s([0-9\.]*)/);
  const chromeVersion = ua.match(/Chrome\/([0-9\.]*)/);
  
  return {
    isAndroid: true,
    version: androidVersion ? androidVersion[1] : 'unknown',
    chromeVersion: chromeVersion ? chromeVersion[1] : 'unknown',
    isWebView: /wv/.test(ua), // WebView detection
    isSamsung: /SamsungBrowser/.test(ua),
    isUC: /UCBrowser/.test(ua),
    isOldAndroid: androidVersion && parseFloat(androidVersion[1]) < 7.0,
    isLowMemory: navigator.deviceMemory && navigator.deviceMemory < 2
  };
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Android –æ—à–∏–±–æ–∫
function handleAndroidError(errorData) {
  const androidInfo = getAndroidInfo();
  
  if (androidInfo) {
    errorData.android = androidInfo;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Android –ø—Ä–æ–±–ª–µ–º
    if (androidInfo.isWebView) {
      errorData.possibleCause = 'Android WebView compatibility issue';
      errorData.suggestion = 'Try opening in Chrome browser directly';
    }
    
    if (androidInfo.isLowMemory) {
      errorData.possibleCause = 'Low memory Android device';
      errorData.suggestion = 'Close other apps and refresh page';
    }
    
    if (androidInfo.isOldAndroid) {
      errorData.possibleCause = 'Old Android version with limited JS support';
      errorData.suggestion = 'Update Android or use newer device';
    }
    
    if (androidInfo.isSamsung) {
      errorData.possibleCause = 'Samsung Internet browser compatibility';
      errorData.suggestion = 'Try using Chrome browser instead';
    }
    
    if (androidInfo.isUC) {
      errorData.possibleCause = 'UC Browser compatibility issue';
      errorData.suggestion = 'Try using Chrome browser instead';
    }
  }
  
  return errorData;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ JavaScript –æ—à–∏–±–æ–∫
export function initGlobalErrorHandler() {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  window.onerror = function(message, source, lineno, colno, error) {
    let errorData = {
      type: 'javascript-error',
      message: message,
      source: source,
      line: lineno,
      column: colno,
      error: error ? error.toString() : null,
      stack: error ? error.stack : null,
      browser: getBrowserInfo()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º Android-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    errorData = handleAndroidError(errorData);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (ERROR_HANDLER_CONFIG.logToConsole) {
      console.error('üö® JavaScript Error (Enhanced):', errorData);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (ERROR_HANDLER_CONFIG.sendToServer) {
      sendErrorToServer(errorData);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // false = –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, true = —Å–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É
    return !ERROR_HANDLER_CONFIG.showErrorsToUser;
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (Promise rejections)
  window.addEventListener('unhandledrejection', function(event) {
    let errorData = {
      type: 'unhandled-promise-rejection',
      reason: event.reason ? event.reason.toString() : 'Unknown',
      stack: event.reason && event.reason.stack ? event.reason.stack : null,
      browser: getBrowserInfo()
    };
    
    errorData = handleAndroidError(errorData);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (ERROR_HANDLER_CONFIG.logToConsole) {
      console.error('üö® Unhandled Promise Rejection:', errorData);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (ERROR_HANDLER_CONFIG.sendToServer) {
      sendErrorToServer(errorData);
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if (!ERROR_HANDLER_CONFIG.showErrorsToUser) {
      event.preventDefault();
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  window.addEventListener('error', function(event) {
    if (event.target !== window) {
      let errorData = {
        type: 'resource-error',
        element: event.target.tagName,
        source: event.target.src || event.target.href,
        message: 'Failed to load resource',
        browser: getBrowserInfo()
      };
      
      errorData = handleAndroidError(errorData);
      
      console.error('üö® Resource Error:', errorData);
      sendErrorToServer(errorData);
    }
  }, true);
  
  console.log('‚úÖ Global error handler initialized');
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const browserInfo = getBrowserInfo();
  console.log('üåê Browser Info:', browserInfo);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è Android
  const androidInfo = getAndroidInfo();
  if (androidInfo) {
    console.log('ü§ñ Android Device Detected:', androidInfo);
    
    if (androidInfo.isWebView) {
      console.warn('‚ö†Ô∏è WebView detected. For better performance, open in Chrome browser.');
    }
    
    if (androidInfo.isLowMemory) {
      console.warn('üì± Low memory device detected. Close other apps for better performance.');
    }
    
    if (androidInfo.isOldAndroid) {
      console.warn('‚ö†Ô∏è Old Android version detected. Some features may not work properly.');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
export function testErrorHandler() {
  console.log('üß™ Testing error handler...');
  
  // –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
  setTimeout(() => {
    throw new Error('Test synchronous error for debugging');
  }, 100);
  
  // –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
  setTimeout(() => {
    Promise.reject(new Error('Test promise rejection for debugging'));
  }, 200);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è Android)
export function startMemoryMonitoring() {
  if (!performance.memory) {
    console.warn('Memory API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    return;
  }
  
  const checkMemory = () => {
    const memory = getMemoryInfo();
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
    if (memory.memoryPressure > 0.8) {
      console.warn('üö® –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:', memory);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å
      if (window.gc) {
        window.gc(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –≤ Chrome —Å —Ñ–ª–∞–≥–æ–º)
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const androidInfo = getAndroidInfo();
      if (androidInfo) {
        console.warn('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è Android: –∑–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–∫–ª–∞–¥–∫–∏');
      }
    }
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  setInterval(checkMemory, 10000);
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
  checkMemory();
  
  console.log('üìä Memory monitoring started');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
export function setErrorHandlerConfig(config) {
  Object.assign(ERROR_HANDLER_CONFIG, config);
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', ERROR_HANDLER_CONFIG);
}

export function getErrorHandlerConfig() {
  return { ...ERROR_HANDLER_CONFIG };
}

// –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–æ–∫
export function hideErrorsFromUser() {
  ERROR_HANDLER_CONFIG.showErrorsToUser = false;
  console.log('üîá –û—à–∏–±–∫–∏ —Å–∫—Ä—ã—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å)');
}

export function showErrorsToUser() {
  ERROR_HANDLER_CONFIG.showErrorsToUser = true;
  console.log('üîä –û—à–∏–±–∫–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
  window.testErrorHandler = testErrorHandler;
  window.getBrowserInfo = getBrowserInfo;
  window.getAndroidInfo = getAndroidInfo;
  window.startMemoryMonitoring = startMemoryMonitoring;
  
  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  window.setErrorHandlerConfig = setErrorHandlerConfig;
  window.getErrorHandlerConfig = getErrorHandlerConfig;
  window.hideErrorsFromUser = hideErrorsFromUser;
  window.showErrorsToUser = showErrorsToUser;
}

export { getBrowserInfo, getAndroidInfo };