/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */

/**
 * –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ç–∏–ø–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */
const effectTypeNames = {
  // –û–±—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  'resource_bonus': '–ë–æ–Ω—É—Å —Ä–µ—Å—É—Ä—Å–æ–≤',
  'cultivation_bonus': '–ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
  'movement_speed': '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è',
  'movement_penalty': '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è',
  'perception': '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ',
  'combat_damage': '–£—Ä–æ–Ω –≤ –±–æ—é',
  'energy_regen': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
  'stealth': '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å',
  'cultivation_insight': '–®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∑—Ä–µ–Ω–∏–µ',
  'special_resources': '–û—Å–æ–±—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
  'special_encounters': '–û—Å–æ–±—ã–µ –≤—Å—Ç—Ä–µ—á–∏',
  'market_discount': '–°–∫–∏–¥–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ',
  'double_loot': '–®–∞–Ω—Å –¥–≤–æ–π–Ω–æ–π –¥–æ–±—ã—á–∏',
  'reduced_encounter': '–°–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á',
  'resistance_required': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ',
  'energy_drain': '–†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏',
  'max_energy': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è',
  
  // –°—Ç–∏—Ö–∏–π–Ω—ã–µ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
  'fire_cultivation': '–û–≥–Ω–µ–Ω–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
  'water_cultivation': '–í–æ–¥–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
  'earth_cultivation': '–ó–µ–º–ª—è–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
  'wind_cultivation': '–ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è –≤–µ—Ç—Ä–∞',
  'lightning_cultivation': '–ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è –º–æ–ª–Ω–∏–∏',
  'dark_cultivation': '–¢—ë–º–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
  'light_cultivation': '–°–≤–µ—Ç–ª–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
  
  // –ë–æ–Ω—É—Å—ã —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  'gathering_speed': '–°–∫–æ—Ä–æ—Å—Ç—å —Å–±–æ—Ä–∞',
  'mineral_bonus': '–ë–æ–Ω—É—Å –º–∏–Ω–µ—Ä–∞–ª–æ–≤',
  'herbs': '–°–±–æ—Ä —Ç—Ä–∞–≤',
  'ores': '–°–±–æ—Ä —Ä—É–¥',
  'crystals': '–°–±–æ—Ä –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤',
  'food': '–°–±–æ—Ä –ø–∏—â–∏',
  
  // –ü–æ–≥–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≥—Ä–æ–∑—ã
  'combat_damage (thunderstorm)': '–£—Ä–æ–Ω –≤ –±–æ—é (–≥—Ä–æ–∑–∞)',
  'gathering_speed (thunderstorm)': '–°–∫–æ—Ä–æ—Å—Ç—å —Å–±–æ—Ä–∞ (–≥—Ä–æ–∑–∞)',
  'lightning_cultivation (thunderstorm)': '–ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è –º–æ–ª–Ω–∏–∏ (–≥—Ä–æ–∑–∞)',
  'movement_speed (thunderstorm)': '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è (–≥—Ä–æ–∑–∞)',
  'perception (thunderstorm)': '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ (–≥—Ä–æ–∑–∞)',
  'resource_bonus (thunderstorm)': '–ë–æ–Ω—É—Å —Ä–µ—Å—É—Ä—Å–æ–≤ (–≥—Ä–æ–∑–∞)'
};

/**
 * –°–æ–∑–¥–∞–µ—Ç "—á–∏—Å—Ç—ã–π" —ç—Ñ—Ñ–µ–∫—Ç –≥—Ä–æ–∑—ã —Å –æ—Å–æ–±—ã–º —Ç–∏–ø–æ–º
 * @param {string} type - –ë–∞–∑–æ–≤—ã–π —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @param {number} modifier - –ó–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
 * @returns {Object} –≠—Ñ—Ñ–µ–∫—Ç –≥—Ä–æ–∑—ã
 */
const createThunderstormEffect = (type, modifier) => {
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —á–∏—Å—Ç—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  const effect = {
    id: `${type}_thunderstorm`,
    type: `${type}_thunderstorm`, // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ—Å–æ–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    modifier: modifier,
    icon: '‚ö°', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≥—Ä–æ–∑—ã
    displayValue: `${modifier > 0 ? '+' : ''}${modifier}%`,
  };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (modifier > 0) {
    effect.displayType = 'positive';
  } else if (modifier < 0) {
    effect.displayType = 'negative';
  } else {
    effect.displayType = 'neutral';
  }
  
  // –ó–∞–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º, —á—Ç–æ —ç—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –≥—Ä–æ–∑—ã
  if (effectTypeNames[`${type} (thunderstorm)`]) {
    effect.name = effectTypeNames[`${type} (thunderstorm)`];
  } else {
    effect.name = `${type.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')} (–≥—Ä–æ–∑–∞)`;
  }
  
  return effect;
};

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * @param {Object} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
export const collectAllEffects = (state) => {
  // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≥—Ä–æ–∑—ã –æ—Ç–¥–µ–ª—å–Ω–æ
  const standardEffects = [];
  const thunderstormEffects = [];
  
  // 1. –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (Array.isArray(state.player.statusEffects)) {
    standardEffects.push(...state.player.statusEffects);
  }
  
  // 2. –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç —Å–µ–∫—Ç—ã (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–∫—Ç–µ)
  if (state.player.sect && Array.isArray(state.player.sect.benefits)) {
    standardEffects.push(...state.player.sect.benefits);
  }
  
  // 3. –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  if (state.player.inventory && state.player.inventory.equipment) {
    const equipment = state.player.inventory.equipment;
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    Object.values(equipment).forEach(item => {
      if (item && Array.isArray(item.effects)) {
        standardEffects.push(...item.effects);
      }
    });
  }
  
  // 4. –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
  if (state.player.spiritPets && 
      state.player.spiritPets.activePetId && 
      state.player.spiritPets.pets) {
    
    const activePet = state.player.spiritPets.pets.find(
      pet => pet.id === state.player.spiritPets.activePetId
    );
    
    if (activePet && Array.isArray(activePet.effects)) {
      standardEffects.push(...activePet.effects);
    }
  }
  
  // 5. –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ø–æ–≥–æ–¥—ã –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (state.world && state.world.weather) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —ç—Ñ—Ñ–µ–∫—Ç–∞–º –ø–æ–≥–æ–¥—ã
    const weatherEffectsArray = Array.isArray(state.world.weather.effects) ? state.world.weather.effects :
                            Array.isArray(state.world.weather.weatherEffects) ? state.world.weather.weatherEffects : [];
    
    //console.log('üå§Ô∏è collectAllEffects: –ù–∞–π–¥–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–≥–æ–¥—ã:', weatherEffectsArray);
    
    if (weatherEffectsArray.length > 0) {
      if (state.world.weather.currentWeather === 'thunderstorm') {
        // –î–ª—è –≥—Ä–æ–∑—ã —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
        weatherEffectsArray.forEach(effect => {
          thunderstormEffects.push(
            createThunderstormEffect(effect.type, effect.modifier || effect.value || 0)
          );
        });
      } else {
        // –û–±—ã—á–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        standardEffects.push(...weatherEffectsArray);
      }
    }
  }
  
  // 6. –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ª–æ–∫–∞—Ü–∏–∏
  if (state.world && state.world.currentLocation && Array.isArray(state.world.currentLocation.effects)) {
    standardEffects.push(...state.world.currentLocation.effects);
  }
  
  // 7. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–µ—Å–ª–∏ –≤ –±–æ—é)
  if (state.gameState && 
      state.gameState.combat && 
      state.gameState.combat.active && 
      Array.isArray(state.gameState.combat.temporaryEffects)) {
    
    standardEffects.push(...state.gameState.combat.temporaryEffects);
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  const validStandardEffects = standardEffects.filter(effect => effect !== null && effect !== undefined);
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é mergeEffects –∏–∑ effectsNormalizer.js
  const { mergeEffects } = require('./effectsNormalizer');
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  const mergedStandardEffects = mergeEffects(validStandardEffects);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –≥—Ä–æ–∑—ã)
  return [...mergedStandardEffects, ...thunderstormEffects];
};

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏,
 * –æ—á–∏—â–∞—è –µ–≥–æ –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * @param {Object} effect - –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
 * @returns {Object} –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
 */
export const standardizeEffect = (effect) => {
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–Ω–µ –º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
  const standardized = {};
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –ø–æ–ª–µ)
  standardized.type = effect.type || 'unknown';
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞
  if (typeof effect.modifier === 'number') {
    standardized.modifier = effect.modifier;
  } else if (typeof effect.value === 'string') {
    // –ï—Å–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∫–∞–∑–∞–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+5%")
    const match = effect.value.match(/([+-]?\d+(?:\.\d+)?)%?/);
    if (match) {
      const value = parseFloat(match[1]);
      standardized.modifier = match[0].includes('%') ? value / 100 : value;
    } else {
      standardized.modifier = 0;
    }
  } else if (typeof effect.value === 'number') {
    standardized.modifier = effect.value;
  } else {
    standardized.modifier = 0;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
  let effectKey = standardized.type;
  
  // –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
  if (effectTypeNames[effectKey]) {
    standardized.name = effectTypeNames[effectKey];
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è –∏–∑ —Ç–∏–ø–∞
    standardized.name = standardized.type
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
  if (standardized.modifier > 0) {
    standardized.displayType = 'positive';
  } else if (standardized.modifier < 0) {
    standardized.displayType = 'negative';
  } else {
    standardized.displayType = 'neutral';
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const absModifier = Math.abs(standardized.modifier);
  let formattedValue;
  
  if (absModifier < 1 && absModifier > 0) {
    // –î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (–º–µ–Ω—å—à–µ 1) - —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    formattedValue = `${standardized.modifier > 0 ? '+' : '-'}${(absModifier * 100).toFixed(0)}%`;
  } else {
    // –¶–µ–ª–æ–µ –∏–ª–∏ –±–æ–ª—å—à–æ–µ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ
    formattedValue = `${standardized.modifier > 0 ? '+' : '-'}${absModifier}%`;
  }
  
  standardized.displayValue = formattedValue;
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
  standardized.icon = standardized.displayType === 'positive' 
    ? '‚ú®' 
    : standardized.displayType === 'negative' 
      ? 'üîª' 
      : '‚ö™';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –≤ –∫–∞—á–µ—Å—Ç–≤–µ ID –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  standardized.id = standardized.type;
  
  return standardized;
};

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ –±–∞–∑–æ–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
 * @param {Object} baseStats - –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
 * @param {Array} effects - –ú–∞—Å—Å–∏–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
 * @returns {Object} –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
 */
export const applyEffectsToStats = (baseStats, effects) => {
  if (!Array.isArray(effects) || effects.length === 0) {
    return baseStats;
  }
  
  const result = { ...baseStats };
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ —Ç–∏–ø—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è
  const effectsByType = {};
  
  effects.forEach(effect => {
    if (!effect.type) return;
    
    if (!effectsByType[effect.type]) {
      effectsByType[effect.type] = [];
    }
    effectsByType[effect.type].push(effect);
  });
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
  const statMapping = {
    'strength_bonus': 'strength',
    'agility_bonus': 'agility',
    'constitution_bonus': 'constitution',
    'intelligence_bonus': 'intelligence',
    'perception_bonus': 'perception',
    'willpower_bonus': 'willpower',
    'cultivation_bonus': 'cultivationSpeed',
    'resource_bonus': 'resourceGatheringSpeed',
    'stealth_bonus': 'stealth',
    'perception_bonus': 'perception',
    'cultivation_regen': 'energyRegen',
    'movement_bonus': 'movementSpeed',
    'equipment_discount': 'equipmentDiscount'
  };
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
  Object.entries(effectsByType).forEach(([type, typeEffects]) => {
    const statName = statMapping[type];
    
    if (statName && result[statName] !== undefined) {
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const baseValue = result[statName];
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      const percentModifier = typeEffects.reduce((total, effect) => {
        if (typeof effect.modifier === 'number') {
          return total + effect.modifier;
        }
        return total;
      }, 0);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const absoluteModifier = typeEffects.reduce((total, effect) => {
        if (effect.absoluteValue && typeof effect.absoluteValue === 'number') {
          return total + effect.absoluteValue;
        }
        return total;
      }, 0);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
      result[statName] = baseValue * (1 + percentModifier) + absoluteModifier;
    }
  });
  
  return result;
};
