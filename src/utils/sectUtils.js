/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∫—Ç–∞–º–∏ –∏ –∏—Ö –±–æ–Ω—É—Å–∞–º–∏
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
 */

import { standardizeEffect } from './effectsUtils';

/**
 * –°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç—ã–π —ç—Ñ—Ñ–µ–∫—Ç –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
 * @param {string} type - –¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @param {number} modifier - –ó–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
 * @param {Object} [options] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @returns {Object} –ß–∏—Å—Ç—ã–π —ç—Ñ—Ñ–µ–∫—Ç –±–µ–∑ –ø–æ–ª–µ–π id –∏ source
 */
export const createCleanEffect = (type, modifier, options = {}) => {
  let displayType = 'neutral';
  let icon = '‚ö™';
  
  if (modifier > 0) {
    displayType = 'positive';
    icon = 'üîº';
  } else if (modifier < 0) {
    displayType = 'negative';
    icon = 'üîΩ';
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ç–∏–ø–∞, –∑–∞–º–µ–Ω—è—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
  let cleanName = type
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –≤ –æ–ø—Ü–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –Ω–æ —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
  if (options.name) {
    // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –≤ —Å–∫–æ–±–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ù–∞–∑–≤–∞–Ω–∏–µ (–ò—Å—Ç–æ—á–Ω–∏–∫)"
    cleanName = options.name.replace(/\s*\([^)]*\)\s*$/, '');
  }
  
  // –û–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –±–µ–∑ –ø–æ–ª–µ–π id –∏ source
  return {
    type: type,
    modifier: modifier,
    displayType: displayType,
    displayValue: `${modifier > 0 ? '+' : ''}${modifier}%`,
    icon: icon,
    name: cleanName
  };
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * @param {Array} sectBenefits - –ë–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞ {type, modifier}
 * @returns {Array} –≠—Ñ—Ñ–µ–∫—Ç—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
 */
export const sectBenefitsToEffects = (sectBenefits) => {
  if (!sectBenefits || !Array.isArray(sectBenefits)) return [];
  
  return sectBenefits.map(benefit => {
    let effectType;
    
    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –±–æ–Ω—É—Å–æ–≤ —Å–µ–∫—Ç—ã —Å —Ç–∏–ø–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    switch (benefit.type) {
      case 'cultivation_speed':
        effectType = 'cultivation_bonus';
        break;
      case 'resource_gathering':
        effectType = 'resource_bonus';
        break;
      case 'technique_discount':
        effectType = 'technique_discount';
        break;
      default:
        effectType = benefit.type;
    }
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    const options = {
      name: benefit.name || ''
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º createCleanEffect –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    return createCleanEffect(effectType, benefit.modifier, options);
  });
};

/**
 * –û—á–∏—â–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç ID, –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * @param {Array|Object} effects - –ú–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
 * @returns {Array} –û—á–∏—â–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
 */
export const cleanEffects = (effects) => {
  if (!effects) return [];
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç
  const effectsArray = Array.isArray(effects) ? effects : Object.values(effects);
  
  return effectsArray.map(effect => {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    if (typeof effect !== 'object' || effect === null) {
      return createCleanEffect('unknown', 0);
    }
    
    // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    return createCleanEffect(
      effect.type || 'unknown',
      effect.modifier || 0,
      {
        name: effect.name || ''
      }
    );
  });
};

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ –±–æ–Ω—É—Å–æ–≤
 * @param {Object|Array} rawBenefits - –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ —Å–µ–∫—Ç—ã –≤ –≤–∏–¥–µ {type, modifier}
 */
export const normalizeSectBenefits = (rawBenefits) => {
  // –ï—Å–ª–∏ –±–æ–Ω—É—Å—ã —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞
  if (Array.isArray(rawBenefits)) {
    return rawBenefits.map(benefit => ({
      type: benefit.type,
      modifier: typeof benefit.modifier === 'number' ? benefit.modifier : 0
    }));
  }
  
  // –ï—Å–ª–∏ –±–æ–Ω—É—Å—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  if (!rawBenefits) {
    return [];
  }
  
  // –ï—Å–ª–∏ –±–æ–Ω—É—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ–ª—è–º–∏
  if (typeof rawBenefits === 'object') {
    return [
      { type: 'cultivation_speed', modifier: Math.round((rawBenefits.cultivationSpeedBonus || 0) * 100) },
      { type: 'resource_gathering', modifier: Math.round((rawBenefits.resourceGatheringBonus || 0) * 100) },
      { type: 'technique_discount', modifier: Math.round((rawBenefits.techniqueDiscountPercent || 0) * 100) }
    ];
  }
  
  // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  return [];
};

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
 * @param {Object} sectState - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∫—Ç—ã –∏–∑ Redux
 * @param {Object} sectData - –î–∞–Ω–Ω—ã–µ –æ —Å–µ–∫—Ç–µ (–µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç sectState)
 * @returns {Array} –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 */
export const collectAllSectBenefits = (sectState, sectData = null) => {
  const benefits = [];
  
  // 1. –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ–∫—Ç—ã
  if (sectState && sectState.benefits) {
    benefits.push(...normalizeSectBenefits(sectState.benefits));
  }
  
  // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ç—ã –∏ –≤ –Ω–∏—Ö –µ—Å—Ç—å –±–æ–Ω—É—Å—ã
  if (sectData && sectData.benefits && sectData !== sectState) {
    benefits.push(...normalizeSectBenefits(sectData.benefits));
  }
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –±–æ–Ω—É—Å–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –±–æ–Ω—É—Å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
  const uniqueBenefits = {};
  
  benefits.forEach(benefit => {
    const type = benefit.type;
    
    if (!uniqueBenefits[type] || Math.abs(benefit.modifier) > Math.abs(uniqueBenefits[type].modifier)) {
      uniqueBenefits[type] = benefit;
    }
  });
  
  return Object.values(uniqueBenefits);
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —Å–µ–∫—Ç—ã –ø–æ —Ç–∏–ø—É
 * @param {Array} benefits - –ú–∞—Å—Å–∏–≤ –±–æ–Ω—É—Å–æ–≤ —Å–µ–∫—Ç—ã
 * @param {string} type - –¢–∏–ø –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {number} defaultValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –±–æ–Ω—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
 * @returns {number} –ó–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –±–æ–Ω—É—Å–∞
 */
export const getBenefitValueByType = (benefits, type, defaultValue = 0) => {
  if (!Array.isArray(benefits) || benefits.length === 0) {
    return defaultValue;
  }
  
  const benefit = benefits.find(b => b.type === type);
  return benefit ? benefit.modifier : defaultValue;
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ 
 * –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–ª—é—á—É
 * @param {Array} benefits - –ú–∞—Å—Å–∏–≤ –±–æ–Ω—É—Å–æ–≤ —Å–µ–∫—Ç—ã
 * @returns {Object} –û–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∏ - —Ç–∏–ø—ã –±–æ–Ω—É—Å–æ–≤, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —ç—Ñ—Ñ–µ–∫—Ç—ã
 */
export const getSectEffectsObject = (benefits) => {
  const effects = sectBenefitsToEffects(benefits);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ç–∏–ø—É
  const effectsObject = {};
  effects.forEach(effect => {
    effectsObject[effect.type] = effect;
  });
  
  return effectsObject;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∫—Ç–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
 * @param {Object} sectState - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∫—Ç—ã
 * @param {Object} sectData - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ç—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
 */
export const createNormalizedSectData = (sectState, sectData = null) => {
  const benefitsArray = collectAllSectBenefits(sectState, sectData);
  const normalizedEffects = sectBenefitsToEffects(benefitsArray);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∫—Ç–µ
  const baseData = sectData || sectState?.sect || {};
  
  return {
    ...baseData,
    normalizedBenefits: benefitsArray,
    effectsArray: normalizedEffects,
    // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ —Ç–∏–ø—É
    getBenefitValue: (type, defaultValue = 0) => getBenefitValueByType(benefitsArray, type, defaultValue)
  };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ç—ã
 * @param {Object} gameState - –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ Redux
 * @returns {Object} –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
 */
export const checkAndNormalizeSectData = (gameState) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–∫—Ç–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  const sectState = gameState?.sect || {};
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∫—Ç–µ
  if (!sectState.sect) {
    console.log('‚ùì –î–∞–Ω–Ω—ã–µ –æ —Å–µ–∫—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
    return gameState;
  }
  
  // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∏ –ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
  let hasProblems = false;
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–∫—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const normalizedSectState = { ...sectState };
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –±–æ–Ω—É—Å–æ–≤
  if (sectState.benefits) {
    if (!Array.isArray(sectState.benefits)) {
      console.log('‚ö†Ô∏è –ë–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º');
      normalizedSectState.benefits = normalizeSectBenefits(sectState.benefits);
      hasProblems = true;
    } else if (sectState.benefits.some(b => typeof b !== 'object' || typeof b.type !== 'string' || typeof b.modifier !== 'number')) {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–æ–Ω—É—Å—ã —Å–µ–∫—Ç—ã –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º');
      normalizedSectState.benefits = normalizeSectBenefits(sectState.benefits);
      hasProblems = true;
    }
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã
  if (normalizedSectState.sect) {
    const sect = { ...normalizedSectState.sect };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –±–æ–Ω—É—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ç—ã
    if (sect.benefits) {
      if (!Array.isArray(sect.benefits)) {
        console.log('‚ö†Ô∏è –ë–æ–Ω—É—Å—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ç—ã –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º');
        sect.benefits = normalizeSectBenefits(sect.benefits);
        hasProblems = true;
      } else if (sect.benefits.some(b => typeof b !== 'object' || typeof b.type !== 'string' || typeof b.modifier !== 'number')) {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–æ–Ω—É—Å—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ç—ã –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º');
        sect.benefits = normalizeSectBenefits(sect.benefits);
        hasProblems = true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –≤ –æ–±—ä–µ–∫—Ç–µ —Å–µ–∫—Ç—ã
    if (!sect.id || !sect.name) {
      console.log('‚ö†Ô∏è –í –æ–±—ä–µ–∫—Ç–µ —Å–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (id –∏–ª–∏ name)');
      // –ù–µ –º–æ–∂–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ id/name, –Ω–æ –æ—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É
      hasProblems = true;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–µ–∫—Ç—ã –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    normalizedSectState.sect = sect;
  }
  
  // –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!hasProblems) {
    return gameState;
  }
  
  // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ç—ã
  console.log('üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
  return {
    ...gameState,
    sect: normalizedSectState
  };
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç—ã
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∫—Ç—ã –∏–∑ Redux
 * @returns {Object} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∫—Ç—ã
 */
export const normalizeSectData = (state) => {
  // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!state || !state.sect) return state;
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –±–æ–Ω—É—Å—ã
  const benefits = normalizeSectBenefits(state.benefits || []);
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –±–æ–Ω—É—Å—ã –≤ —Å–µ–∫—Ç–µ
  let sect = { ...state.sect };
  if (sect.benefits) {
    sect.benefits = normalizeSectBenefits(sect.benefits);
  }
  
  // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–∑ –±–æ–Ω—É—Å–æ–≤
  const effectsArray = sectBenefitsToEffects(benefits);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  return {
    ...state,
    benefits: benefits,
    sect: sect,
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    effectsArray: effectsArray,
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ —Ç–∏–ø—É
    getBenefitValue: (type, defaultValue = 0) => getBenefitValueByType(benefits, type, defaultValue)
  };
};
