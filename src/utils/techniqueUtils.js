/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
 */
const { techniques } = require('../data/techniques-adapter');

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç ID —Ç–µ—Ö–Ω–∏–∫–∏ (–∑–∞–º–µ–Ω—è–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã)
 * @param {string} id - ID —Ç–µ—Ö–Ω–∏–∫–∏
 * @returns {string} - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID —Ç–µ—Ö–Ω–∏–∫–∏
 */
const normalizeId = (id) => {
  if (!id) return id;
  return id.replace(/_/g, '-');
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ID (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
 * @param {string} id1 - –ü–µ—Ä–≤—ã–π ID
 * @param {string} id2 - –í—Ç–æ—Ä–æ–π ID
 * @returns {boolean} - true, –µ—Å–ª–∏ ID —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
 */
const isSameId = (id1, id2) => {
  if (!id1 || !id2) return false;
  return normalizeId(id1) === normalizeId(id2);
};

/**
 * –ü–∞—Ç—á –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Ç–µ—Ö–Ω–∏–∫, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã –≤ ID
 * @param {Array|Object} techniques - –ú–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Ç–µ—Ö–Ω–∏–∫
 * @returns {Array|Object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Ç–µ—Ö–Ω–∏–∫
 */
const normalizeTechniquesIds = (techniques) => {
  if (!techniques) return techniques;
  
  if (Array.isArray(techniques)) {
    return techniques.map(technique => {
      if (technique && technique.id && typeof technique.id === 'string') {
        if (technique.id.includes('_')) {
          const newId = normalizeId(technique.id);
          console.log(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω ID —Ç–µ—Ö–Ω–∏–∫–∏: ${technique.id} -> ${newId}`);
          return {
            ...technique,
            id: newId
          };
        }
      }
      return technique;
    });
  } else if (typeof techniques === 'object') {
    const result = {};
    Object.keys(techniques).forEach(key => {
      if (key.includes('_')) {
        const newKey = normalizeId(key);
        console.log(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫–ª—é—á —Ç–µ—Ö–Ω–∏–∫–∏: ${key} -> ${newKey}`);
        result[newKey] = techniques[key];
      } else {
        result[key] = techniques[key];
      }
    });
    return result;
  }
  
  return techniques;
};

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É –ø–æ ID
 * @param {string} id - ID —Ç–µ—Ö–Ω–∏–∫–∏
 * @returns {Object|null} - –ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
const findBaseTechniqueById = (id) => {
  if (!id) return null;
  const normalizedId = normalizeId(id);
  return techniques.find(t => normalizeId(t.id) === normalizedId) || null;
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
 * @param {Object} baseTechnique - –ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
 * @param {number} level - –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏–∫–∏
 * @returns {Object} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Ö–Ω–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
 */
const calculateTechniqueStats = (baseTechnique, level = 1) => {
  if (!baseTechnique) return {};
  
  // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 20% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å)
  const levelMultiplier = 1 + (level - 1) * 0.2;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
  const calculatedStats = {
    damage: baseTechnique.damage ? Math.floor(baseTechnique.damage * levelMultiplier) : 0,
    healing: baseTechnique.healing ? Math.floor(baseTechnique.healing * levelMultiplier) : 0,
    energyCost: baseTechnique.energyCost ? Math.floor(baseTechnique.energyCost * (1 + (level - 1) * 0.1)) : 10
  };
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
  if (Array.isArray(baseTechnique.effects)) {
    calculatedStats.effects = baseTechnique.effects.map(effect => {
      const updatedEffect = { ...effect };
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∞
      if (updatedEffect.damage) {
        updatedEffect.damage = Math.floor(updatedEffect.damage * levelMultiplier);
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏—Å—Ü–µ–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
      if (updatedEffect.healing) {
        updatedEffect.healing = Math.floor(updatedEffect.healing * levelMultiplier);
      }
      
      return updatedEffect;
    });
  }
  
  return calculatedStats;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
 * @param {Object} technique - –¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true, –µ—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∞ –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
 */
const isTechniqueValid = (technique) => {
  if (!technique || !technique.id) return false;
  
  // –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
  const requiredFields = [
    'name', 'description', 'type', 'icon', 
    'damage', 'damageType', 'energyCost', 'cooldown',
    'level', 'maxLevel'
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
  for (const field of requiredFields) {
    if (technique[field] === undefined) {
      return false;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–∏–≤–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  if (!Array.isArray(technique.effects)) {
    return false;
  }
  
  return true;
};

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö ID –∏ level
 * @param {Array} techniques - –ú–∞—Å—Å–∏–≤ —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
 */
const repairTechniques = (playerTechniques) => {
  if (!Array.isArray(playerTechniques) || playerTechniques.length === 0) {
    console.log('–ù–µ—Ç —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
    return [];
  }
  
  console.log(`üõ†Ô∏è –ó–∞–ø—É—â–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ${playerTechniques.length} —Ç–µ—Ö–Ω–∏–∫...`);
  
  const repairedTechniques = playerTechniques.map(technique => {
    // –í—Å–µ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –∫–∞–∂–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π
    console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å ID: ${technique.id}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
    const baseTechnique = findBaseTechniqueById(technique.id);
    
    if (!baseTechnique) {
      console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ —Å ID: ${technique.id}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª.`);
      return technique; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    const level = typeof technique.level === 'number' ? technique.level : 1;
    const experience = typeof technique.experience === 'number' ? technique.experience : 0;
    const masteryLevel = typeof technique.masteryLevel === 'number' ? technique.masteryLevel : 0;
    const lastUsed = technique.lastUsed || null;
    const requiredLevel = technique.requiredLevel || baseTechnique.requiredLevel || 1;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
    const calculatedStats = calculateTechniqueStats(baseTechnique, level);
    
    // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å –±–∞–∑–æ–≤–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è,
    // –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    const repairedTechnique = {
      ...baseTechnique,           // –ë–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ techniques.js
      ...calculatedStats,         // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
      id: technique.id,           // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
      level,                      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å
      experience,                 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç
      lastUsed,                   // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      masteryLevel,               // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
      requiredLevel               // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å
    };
    
    console.log(`‚úÖ –¢–µ—Ö–Ω–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${repairedTechnique.name} (–£—Ä–æ–≤–µ–Ω—å: ${level}, –£—Ä–æ–Ω: ${repairedTechnique.damage}, –ö—É–ª–¥–∞—É–Ω: ${repairedTechnique.cooldown})`);
    return repairedTechnique;
  });
  
  return repairedTechniques;
};

module.exports = {
  normalizeId,
  isSameId,
  normalizeTechniquesIds,
  findBaseTechniqueById,
  calculateTechniqueStats,
  isTechniqueValid,
  repairTechniques
};
