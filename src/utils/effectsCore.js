/**
 * –ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–ª—å—Ü–µ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
 */

/**
 * –ì–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 * @param {*} obj1 - –ü–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @param {*} obj2 - –í—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * @returns {boolean} - true –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
 */
export function deepEqual(obj1, obj2) {
  if (obj1 === obj2) return true;

  if (typeof obj1 !== 'object' || obj1 === null || 
      typeof obj2 !== 'object' || obj2 === null) {
    return false;
  }

  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);

  if (keys1.length !== keys2.length) return false;

  for (const key of keys1) {
    if (!keys2.includes(key)) return false;
    
    if (!deepEqual(obj1[key], obj2[key])) return false;
  }

  return true;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * @param {Object} effects - –û–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns {Object} - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
export function normalizeEffects(effects) {
  if (!effects || typeof effects !== 'object') return {};
  
  const result = {};
  
  // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç
  if (Array.isArray(effects)) {
    effects.forEach(effect => {
      if (!effect || !effect.type) return;
      
      const type = effect.type;
      const value = effect.value || effect.modifier || 0;
      
      if (!result[type]) {
        result[type] = {
          type,
          modifier: value,
          source: effect.source || 'unknown'
        };
      } else {
        result[type].modifier += value;
      }
    });
    return result;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ, —É–¥–∞–ª—è—è –Ω—É–ª–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  for (const [key, effect] of Object.entries(effects)) {
    if (!effect || effect.modifier === 0) continue;
    result[key] = { ...effect };
  }
  
  return result;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * @param {Object} effectsObject - –û–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –≥–¥–µ –∫–ª—é—á–∏ - —Ç–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
 */
export function effectsObjectToArray(effectsObject) {
  if (!effectsObject || typeof effectsObject !== 'object') {
    return [];
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –º–∞—Å—Å–∏–≤, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (Array.isArray(effectsObject)) {
    return effectsObject;
  }
  
  const result = [];
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º type –∫–∞–∫ –∏–º–µ–Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞
  for (const [type, effect] of Object.entries(effectsObject)) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏ null/undefined –∑–Ω–∞—á–µ–Ω–∏—è
    if (type.startsWith('_') || effect === null || effect === undefined) {
      continue;
    }
    
    // –ë–∞–∑–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const baseEffect = {
      id: effect.id || `${type}_${Date.now()}`,
      type: type,
      name: effect.name || getEffectDisplayName(type),
      modifier: effect.value || effect.modifier || 0,
      source: effect.source || 'unknown',
      icon: effect.icon || getDefaultEffectIcon(type),
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+10%")
      displayValue: effect.displayValue || formatModifier(effect.value || effect.modifier || 0),
      // –¢–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
      displayType: getDisplayType(effect.value || effect.modifier || 0, type)
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const finalEffect = { ...effect, ...baseEffect };
    
    result.push(finalEffect);
  }
  
  return result;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Number} value - –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
 * @param {String} format - –§–æ—Ä–º–∞—Ç (percent, flat –∏–ª–∏ auto)
 * @returns {String} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+10%")
 */
export function formatModifier(value, format = 'percent') {
  if (value === undefined || value === null) return '';
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫
  const sign = value > 0 ? '+' : '';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  if (format === 'percent' || format === 'auto') {
    return `${sign}${value}%`;
  } else if (format === 'flat') {
    return `${sign}${value}`;
  }
  
  return `${sign}${value}`;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
 * @param {Number} value - –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
 * @param {String} type - –¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @returns {String} - –¢–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (positive, negative, neutral)
 */
function getDisplayType(value, type) {
  // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
  const inverted = [
    'cooldown_reduction',
    'movement_penalty',
    'energy_drain',
    'reduced_encounter'
  ].includes(type);
  
  if (value === 0) return 'neutral';
  
  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è = –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  // –î–ª—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è = –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  if (inverted) {
    return value < 0 ? 'positive' : 'negative';
  } else {
    return value > 0 ? 'positive' : 'negative';
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @param {String} type - –¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @returns {String} - –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 */
function getEffectDisplayName(type) {
  const effectNames = {
    // –ë–∞–∑–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'combat_damage': '–£—Ä–æ–Ω –≤ –±–æ—é',
    'stealth': '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å',
    'resource_bonus': '–ë–æ–Ω—É—Å —Ä–µ—Å—É—Ä—Å–æ–≤',
    
    // –ö—É–ª—å—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'cultivation_speed': '–°–∫–æ—Ä–æ—Å—Ç—å –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏',
    'fire_cultivation': '–û–≥–Ω–µ–Ω–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    'water_cultivation': '–í–æ–¥–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    'earth_cultivation': '–ó–µ–º–ª—è–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    'air_cultivation': '–í–æ–∑–¥—É—à–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    'wood_cultivation': '–î—Ä–µ–≤–µ—Å–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    'metal_cultivation': '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    'dark_cultivation': '–¢—ë–º–Ω–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    'light_cultivation': '–°–≤–µ—Ç–ª–∞—è –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
    
    // –°—Ç–∞—Ç—ã
    'strength': '–°–∏–ª–∞',
    'agility': '–õ–æ–≤–∫–æ—Å—Ç—å',
    'endurance': '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
    'intelligence': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    'wisdom': '–ú—É–¥—Ä–æ—Å—Ç—å',
    'perception': '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ',
    
    // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'energy_regen': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
    'max_energy': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è',
    'energy_drain': '–†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏',
    
    // –ë–æ–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'attack_speed': '–°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏',
    'critical_chance': '–®–∞–Ω—Å –∫—Ä–∏—Ç–∞',
    'critical_damage': '–£—Ä–æ–Ω –∫—Ä–∏—Ç–∞',
    'dodge_chance': '–®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è',
    'block_chance': '–®–∞–Ω—Å –±–ª–æ–∫–∞',
    
    // –î–≤–∏–∂–µ–Ω–∏–µ
    'movement_speed': '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è',
    'movement_penalty': '–®—Ç—Ä–∞—Ñ –∫ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—é',
    
    // –†–µ—Å—É—Ä—Å—ã
    'gathering_speed': '–°–∫–æ—Ä–æ—Å—Ç—å —Å–±–æ—Ä–∞',
    'herb_quality': '–ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤',
    'mineral_bonus': '–ë–æ–Ω—É—Å –º–∏–Ω–µ—Ä–∞–ª–æ–≤',
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
    'market_discount': '–°–∫–∏–¥–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ',
    'sect_bonus': '–ë–æ–Ω—É—Å —Å–µ–∫—Ç—ã',
    
    // –ü—Ä–æ—á–∏–µ
    'cooldown_reduction': '–°–Ω–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏',
    'reduced_encounter': '–°–Ω–∏–∂–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á',
    'cultivation_insight': '–®–∞–Ω—Å –æ–∑–∞—Ä–µ–Ω–∏—è',
    'double_loot': '–®–∞–Ω—Å –¥–≤–æ–π–Ω–æ–π –¥–æ–±—ã—á–∏'
  };
  
  return effectNames[type] || type;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @param {String} type - –¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @returns {String} - –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
 */
function getDefaultEffectIcon(type) {
  const effectIcons = {
    // –ë–∞–∑–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'combat_damage': '‚öîÔ∏è',
    'stealth': 'üëÅÔ∏è',
    'resource_bonus': 'üì¶',
    
    // –ö—É–ª—å—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'cultivation_speed': '‚è±Ô∏è',
    'fire_cultivation': 'üî•',
    'water_cultivation': 'üíß',
    'earth_cultivation': 'üåç',
    'air_cultivation': 'üå™Ô∏è',
    'wood_cultivation': 'üå≤',
    'metal_cultivation': '‚öíÔ∏è',
    'dark_cultivation': 'üåë',
    'light_cultivation': '‚òÄÔ∏è',
    
    // –°—Ç–∞—Ç—ã
    'strength': 'üí™',
    'agility': 'üèÉ',
    'endurance': 'üõ°Ô∏è',
    'intelligence': 'üß†',
    'wisdom': 'üìö',
    'perception': 'üëÅÔ∏è',
    
    // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'energy_regen': '‚ö°',
    'max_energy': 'üîã',
    'energy_drain': '‚ö†Ô∏è',
    
    // –ë–æ–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    'attack_speed': '‚ö°',
    'critical_chance': 'üéØ',
    'critical_damage': 'üí•',
    'dodge_chance': 'üí®',
    'block_chance': 'üõ°Ô∏è',
    
    // –î–≤–∏–∂–µ–Ω–∏–µ
    'movement_speed': 'üë£',
    'movement_penalty': '‚öì',
    
    // –†–µ—Å—É—Ä—Å—ã
    'gathering_speed': '‚õèÔ∏è',
    'herb_quality': 'üåø',
    'mineral_bonus': 'üíé',
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
    'market_discount': 'üí∞',
    'sect_bonus': 'üèØ',
    
    // –ü—Ä–æ—á–∏–µ
    'cooldown_reduction': '‚è±Ô∏è',
    'reduced_encounter': 'üö∂',
    'cultivation_insight': 'üí°',
    'double_loot': 'üéÅ'
  };
  
  return effectIcons[type] || '‚ú®';
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞, —Å—É–º–º–∏—Ä—É—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
 * @param {Array} effects - –ú–∞—Å—Å–∏–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏, –≥–¥–µ –∫–ª—é—á–∏ - —Ç–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
export function mergeEffectsByType(effects) {
  if (!effects || !Array.isArray(effects) || effects.length === 0) {
    return {};
  }
  
  const mergedEffects = {};
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ —Ç–∏–ø—É –∏ —Å—É–º–º–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  for (const effect of effects) {
    if (!effect.type) continue;
    
    const type = effect.type;
    const modifier = effect.modifier || effect.value || 0;
    
    // –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (mergedEffects[type]) {
      mergedEffects[type].modifier += modifier;
      mergedEffects[type].sources.push(effect.source || 'unknown');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
      mergedEffects[type] = {
        type: type,
        modifier: modifier,
        name: effect.name || getEffectDisplayName(type),
        sources: [effect.source || 'unknown'],
        icon: effect.icon || getDefaultEffectIcon(type)
      };
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º displayValue –∏ displayType –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  for (const type in mergedEffects) {
    const effect = mergedEffects[type];
    effect.displayValue = formatModifier(effect.modifier);
    effect.displayType = getDisplayType(effect.modifier, type);
  }
  
  return mergedEffects;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –≤—ã–≤–æ–¥–∏—Ç –¥–∞–º–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * @param {Object} state - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
export function dumpEffectsState(state) {
  if (!state) {
    console.error('dumpEffectsState: State is undefined');
    return { error: 'State is undefined' };
  }
  
  const result = {
    playerEffects: state.player?.statusEffects || {},
    locationEffects: state.world?.currentLocation?.effects || [],
    sectEffects: state.player?.sect?.benefits || {},
    spiritPetEffects: (() => {
      if (!state.player?.spiritPets?.activePetId || !state.player?.spiritPets?.pets) {
        return [];
      }
      const activePet = state.player.spiritPets.pets.find(
        pet => pet.id === state.player.spiritPets.activePetId
      );
      return activePet?.effects || [];
    })(),
    effectsCount: {
      player: Object.keys(state.player?.statusEffects || {}).length,
      location: (state.world?.currentLocation?.effects || []).length,
      spiritPet: (() => {
        if (!state.player?.spiritPets?.activePetId || !state.player?.spiritPets?.pets) {
          return 0;
        }
        const activePet = state.player.spiritPets.pets.find(
          pet => pet.id === state.player.spiritPets.activePetId
        );
        return (activePet?.effects || []).length;
      })()
    }
  };
  
  console.table(result.effectsCount);
  return result;
}
