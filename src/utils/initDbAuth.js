/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
 */
import { unifiedDatabase } from '../services/database-connection-manager';
import { getInitializedUserModel } from '../models/user';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDbConnection() {
  try {
    const { db } = await unifiedDatabase.getSequelizeInstance();
    await db.authenticate();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function checkUserTable() {
  try {
    const UserModel = await getInitializedUserModel();
    const user = await UserModel.findOne();
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π users:', error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ User
 */
async function checkUserModel() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –º–æ–¥–µ–ª–∏
    const requiredFields = ['username', 'email', 'passwordHash', 'cultivationLevel', 'experience'];
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    const { db } = await unifiedDatabase.getSequelizeInstance();
    const userModel = db.models.User;
    
    if (!userModel) {
      console.error('‚ùå –ú–æ–¥–µ–ª—å User –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const missingFields = [];
    for (const field of requiredFields) {
      if (!userModel.rawAttributes[field]) {
        missingFields.push(field);
      }
    }
    
    if (missingFields.length > 0) {
      console.error(`‚ùå –í –º–æ–¥–µ–ª–∏ User –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`);
      return false;
    }
    
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ User –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ User:', error.message);
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
 */
async function runAllChecks() {
  console.log('üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  const connectionOk = await checkDbConnection();
  if (!connectionOk) {
    console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    return false;
  }
  
  const tableOk = await checkUserTable();
  const modelOk = await checkUserModel();
  
  if (connectionOk && tableOk && modelOk) {
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
    return true;
  } else {
    console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    return false;
  }
}

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
if (typeof window !== 'undefined') {
  window.checkAuthDatabase = runAllChecks;
  console.log('–§—É–Ω–∫—Ü–∏—è checkAuthDatabase –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏.');
  console.log('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∏—Ç–µ: checkAuthDatabase()');
}

export {
  checkDbConnection,
  checkUserTable,
  checkUserModel,
  runAllChecks
};