/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –∏ –±–æ–Ω—É—Å–æ–≤
 */

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –±–æ–Ω—É—Å–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
export const printEquipmentBonuses = (bonuses) => {
  if (!bonuses) {
    console.log('%cüö´ –ë–æ–Ω—É—Å—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!', 'font-weight: bold; color: red;');
    return;
  }

  console.group('%cüìä –ë–æ–Ω—É—Å—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:', 'font-weight: bold; color: gold;');

  // –ë–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
  if (bonuses.stats) {
    console.group('%c –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', 'color: aqua;');
    Object.entries(bonuses.stats).forEach(([stat, value]) => {
      const colorStyle = value > 0 
        ? 'color: green; font-weight: bold;' 
        : value < 0 
          ? 'color: red;' 
          : 'color: gray;';
      
      const statNames = {
        'strength': '–°–∏–ª–∞',
        'dexterity': '–õ–æ–≤–∫–æ—Å—Ç—å',
        'vitality': '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
        'intelligence': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        'perception': '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ',
        'luck': '–£–¥–∞—á–∞'
      };
      
      const statName = statNames[stat] || stat;
      console.log(`  ${statName}: %c${value > 0 ? '+' : ''}${value}`, colorStyle);
    });
    console.groupEnd();
  }

  // –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  if (bonuses.combat) {
    console.group('%c –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', 'color: red;');
    Object.entries(bonuses.combat).forEach(([stat, value]) => {
      const colorStyle = value > 0 
        ? 'color: green; font-weight: bold;' 
        : value < 0 
          ? 'color: red;' 
          : 'color: gray;';
          
      const statNames = {
        'physicalDamage': '–§–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω',
        'magicDamage': '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω',
        'physicalDefense': '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞',
        'magicDefense': '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞',
        'critChance': '–®–∞–Ω—Å –∫—Ä–∏—Ç. —É–¥–∞—Ä–∞',
        'critDamage': '–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç. —É–¥–∞—Ä–∞',
        'dodgeChance': '–®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è'
      };
      
      const statName = statNames[stat] || stat;
      const suffix = ['critChance', 'critDamage', 'dodgeChance'].includes(stat) ? '%' : '';
      console.log(`  ${statName}: %c${value > 0 ? '+' : ''}${value}${suffix}`, colorStyle);
    });
    console.groupEnd();
  }

  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
  if (bonuses.cultivation) {
    console.group('%c –ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è:', 'color: cyan;');
    Object.entries(bonuses.cultivation).forEach(([stat, value]) => {
      const colorStyle = value > 0 
        ? 'color: green; font-weight: bold;' 
        : value < 0 
          ? 'color: red;' 
          : 'color: gray;';
          
      const statNames = {
        'energyMax': '–ú–∞–∫—Å. —ç–Ω–µ—Ä–≥–∏—è',
        'energyRegen': '–í–æ—Å—Å—Ç. —ç–Ω–µ—Ä–≥–∏–∏',
        'comprehensionRate': '–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è',
        'breakthroughChance': '–®–∞–Ω—Å –ø—Ä–æ—Ä—ã–≤–∞'
      };
      
      const statName = statNames[stat] || stat;
      const suffix = stat === 'energyRegen' 
        ? '/—á–∞—Å' 
        : ['comprehensionRate', 'breakthroughChance'].includes(stat) 
          ? '%' 
          : '';
      console.log(`  ${statName}: %c${value > 0 ? '+' : ''}${value}${suffix}`, colorStyle);
    });
    console.groupEnd();
  }

  // –°—Ç–∏—Ö–∏–π–Ω—ã–µ –±–æ–Ω—É—Å—ã
  if (bonuses.elemental) {
    console.group('%c –°—Ç–∏—Ö–∏–π–Ω—ã–µ –±–æ–Ω—É—Å—ã:', 'color: orange;');
    Object.entries(bonuses.elemental).forEach(([element, value]) => {
      const colorStyle = value > 0 
        ? 'color: green; font-weight: bold;' 
        : value < 0 
          ? 'color: red;' 
          : 'color: gray;';
          
      const elementNames = {
        'fire': '–û–≥–æ–Ω—å',
        'water': '–í–æ–¥–∞',
        'earth': '–ó–µ–º–ª—è',
        'air': '–í–æ–∑–¥—É—Ö',
        'light': '–°–≤–µ—Ç',
        'dark': '–¢—å–º–∞'
      };
      
      const elementName = elementNames[element] || element;
      console.log(`  ${elementName}: %c${value > 0 ? '+' : ''}${value}`, colorStyle);
    });
    console.groupEnd();
  }

  // –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  if (bonuses.special && bonuses.special.length > 0) {
    console.group('%c –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:', 'color: magenta;');
    bonuses.special.forEach(effect => {
      console.log(`  %c${effect.name}:%c ${effect.description}`, 'color: yellow; font-weight: bold;', 'color: white;');
    });
    console.groupEnd();
  }

  console.groupEnd();
};

// –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
export const printEquippedItems = (equippedItems) => {
  if (!equippedItems || Object.keys(equippedItems).length === 0) {
    console.log('%cüö´ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!', 'font-weight: bold; color: red;');
    return;
  }

  console.group('%c‚öîÔ∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:', 'font-weight: bold; color: gold;');

  Object.entries(equippedItems).forEach(([slot, item]) => {
    if (!item) return;

    const slotNames = {
      'weapon': '–û—Ä—É–∂–∏–µ',
      'headArmor': '–ì–æ–ª–æ–≤–∞',
      'bodyArmor': '–¢–µ–ª–æ',
      'handArmor': '–†—É–∫–∏',
      'legArmor': '–ù–æ–≥–∏',
      'accessory1': '–ê–∫—Å–µ—Å—Å—É–∞—Ä 1',
      'accessory2': '–ê–∫—Å–µ—Å—Å—É–∞—Ä 2',
      'artifact1': '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç 1',
      'artifact2': '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç 2'
    };

    const rarityColors = {
      'common': 'white',
      'uncommon': '#1eff00',
      'rare': '#0070dd',
      'epic': '#a335ee',
      'legendary': '#ff8000'
    };

    const slotName = slotNames[slot] || slot;
    const rarityColor = rarityColors[item.rarity] || 'white';

    console.group(`%c${slotName}: %c${item.name}`, 'color: gray;', `color: ${rarityColor}; font-weight: bold;`);
    console.log(`  ID: ${item.id || item.itemId}`);
    console.log(`  –¢–∏–ø: ${item.type}`);
    console.log(`  –†–µ–¥–∫–æ—Å—Ç—å: %c${item.rarity}`, `color: ${rarityColor};`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
    if (item.calculatedBonuses) {
      console.log(`  %c‚úÖ –ò–º–µ–µ—Ç –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã`, 'color: green; font-weight: bold;');
    } else {
      console.log(`  %c‚ùå –ù–µ –∏–º–µ–µ—Ç –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤`, 'color: red;');
    }
    
    console.groupEnd();
  });

  console.groupEnd();
};

// –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
export const debugEquipment = (state) => {
  console.group('%cüõ°Ô∏è –û–¢–õ–ê–î–ö–ê –≠–ö–ò–ü–ò–†–û–í–ö–ò', 'font-size: 16px; font-weight: bold; color: gold;');

  if (state && state.player) {
    // –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –±–æ–Ω—É—Å–æ–≤
    printEquipmentBonuses(state.player.equipmentBonuses);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const equippedItems = {};
    
    if (state.player.inventory && state.player.inventory.items) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
      state.player.inventory.items.forEach(item => {
        if (!item.equipped) return;
        
        switch(item.type) {
          case 'weapon':
            equippedItems.weapon = item;
            break;
          case 'armor':
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ç–∏–ø –±—Ä–æ–Ω–∏
            const armorType = item.properties?.armorType || item.armorType;
            const itemName = item.name.toLowerCase();
            
            if (armorType === 'head' || (!armorType && (itemName.includes('—à–ª–µ–º') || itemName.includes('—à–∞–ø–∫–∞')))) {
              equippedItems.headArmor = item;
            }
            else if (armorType === 'legs' || (!armorType && (itemName.includes('—Å–∞–ø–æ–≥') || itemName.includes('–±–æ—Ç–∏–Ω')))) {
              equippedItems.legArmor = item;
            }
            else if (armorType === 'hands' || (!armorType && (itemName.includes('–ø–µ—Ä—á–∞—Ç') || itemName.includes('—Ä—É–∫–∞–≤')))) {
              equippedItems.handArmor = item;
            }
            else {
              equippedItems.bodyArmor = item;
            }
            break;
          case 'accessory':
            if (!equippedItems.accessory1) {
              equippedItems.accessory1 = item;
            } else if (!equippedItems.accessory2) {
              equippedItems.accessory2 = item;
            }
            break;
          case 'artifact':
            if (!equippedItems.artifact1) {
              equippedItems.artifact1 = item;
            } else if (!equippedItems.artifact2) {
              equippedItems.artifact2 = item;
            }
            break;
        }
      });
      
      // –í—ã–≤–æ–¥ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      printEquippedItems(equippedItems);
    } else {
      console.log('%c‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!', 'color: red; font-weight: bold;');
    }
  } else {
    console.log('%c‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞!', 'color: red; font-weight: bold;');
  }

  console.groupEnd();
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
export default {
  printEquipmentBonuses,
  printEquippedItems,
  debugEquipment
};
