/**
 * –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–≤–µ—Å—Ç–∞—Ö
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–∞—Ö —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–µ—Å—Ç–∞–º–∏
const QuestAdapter = require('../services/quest-adapter');

// –í CommonJS –Ω–µ–ª—å–∑—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –∏–∑ –∫–ª–∞—Å—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä–∞
const adapterGetAllQuests = QuestAdapter.getAllQuests || function() { return []; };
const adapterGetQuestById = QuestAdapter.getQuestById || function() { return null; };
const adapterGetQuestsByCategory = QuestAdapter.getQuestsByCategory || function() { return []; };
const adapterGetQuestsByStatus = QuestAdapter.getQuestsByStatus || function() { return []; };
const adapterGetUserQuestProgress = QuestAdapter.getUserQuestProgress || function() { return []; };
const adapterStartQuest = QuestAdapter.startQuest || function() { return false; };
const adapterUpdateQuestProgress = QuestAdapter.updateQuestProgress || function() { return false; };
const adapterCompleteQuest = QuestAdapter.completeQuest || function() { return false; };
const adapterCreateQuest = QuestAdapter.createQuest || function() { return null; };
const adapterUpdateQuest = QuestAdapter.updateQuest || function() { return false; };
const adapterDeleteQuest = QuestAdapter.deleteQuest || function() { return false; };

// –¢–∏–ø –∫–≤–µ—Å—Ç–æ–≤
const QUEST_TYPES = {
  MAIN: 'main',           // –û—Å–Ω–æ–≤–Ω–æ–π —Å—é–∂–µ—Ç
  SIDE: 'side',           // –ü–æ–±–æ—á–Ω—ã–µ
  DAILY: 'daily',         // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ
  SPECIAL: 'special',     // –û—Å–æ–±—ã–µ
  EVENT: 'event'          // –°–æ–±—ã—Ç–∏–π–Ω—ã–µ
};

// –°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–≤–µ—Å—Ç–æ–≤
const QUEST_DIFFICULTY = {
  TRIVIAL: 'trivial',     // –¢—Ä–∏–≤–∏–∞–ª—å–Ω–∞—è
  EASY: 'easy',           // –õ—ë–≥–∫–∞—è
  MEDIUM: 'medium',       // –°—Ä–µ–¥–Ω—è—è
  HARD: 'hard',           // –°–ª–æ–∂–Ω–∞—è
  VERY_HARD: 'very_hard', // –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è
  EPIC: 'epic'            // –≠–ø–∏—á–µ—Å–∫–∞—è
};

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let quests = [];

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–¥–∞—á –∏–∑ –ë–î
// –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function getObjectivesFromDB(quest) {
  try {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ steps —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ JSON –≤ –ø–æ–ª–µ rewards –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
    const stepsData = JSON.parse(quest.steps || '[]');
    return stepsData.map(step => ({
      id: `q${quest.id}_obj${step.id}`,
      text: step.description,
      completed: step.completed || false
    }));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–¥–∞—á –∫–≤–µ—Å—Ç–∞:', e);
    return [];
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∏–∑ –ë–î
// –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function getRewardsFromDB(quest) {
  try {
    const rewardsData = JSON.parse(quest.rewards || '{}');
    const rewards = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (rewardsData.experience) {
      rewards.push({
        type: 'experience',
        amount: rewardsData.experience,
        icon: '‚ú®'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (rewardsData.currency) {
      rewards.push({
        type: 'currency',
        amount: rewardsData.currency,
        icon: 'üí∞'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (rewardsData.items && Array.isArray(rewardsData.items)) {
      rewardsData.items.forEach(item => {
        rewards.push({
          type: 'item',
          id: item.id,
          name: item.name,
          amount: item.amount || 1,
          icon: item.icon || 'üì¶'
        });
      });
    }
    
    return rewards;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞–≥—Ä–∞–¥ –∫–≤–µ—Å—Ç–∞:', e);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
 */
async function getAllQuests() {
  try {
    const allQuests = await adapterGetAllQuests();
    quests = allQuests; // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    return allQuests;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–æ–≤:', error);
    return quests; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –ø–æ ID
 * @param {string} id ID –∫–≤–µ—Å—Ç–∞
 * @returns {Promise<Object|null>} –û–±—ä–µ–∫—Ç –∫–≤–µ—Å—Ç–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
async function getQuestById(id) {
  try {
    return await adapterGetQuestById(id);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ —Å ID ${id}:`, error);
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ
    return quests.find(q => q.id === id) || null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} category –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–≤–µ—Å—Ç–∞ –∏–∑ QUEST_TYPES
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
async function getQuestsByCategory(category) {
  try {
    return await adapterGetQuestsByCategory(category);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`, error);
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à
    return quests.filter(q => q.type === category);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
 * @param {string} status –°—Ç–∞—Ç—É—Å –∫–≤–µ—Å—Ç–∞ ('available', 'active', 'completed')
 * @param {string} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
 */
async function getQuestsByStatus(status, userId) {
  try {
    return await adapterGetQuestsByStatus(status, userId);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status}:`, error);
    return []; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–≤–µ—Å—Ç—É
 * @param {string} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} questId ID –∫–≤–µ—Å—Ç–∞
 * @returns {Promise<Object|null>} –û–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–ª–∏ null
 */
async function getUserQuestProgress(userId, questId) {
  try {
    return await adapterGetUserQuestProgress(userId, questId);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞ ${questId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
}

/**
 * –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} questId ID –∫–≤–µ—Å—Ç–∞
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function startQuest(userId, questId) {
  try {
    return await adapterStartQuest(userId, questId);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∫–≤–µ—Å—Ç–∞ ${questId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
 * @param {string} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} questId ID –∫–≤–µ—Å—Ç–∞
 * @param {Object} progress –û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function updateQuestProgress(userId, questId, progress) {
  try {
    return await adapterUpdateQuestProgress(userId, questId, progress);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞ ${questId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    throw error;
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç
 * @param {string} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} questId ID –∫–≤–µ—Å—Ç–∞
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
 */
async function completeQuest(userId, questId) {
  try {
    return await adapterCompleteQuest(userId, questId);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ ${questId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
 * @param {Object} questData –î–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞
 * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
 */
async function createQuest(questData) {
  try {
    const newQuest = await adapterCreateQuest(questData);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    quests.push(newQuest);
    return newQuest;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–≤–µ—Å—Ç
 * @param {string} id ID –∫–≤–µ—Å—Ç–∞
 * @param {Object} updates –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è
 * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
 */
async function updateQuest(id, updates) {
  try {
    const updatedQuest = await adapterUpdateQuest(id, updates);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    const index = quests.findIndex(q => q.id === id);
    if (index !== -1) {
      quests[index] = updatedQuest;
    }
    return updatedQuest;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ —Å ID ${id}:`, error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç
 * @param {string} id ID –∫–≤–µ—Å—Ç–∞
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function deleteQuest(id) {
  try {
    const result = await adapterDeleteQuest(id);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    const index = quests.findIndex(q => q.id === id);
    if (index !== -1) {
      quests.splice(index, 1);
    }
    return result;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ —Å ID ${id}:`, error);
    throw error;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
(async function() {
  try {
    quests = await getAllQuests();
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${quests.length} –∫–≤–µ—Å—Ç–æ–≤`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤:', error);
  }
})();

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
module.exports = {
  QUEST_TYPES,
  QUEST_DIFFICULTY,
  quests,
  getAllQuests,
  getQuestById,
  getQuestsByCategory,
  getQuestsByStatus,
  getUserQuestProgress,
  startQuest,
  updateQuestProgress, 
  completeQuest,
  createQuest,
  updateQuest,
  deleteQuest,
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  getObjectivesFromDB,
  getRewardsFromDB
};
