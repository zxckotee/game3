/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞–≥–∞—Ö –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
 */

const EnemyAPI = require('../services/enemy-api');

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ API
const enemyRanks = EnemyAPI.enemyRanks;

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
let enemiesCache = [];
let initialized = false;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
const defaultTimeModifiers = {
  '—Ä–∞—Å—Å–≤–µ—Ç': {
    'spirit_beast': 1.2,
    'bandit': 0.8,
    'undead': 0.5,
    'elemental': 1.1
  },
  '—É—Ç—Ä–æ': {
    'spirit_beast': 1.1,
    'bandit': 1.0,
    'undead': 0.3,
    'elemental': 1.0
  },
  '–ø–æ–ª–¥–µ–Ω—å': {
    'spirit_beast': 1.0,
    'bandit': 1.2,
    'undead': 0.2,
    'elemental': 0.9
  },
  '–¥–µ–Ω—å': {
    'spirit_beast': 1.0,
    'bandit': 1.2,
    'undead': 0.1,
    'elemental': 0.8
  },
  '–≤–µ—á–µ—Ä': {
    'spirit_beast': 1.1,
    'bandit': 1.0,
    'undead': 0.7,
    'elemental': 1.0
  },
  '–Ω–æ—á—å': {
    'spirit_beast': 0.8,
    'bandit': 0.6,
    'undead': 1.5,
    'elemental': 1.2
  }
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã
const defaultWeatherModifiers = {
  '–Ø—Å–Ω–æ': {
    'spirit_beast': 1.0,
    'bandit': 1.1,
    'undead': 0.9,
    'elemental': 1.0
  },
  '–û–±–ª–∞—á–Ω–æ': {
    'spirit_beast': 1.0,
    'bandit': 1.0,
    'undead': 1.0,
    'elemental': 1.0
  },
  '–î–æ–∂–¥—å': {
    'spirit_beast': 0.8,
    'bandit': 0.7,
    'undead': 1.0,
    'elemental': 1.2,
    'water_elemental': 1.5
  },
  '–ì—Ä–æ–∑–∞': {
    'spirit_beast': 0.6,
    'bandit': 0.5,
    'undead': 1.1,
    'elemental': 1.3,
    'lightning_elemental': 2.0
  },
  '–¢—É–º–∞–Ω': {
    'spirit_beast': 0.9,
    'bandit': 1.1,
    'undead': 1.3,
    'elemental': 0.8,
    'ghost': 1.6
  },
  '–°–Ω–µ–≥': {
    'spirit_beast': 0.7,
    'bandit': 0.6,
    'undead': 0.9,
    'elemental': 1.1,
    'ice_elemental': 1.8
  }
};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å null
let timeModifiersCache = defaultTimeModifiers;
let weatherModifiersCache = defaultWeatherModifiers;

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–∞–≥–∞—Ö –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
const fallbackEnemies = [
  {
    id: 'training_dummy',
    name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω',
    icon: 'üéØ',
    description: '–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–∞–Ω–µ–∫–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤.',
    level: 1,
    category: 'construct',
    experience: 10,
    stats: {
      health: 100,
      attack: 0,
      defense: 5, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      physicalDefense: 5, // –§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞
      spiritualDefense: 5, // –î–ª—è –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–≥–æ –º–∞–Ω–µ–∫–µ–Ω–∞ –ª–æ–≥–∏—á–Ω–µ–µ –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞—â–∏—Ç—ã
      speed: 0,
      resistance: 5,
      criticalChance: 0,
      accuracy: 10, // –ë–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (–º–∞–Ω–µ–∫–µ–Ω –Ω–µ–ø–æ–¥–≤–∏–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É –Ω–∏–∑–∫–∞—è)
      evasion: 0   // –ú–∞–Ω–µ–∫–µ–Ω –Ω–µ —É–∫–ª–æ–Ω—è–µ—Ç—Å—è
    },
    attacks: [
      {
        name: "–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞",
        damage: 5,
        damageType: "physical",
        energyCost: 0
      }
    ],
    currency: {
      min: 1,
      max: 3
    },
    loot: []
  },
  {
    id: 'weak_spirit_beast',
    name: '–°–ª–∞–±—ã–π –¥—É—Ö–æ–≤–Ω—ã–π –∑–≤–µ—Ä—å',
    icon: 'üêæ',
    description: '–ú–æ–ª–æ–¥–æ–π –¥—É—Ö–æ–≤–Ω—ã–π –∑–≤–µ—Ä—å, —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–≤—à–∏–π —Å–≤–æ–π –ø—É—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è.',
    level: 3,
    category: 'spirit_beast',
    experience: 25,
    stats: {
      health: 150,
      attack: 15,
      defense: 8, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      physicalDefense: 8, // –§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç defense)
      spiritualDefense: 10, // –î—É—Ö–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ —á—É—Ç—å –≤—ã—à–µ –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ –∑–≤–µ—Ä—è
      speed: 12,
      resistance: 10,
      criticalChance: 0.05,
      accuracy: 20, // –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å
      evasion: 15   // –•–æ—Ä–æ—à–µ–µ —É–∫–ª–æ–Ω–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    },
    attacks: [
      {
        name: "–£–∫—É—Å",
        damage: 10,
        damageType: "physical",
        energyCost: 0
      },
      {
        name: "–î—É—Ö–æ–≤–Ω—ã–π —Ä—ã–∫",
        damage: 15,
        damageType: "spiritual",
        energyCost: 10
      }
    ],
    currency: {
      min: 5,
      max: 10
    },
    loot: []
  },
  {
    id: 'mountain_bandit',
    name: '–ì–æ—Ä–Ω—ã–π —Ä–∞–∑–±–æ–π–Ω–∏–∫',
    icon: 'üó°Ô∏è',
    description: '–ë–∞–Ω–¥–∏—Ç, –ø—Ä–æ–º—ã—à–ª—è—é—â–∏–π –Ω–∞ –≥–æ—Ä–Ω—ã—Ö —Ç—Ä–æ–ø–∞—Ö. –í–ª–∞–¥–µ–µ—Ç –±–∞–∑–æ–≤—ã–º–∏ –±–æ–µ–≤—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏.',
    level: 5,
    category: 'bandit',
    experience: 50,
    stats: {
      health: 200,
      attack: 25,
      defense: 15, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      physicalDefense: 15, // –§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –±–∞–Ω–¥–∏—Ç–∞
      spiritualDefense: 5, // –ù–∏–∑–∫–∞—è –¥—É—Ö–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞
      speed: 10,
      resistance: 5,
      criticalChance: 0.08,
      accuracy: 25, // –¢–æ—á–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
      evasion: 12  // –£–∫–ª–æ–Ω–µ–Ω–∏–µ
    },
    attacks: [
      {
        name: "–£–¥–∞—Ä –º–µ—á–æ–º",
        damage: 20,
        damageType: "physical",
        energyCost: 0
      },
      {
        name: "–°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–ø–∞–¥",
        damage: 25,
        damageType: "physical",
        energyCost: 15
      }
    ],
    currency: {
      min: 20,
      max: 40
    },
    loot: [
      {
        itemId: "iron_sword",
        chance: 10
      }
    ]
  },
  {
    id: 'ancient_guardian',
    name: '–î—Ä–µ–≤–Ω–∏–π —Å—Ç—Ä–∞–∂',
    icon: 'üëπ',
    description: '–î—É—Ö–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å, –æ—Ö—Ä–∞–Ω—è—é—â–∞—è —Ä—É–∏–Ω—ã –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏.',
    level: 10,
    category: 'elemental',
    experience: 100,
    stats: {
      health: 350,
      attack: 40,
      defense: 30,
      speed: 15,
      resistance: 25,
      criticalChance: 0.1
    },
    attacks: [
      {
        name: "–ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ",
        damage: 30,
        damageType: "spiritual",
        energyCost: 0
      },
      {
        name: "–î—Ä–µ–≤–Ω–µ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ",
        damage: 45,
        damageType: "spiritual",
        energyCost: 25
      }
    ],
    currency: {
      min: 50,
      max: 100
    },
    loot: [
      {
        itemId: "ancient_relic",
        chance: 5
      },
      {
        itemId: "spirit_essence",
        chance: 20
      }
    ]
  },
  {
    id: 'night_wraith',
    name: '–ù–æ—á–Ω–æ–π –ø—Ä–∏–∑—Ä–∞–∫',
    icon: 'üëª',
    description: '–ú—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥—É—Ö, –ø–æ—è–≤–ª—è—é—â–∏–π—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω–æ—á–Ω–æ–π —Ç—å–º–µ.',
    level: 7,
    category: 'undead',
    experience: 70,
    stats: {
      health: 220,
      attack: 35,
      defense: 10,
      speed: 20,
      resistance: 30,
      criticalChance: 0.15
    },
    attacks: [
      {
        name: "–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ —Ç—å–º—ã",
        damage: 25,
        damageType: "spiritual",
        energyCost: 0
      },
      {
        name: "–í–æ–ø–ª—å —É–∂–∞—Å–∞",
        damage: 35,
        damageType: "spiritual",
        energyCost: 20
      }
    ],
    currency: {
      min: 30,
      max: 60
    },
    loot: [
      {
        itemId: "ghost_essence",
        chance: 40
      },
      {
        itemId: "night_pearl",
        chance: 15
      }
    ]
  },
  {
    id: 'water_elemental',
    name: '–í–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å',
    icon: 'üíß',
    description: '–°—É—â–µ—Å—Ç–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –∂–∏–≤–æ–π –≤–æ–¥—ã. –û—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–æ –≤–æ –≤—Ä–µ–º—è –¥–æ–∂–¥—è.',
    level: 6,
    category: 'water_elemental',
    experience: 65,
    stats: {
      health: 250,
      attack: 30,
      defense: 20,
      speed: 18,
      resistance: 35,
      criticalChance: 0.08
    },
    attacks: [
      {
        name: "–í–æ–¥—è–Ω–æ–π –∫–Ω—É—Ç",
        damage: 25,
        damageType: "water",
        energyCost: 0
      },
      {
        name: "–ü–æ—Ç–æ–∫",
        damage: 35,
        damageType: "water",
        energyCost: 25
      }
    ],
    currency: {
      min: 25,
      max: 50
    },
    loot: [
      {
        itemId: "water_essence",
        chance: 40
      },
      {
        itemId: "pure_dewdrop",
        chance: 25
      }
    ]
  },
  {
    id: 'lightning_spirit',
    name: '–î—É—Ö –º–æ–ª–Ω–∏–∏',
    icon: '‚ö°',
    description: '–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ, —á–µ—Ä–ø–∞—é—â–µ–µ —Å–∏–ª—É –∏–∑ –≥—Ä–æ–∑–æ–≤—ã—Ö –æ–±–ª–∞–∫–æ–≤.',
    level: 8,
    category: 'lightning_elemental',
    experience: 80,
    stats: {
      health: 200,
      attack: 45,
      defense: 15,
      speed: 25,
      resistance: 20,
      criticalChance: 0.12
    },
    attacks: [
      {
        name: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä—è–¥",
        damage: 30,
        damageType: "lightning",
        energyCost: 0
      },
      {
        name: "–¶–µ–ø–Ω–∞—è –º–æ–ª–Ω–∏—è",
        damage: 40,
        damageType: "lightning",
        energyCost: 30
      }
    ],
    currency: {
      min: 35,
      max: 70
    },
    loot: [
      {
        itemId: "lightning_essence",
        chance: 35
      },
      {
        itemId: "thunder_crystal",
        chance: 20
      }
    ]
  }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
enemiesCache = fallbackEnemies;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {Promise<Array>} –ü—Ä–æ–º–∏—Å —Å –º–∞—Å—Å–∏–≤–æ–º –≤—Ä–∞–≥–æ–≤
 */
async function getAllEnemies() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const enemies = await EnemyAPI.getAllEnemies();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    enemiesCache = enemies;
    initialized = true;
    
    return enemies;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–∞–≥–æ–≤ —á–µ—Ä–µ–∑ API:', error);
    return enemiesCache;
  }
}
console.log(EnemyAPI.getAllEnemies());

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–∞–≥–∞ –ø–æ ID
 * @param {string} id - ID –≤—Ä–∞–≥–∞
 * @returns {Promise<Object|null>} –ü—Ä–æ–º–∏—Å —Å –≤—Ä–∞–≥–æ–º –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
async function getEnemyById(id) {
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (initialized && enemiesCache.length > 0) {
    const cachedEnemy = enemiesCache.find(enemy => enemy.id === id);
    if (cachedEnemy) {
      return cachedEnemy;
    }
  }
  
  try {
    return await EnemyAPI.getEnemyById(id);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–∞ —Å ID ${id} —á–µ—Ä–µ–∑ API:`, error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–∞–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Ä–∞–≥–æ–≤
 * @returns {Promise<Array>} –ü—Ä–æ–º–∏—Å —Å –º–∞—Å—Å–∏–≤–æ–º –≤—Ä–∞–≥–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
async function getEnemiesByCategory(category) {
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (initialized && enemiesCache.length > 0) {
    const cachedEnemies = enemiesCache.filter(enemy => enemy.category === category);
    if (cachedEnemies.length > 0) {
      return cachedEnemies;
    }
  }
  
  try {
    return await EnemyAPI.getEnemiesByCategory(category);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category} —á–µ—Ä–µ–∑ API:`, error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–∞–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
 * @param {string} locationId - ID –ª–æ–∫–∞—Ü–∏–∏
 * @returns {Promise<Array>} –ü—Ä–æ–º–∏—Å —Å –º–∞—Å—Å–∏–≤–æ–º –≤—Ä–∞–≥–æ–≤
 */
async function getEnemiesByLocation(locationId) {
  try {
    return await EnemyAPI.getEnemiesByLocation(locationId);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–∞–≥–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${locationId} —á–µ—Ä–µ–∑ API:`, error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –¥–ª—è –≤—Ä–∞–≥–æ–≤
 * @returns {Promise<Object>} –ü—Ä–æ–º–∏—Å —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
 */
async function getTimeOfDaySpawnModifiers() {
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (timeModifiersCache) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫');
    return timeModifiersCache;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  try {
    // –¢–∞–π–º–∞—É—Ç –≤ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const apiCheckPromise = EnemyAPI.isApiAvailable();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 1 —Å–µ–∫—É–Ω–¥—É
    const apiAvailable = await Promise.race([
      apiCheckPromise,
      new Promise(resolve => setTimeout(() => resolve(false), 1000))
    ]);
    
    if (!apiAvailable) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      return defaultTimeModifiers;
    }
    
    // API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    const modifiers = await EnemyAPI.getTimeOfDaySpawnModifiers();
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
    if (!modifiers || Object.keys(modifiers).length === 0) {
      console.warn('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      return defaultTimeModifiers;
    }
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    console.log('–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
    timeModifiersCache = modifiers;
    return modifiers;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ —á–µ—Ä–µ–∑ API:', error);
    // –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ
    return defaultTimeModifiers;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—Ä–∞–≥–æ–≤
 * @returns {Promise<Object>} –ü—Ä–æ–º–∏—Å —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–≥–æ–¥—ã
 */
async function getWeatherSpawnModifiers() {
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (weatherModifiersCache) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã');
    return weatherModifiersCache;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  try {
    // –¢–∞–π–º–∞—É—Ç –≤ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const apiCheckPromise = EnemyAPI.isApiAvailable();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 1 —Å–µ–∫—É–Ω–¥—É
    const apiAvailable = await Promise.race([
      apiCheckPromise,
      new Promise(resolve => setTimeout(() => resolve(false), 1000))
    ]);
    
    if (!apiAvailable) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–≥–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      return defaultWeatherModifiers;
    }
    
    // API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    const modifiers = await EnemyAPI.getWeatherSpawnModifiers();
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
    if (!modifiers || Object.keys(modifiers).length === 0) {
      console.warn('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      return defaultWeatherModifiers;
    }
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    console.log('–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
    weatherModifiersCache = modifiers;
    return modifiers;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ API:', error);
    // –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ
    return defaultWeatherModifiers;
  }
}

/**
 * –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
 */
const RETRY_TIMEOUT = 5000;

/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */
const MAX_RETRIES = 3;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–∞–≥–∞—Ö, –∑–∞–≥—Ä—É–∂–∞—è –∏—Ö —á–µ—Ä–µ–∑ API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * @param {number} retryCount - –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise<boolean>} - –ü—Ä–æ–º–∏—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initEnemyData(retryCount = 0) {
  console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞–≥–∞—Ö —á–µ—Ä–µ–∑ API... (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    const apiAvailable = await EnemyAPI.isApiAvailable();
    if (!apiAvailable) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      enemiesCache = fallbackEnemies;
      initialized = true;
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å ${enemiesCache.length} –≤—Ä–∞–≥–∞–º–∏`);
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–∞–≥–∞—Ö
    const enemies = await getAllEnemies();
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!enemies || enemies.length === 0) {
      console.warn('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤—Ä–∞–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      enemiesCache = fallbackEnemies;
    } else {
      console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${enemies.length} –≤—Ä–∞–≥–æ–≤ —á–µ—Ä–µ–∑ API`);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ "–≥–æ–Ω–∫–∏"
    try {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫...');
      timeModifiersCache = await getTimeOfDaySpawnModifiers();
      console.log('–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–≥–æ–¥—ã...');
      weatherModifiersCache = await getWeatherSpawnModifiers();
      console.log('–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (modifierError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:', modifierError);
      console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');
      // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    initialized = true;
    console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞–≥–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω–æ ${enemiesCache.length} –≤—Ä–∞–≥–æ–≤`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞–≥–∞—Ö:', error);
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (retryCount >= MAX_RETRIES) {
      console.warn(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (${MAX_RETRIES}), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
      enemiesCache = fallbackEnemies;
      initialized = true;
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å ${enemiesCache.length} –≤—Ä–∞–≥–∞–º–∏`);
      return false;
    }
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${RETRY_TIMEOUT / 1000} —Å–µ–∫...`);
    return new Promise(resolve => {
      setTimeout(() => {
        initEnemyData(retryCount + 1).then(resolve);
      }, RETRY_TIMEOUT);
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
initEnemyData().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞–≥–æ–≤:', error);
  console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏');
  enemiesCache = fallbackEnemies;
  initialized = true;
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
module.exports = {
  enemyRanks,
  enemies: enemiesCache, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–∞–≥–∏ –∫–∞–∫ enemies
  fallbackEnemies, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ
  getAllEnemies,
  getEnemyById,
  getEnemiesByCategory,
  getEnemiesByLocation,
  getTimeOfDaySpawnModifiers,
  getWeatherSpawnModifiers,
  getModifiedEnemySpawns, // –í–∞–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
  initEnemyData
};

// –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
if (typeof window !== 'undefined') {
  initEnemyData().catch(error => {
    console.warn('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞–≥–∞—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    console.info('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–∞–≥–∞—Ö');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
    enemiesCache = fallbackEnemies;
    initialized = true;
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã
 * @param {string} locationId - ID –ª–æ–∫–∞—Ü–∏–∏
 * @param {string} timeOfDay - –í—Ä–µ–º—è —Å—É—Ç–æ–∫ ('—Ä–∞—Å—Å–≤–µ—Ç', '—É—Ç—Ä–æ', '–ø–æ–ª–¥–µ–Ω—å', '–¥–µ–Ω—å', '–≤–µ—á–µ—Ä', '–Ω–æ—á—å')
 * @param {string} weatherType - –¢–∏–ø –ø–æ–≥–æ–¥—ã ('–Ø—Å–Ω–æ', '–û–±–ª–∞—á–Ω–æ', '–î–æ–∂–¥—å', '–ì—Ä–æ–∑–∞', '–¢—É–º–∞–Ω', '–°–Ω–µ–≥')
 * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤
 */
function getModifiedEnemySpawns(locationId, timeOfDay, weatherType) {
  console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤ –¥–ª—è: –ª–æ–∫–∞—Ü–∏—è=${locationId}, –≤—Ä–µ–º—è=${timeOfDay}, –ø–æ–≥–æ–¥–∞=${weatherType}`);
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
    const knownLocations = {
      'starting_area': [
        { id: 'training_dummy', minLevel: 1, maxLevel: 2, weight: 70 },
        { id: 'weak_spirit_beast', minLevel: 3, maxLevel: 4, weight: 30 }
      ],
      'mountain_path': [
        { id: 'weak_spirit_beast', minLevel: 3, maxLevel: 5, weight: 40 },
        { id: 'mountain_bandit', minLevel: 5, maxLevel: 7, weight: 60 }
      ],
      'ancient_ruins': [
        { id: 'ancient_guardian', minLevel: 8, maxLevel: 10, weight: 50 },
        { id: 'ruin_spirit', minLevel: 7, maxLevel: 9, weight: 40 },
        { id: 'treasure_hunter', minLevel: 6, maxLevel: 8, weight: 30 }
      ],
      'forest_lake': [
        { id: 'water_elemental', minLevel: 7, maxLevel: 9, weight: 50 },
        { id: 'forest_wolf', minLevel: 5, maxLevel: 7, weight: 40 },
        { id: 'swamp_creature', minLevel: 8, maxLevel: 10, weight: 30 }
      ]
    };
    
    let baseEnemies = [];
    if (knownLocations[locationId]) {
      baseEnemies = knownLocations[locationId];
    } else {
      console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Ä–∞–≥–∏ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${locationId}`);
      return [];
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–≥–æ–¥—ã
    if (!timeOfDay || !timeModifiersCache[timeOfDay]) {
      console.warn(`–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ '${timeOfDay}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä '–¥–µ–Ω—å'`);
      timeOfDay = '–¥–µ–Ω—å';
    }
    
    if (!weatherType || !weatherModifiersCache[weatherType]) {
      console.warn(`–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–≥–æ–¥—ã '${weatherType}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä '–Ø—Å–Ω–æ'`);
      weatherType = '–Ø—Å–Ω–æ';
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:', timeOfDay, timeModifiersCache[timeOfDay]);
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–≥–æ–¥—ã:', weatherType, weatherModifiersCache[weatherType]);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–æ—á–µ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    const modifiedSpawns = baseEnemies.map(enemy => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—Ä–∞–≥–∞ –ø–æ ID
      let category = 'normal';
      const id = enemy.id || '';
      
      // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (id.includes('water_elemental')) category = 'water_elemental';
      else if (id.includes('lightning_elemental')) category = 'lightning_elemental';
      else if (id.includes('ice_elemental')) category = 'ice_elemental';
      else if (id.includes('elemental')) category = 'elemental';
      else if (id.includes('spirit')) category = 'spirit_beast';
      else if (id.includes('bandit')) category = 'bandit';
      else if (id.includes('ghost')) category = 'ghost';
      else if (id.includes('undead')) category = 'undead';
      
      console.log(`–í—Ä–∞–≥ ${id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${category}`);
      
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–µ—Å 50, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
      const baseWeight = enemy.weight || enemy.spawnWeight || enemy.spawnChance || 50;
      
      // –ù–∞—á–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä = 1.0 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
      let weightModifier = 1.0;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (timeModifiersCache[timeOfDay] && timeModifiersCache[timeOfDay][category]) {
        weightModifier *= timeModifiersCache[timeOfDay][category];
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–≥–æ–¥—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (weatherModifiersCache[weatherType] && weatherModifiersCache[weatherType][category]) {
        weightModifier *= weatherModifiersCache[weatherType][category];
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å, –º–∏–Ω–∏–º—É–º 5%
      const modifiedWeight = Math.max(5, Math.floor(baseWeight * weightModifier));
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–∞–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–æ—á–∫–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
      return {
        id: enemy.id,
        minLevel: enemy.minLevel || enemy.level || 1,
        maxLevel: enemy.maxLevel || enemy.level || 1,
        weight: modifiedWeight,
        name: enemy.name || enemy.id,
        icon: enemy.icon || 'üëπ',
        category: category
      };
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Å–∞
    return modifiedSpawns.sort((a, b) => b.weight - a.weight);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
module.exports.enemyRanks = enemyRanks;
module.exports.getAllEnemies = getAllEnemies;
module.exports.getEnemyById = getEnemyById;
module.exports.getEnemiesByCategory = getEnemiesByCategory;
module.exports.getEnemiesByLocation = getEnemiesByLocation;
module.exports.getTimeOfDaySpawnModifiers = getTimeOfDaySpawnModifiers;
module.exports.getWeatherSpawnModifiers = getWeatherSpawnModifiers;
module.exports.getModifiedEnemySpawns = getModifiedEnemySpawns;
module.exports.initEnemyData = initEnemyData;
module.exports.enemies = enemiesCache;