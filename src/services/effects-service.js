const { Sequelize, Op } = require('sequelize');
const modelRegistry = require('../models/registry');
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
 */
class EffectsService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
   */
  static async getAllEffects(userId) {
    try {
      await modelRegistry.initializeRegistry();
      const User = modelRegistry.getModel('User');
      const Effect = modelRegistry.getModel('Effect');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByPk(userId);
      if (!user) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const effects = await Effect.findAll({
        where: { user_id: userId },
        order: [['source_type', 'ASC'], ['type', 'ASC']]
      });

      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
      await this.removeExpiredEffects(userId);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      const groupedEffects = {
        technique: [],
        weather: [],
        sect: [],
        equipment: [],
        pet: [],
        status: []
      };

      effects.forEach(effect => {
        if (groupedEffects[effect.source_type]) {
          groupedEffects[effect.source_type].push(this.formatEffect(effect));
        }
      });

      return groupedEffects;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} effectData - –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
   * @returns {Promise<Object>} - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
   */
  static async addEffect(userId, effectData) {
    try {
      await modelRegistry.initializeRegistry();
      const User = modelRegistry.getModel('User');
      const Effect = modelRegistry.getModel('Effect');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByPk(userId);
      if (!user) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!effectData.type || !effectData.sourceType) {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (type, sourceType)');
      }

      // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      let expiresAt = null;
      if (effectData.duration && effectData.duration > 0) {
        expiresAt = new Date();
        expiresAt.setSeconds(expiresAt.getSeconds() + effectData.duration);
      }

      // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
      const effect = await Effect.create({
        user_id: userId,
        source_type: effectData.sourceType,
        source_id: effectData.sourceId || null,
        type: effectData.type,
        name: effectData.name || effectData.type,
        value: effectData.value || effectData.modifier || 0,
        duration: effectData.duration || -1,
        expires_at: expiresAt,
        icon: effectData.icon || null
      });

      return this.formatEffect(effect);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ ID
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} effectId - ID —ç—Ñ—Ñ–µ–∫—Ç–∞
   * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  static async removeEffect(userId, effectId) {
    try {
      await modelRegistry.initializeRegistry();
      const Effect = modelRegistry.getModel('Effect');

      const result = await Effect.destroy({
        where: {
          id: effectId,
          user_id: userId
        }
      });

      return result > 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} sourceType - –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   * @returns {Promise<number>} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  static async removeEffectsBySourceType(userId, sourceType) {
    try {
      await modelRegistry.initializeRegistry();
      const Effect = modelRegistry.getModel('Effect');

      const result = await Effect.destroy({
        where: {
          user_id: userId,
          source_type: sourceType
        }
      });

      return result;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ ${sourceType}:`, error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<number>} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  static async removeExpiredEffects(userId = null) {
    try {
      await modelRegistry.initializeRegistry();
      const Effect = modelRegistry.getModel('Effect');

      const whereClause = {
        expires_at: {
          [Op.not]: null,
          [Op.lt]: new Date()
        }
      };

      if (userId) {
        whereClause.user_id = userId;
      }

      const result = await Effect.destroy({
        where: whereClause
      });

      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–≥–æ–¥—ã
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} weatherData - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
   * @returns {Promise<Object>} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateWeatherEffects(userId, weatherData) {
    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–≥–æ–¥—ã
      await this.removeEffectsBySourceType(userId, 'weather');

      const { weather, dayPeriod } = weatherData;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
      const newWeatherEffects = this.calculateWeatherEffects(weather, dayPeriod);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
      for (const effectData of newWeatherEffects) {
        await this.addEffect(userId, {
          ...effectData,
          sourceType: 'weather'
        });
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return this.getAllEffects(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–≥–æ–¥—ã:', error);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è API
   * @param {Object} effect - –û–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–∑ –ë–î
   * @returns {Object} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞
   */
  static formatEffect(effect) {
    return {
      id: effect.id,
      type: effect.type,
      name: effect.name,
      value: effect.value,
      modifier: effect.value, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      duration: effect.duration,
      expiresAt: effect.expires_at,
      icon: effect.icon,
      source: effect.source_type,
      sourceId: effect.source_id
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–≥–æ–¥—ã
   * @param {string} weather - –¢–∏–ø –ø–æ–≥–æ–¥—ã
   * @param {string} dayPeriod - –ü–µ—Ä–∏–æ–¥ –¥–Ω—è
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  static calculateWeatherEffects(weather, dayPeriod) {
    const effects = [];
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
    switch (weather) {
      case 'clear':
        effects.push({
          type: 'cultivation_speed',
          name: '–Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞',
          value: 5,
          icon: '‚òÄÔ∏è'
        });
        break;
      case 'rain':
        effects.push({
          type: 'water_cultivation',
          name: '–î–æ–∂–¥–ª–∏–≤–∞—è –ø–æ–≥–æ–¥–∞',
          value: 10,
          icon: 'üåßÔ∏è'
        });
        effects.push({
          type: 'fire_cultivation',
          name: '–î–æ–∂–¥–ª–∏–≤–∞—è –ø–æ–≥–æ–¥–∞',
          value: -5,
          icon: 'üåßÔ∏è'
        });
        break;
      case 'storm':
        effects.push({
          type: 'spirit_energy',
          name: '–ì—Ä–æ–∑–æ–≤–∞—è –ø–æ–≥–æ–¥–∞',
          value: 15,
          icon: '‚ö°'
        });
        effects.push({
          type: 'movement_speed',
          name: '–ì—Ä–æ–∑–æ–≤–∞—è –ø–æ–≥–æ–¥–∞',
          value: -10,
          icon: '‚ö°'
        });
        break;
      case 'fog':
        effects.push({
          type: 'stealth',
          name: '–¢—É–º–∞–Ω–Ω–∞—è –ø–æ–≥–æ–¥–∞',
          value: 10,
          icon: 'üå´Ô∏è'
        });
        effects.push({
          type: 'perception',
          name: '–¢—É–º–∞–Ω–Ω–∞—è –ø–æ–≥–æ–¥–∞',
          value: -15,
          icon: 'üå´Ô∏è'
        });
        break;
      case 'snow':
        effects.push({
          type: 'water_cultivation',
          name: '–°–Ω–µ–∂–Ω–∞—è –ø–æ–≥–æ–¥–∞',
          value: 5,
          icon: '‚ùÑÔ∏è'
        });
        effects.push({
          type: 'movement_speed',
          name: '–°–Ω–µ–∂–Ω–∞—è –ø–æ–≥–æ–¥–∞',
          value: -20,
          icon: '‚ùÑÔ∏è'
        });
        break;
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    switch (dayPeriod) {
      case 'dawn':
        effects.push({
          type: 'spirit_energy',
          name: '–†–∞—Å—Å–≤–µ—Ç',
          value: 10,
          icon: 'üåÖ'
        });
        break;
      case 'morning':
        effects.push({
          type: 'energy_regen',
          name: '–£—Ç—Ä–æ',
          value: 5,
          icon: 'üåÑ'
        });
        break;
      case 'noon':
        effects.push({
          type: 'cultivation_speed',
          name: '–ü–æ–ª–¥–µ–Ω—å',
          value: 8,
          icon: '‚òÄÔ∏è'
        });
        break;
      case 'evening':
        effects.push({
          type: 'insight_chance',
          name: '–í–µ—á–µ—Ä',
          value: 5,
          icon: 'üåÜ'
        });
        break;
      case 'night':
        effects.push({
          type: 'stealth',
          name: '–ù–æ—á—å',
          value: 10,
          icon: 'üåô'
        });
        effects.push({
          type: 'perception',
          name: '–ù–æ—á—å',
          value: -10,
          icon: 'üåô'
        });
        break;
      case 'deep_night':
        effects.push({
          type: 'dark_cultivation',
          name: '–ì–ª—É–±–æ–∫–∞—è –Ω–æ—á—å',
          value: 15,
          icon: 'üåë'
        });
        effects.push({
          type: 'light_cultivation',
          name: '–ì–ª—É–±–æ–∫–∞—è –Ω–æ—á—å',
          value: -10,
          icon: 'üåë'
        });
        break;
    }
    
    return effects;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ UI.
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Array<Object>>} - –ú–∞—Å—Å–∏–≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
   */
  static async getActivePlayerEffects(userId) {
    try {
      await modelRegistry.initializeRegistry();
      const ActivePlayerEffect = modelRegistry.getModel('ActivePlayerEffect');

      const now = new Date();
      const effects = await ActivePlayerEffect.findAll({
        where: {
          user_id: userId,
          // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏
          duration_seconds: { [Op.ne]: -1 },
          expires_at: { [Op.gt]: now }
        }
      });

      return effects.map(effect => {
        const details = effect.effect_details_json || {};
        const expiresAt = new Date(effect.expires_at);
        const remainingSeconds = Math.max(0, Math.round((expiresAt - now) / 1000));

        return {
          id: effect.id,
          name: details.original_description || effect.name,
          value: details.value,
          value_type: details.value_type,
          remaining_seconds: remainingSeconds,
          effect_type: effect.effect_type,
        };
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞:', error);
      throw error;
    }
  }
}

module.exports = EffectsService;