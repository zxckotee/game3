/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç API –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ORM
 */

const { unifiedDatabase } = require('./database-connection-manager-adapter');

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
let achievementsCache = [];

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
exports.getAllAchievements = async function() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Achievement —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await Achievement.findAll({
      order: [['display_order', 'ASC'], ['id', 'ASC']]
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const formattedAchievements = achievements.map(achievement => ({
      id: achievement.id,
      title: achievement.title,
      description: achievement.description,
      icon: achievement.icon,
      category: achievement.category,
      rewards: achievement.rewards,
      requiredValue: achievement.required_value,
      isHidden: achievement.is_hidden,
      displayOrder: achievement.display_order
    }));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    achievementsCache = formattedAchievements;
    
    return formattedAchievements;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return achievementsCache;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ ID
 * @param {string} id - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @returns {Promise<Object|null>} –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
exports.getAchievementById = async function(id) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedAchievement = achievementsCache.find(a => a.id === id);
    if (cachedAchievement) {
      return cachedAchievement;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Achievement —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const achievement = await Achievement.findByPk(id);
    
    if (!achievement) {
      return null;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    return {
      id: achievement.id,
      title: achievement.title,
      description: achievement.description,
      icon: achievement.icon,
      category: achievement.category,
      rewards: achievement.rewards,
      requiredValue: achievement.required_value,
      isHidden: achievement.is_hidden,
      displayOrder: achievement.display_order
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å ID ${id}:`, error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    return achievementsCache.find(a => a.id === id) || null;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
exports.getAchievementsByCategory = async function(category) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedAchievements = achievementsCache.filter(a => a.category === category);
    if (cachedAchievements.length > 0) {
      return cachedAchievements;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Achievement —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await Achievement.findAll({
      where: { category },
      order: [['display_order', 'ASC'], ['id', 'ASC']]
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    return achievements.map(achievement => ({
      id: achievement.id,
      title: achievement.title,
      description: achievement.description,
      icon: achievement.icon,
      category: achievement.category,
      rewards: achievement.rewards,
      requiredValue: achievement.required_value,
      isHidden: achievement.is_hidden,
      displayOrder: achievement.display_order
    }));
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`, error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à
    return achievementsCache.filter(a => a.category === category);
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
exports.getUserAchievements = async function(userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    const AchievementProgress = await unifiedDatabase.getCollection('AchievementProgress');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const allAchievements = await Achievement.findAll({
      order: [['display_order', 'ASC'], ['id', 'ASC']]
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProgress = await AchievementProgress.findAll({
      where: { user_id: userId }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
    const progressMap = {};
    userProgress.forEach(progress => {
      progressMap[progress.achievement_id] = progress;
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    return allAchievements.map(achievement => {
      const progress = progressMap[achievement.id];
      const isCompleted = progress ? progress.is_completed : false;
      
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (achievement.is_hidden && !isCompleted) {
        return {
          id: achievement.id,
          title: '???',
          description: '–°–∫—Ä—ã—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
          icon: 'üîí',
          category: achievement.category,
          isHidden: true,
          isCompleted: false,
          currentValue: 0,
          requiredValue: achievement.required_value,
          progress: 0,
          isRewarded: false
        };
      }
      
      return {
        id: achievement.id,
        title: achievement.title,
        description: achievement.description,
        icon: achievement.icon,
        category: achievement.category,
        rewards: achievement.rewards,
        isHidden: achievement.is_hidden,
        isCompleted: progress ? progress.is_completed : false,
        currentValue: progress ? progress.current_value : 0,
        requiredValue: achievement.required_value,
        progress: progress ? Math.min(100, Math.floor((progress.current_value / achievement.required_value) * 100)) : 0,
        isRewarded: progress ? progress.is_rewarded : false,
        completionDate: progress ? progress.completion_date : null
      };
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return [];
  }
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} achievementId - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @param {number} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */
exports.updateAchievementProgress = async function(userId, achievementId, value) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    const AchievementProgress = await unifiedDatabase.getCollection('AchievementProgress');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const sequelize = await unifiedDatabase.getSequelizeInstance();
    const transaction = await sequelize.transaction();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const achievement = await Achievement.findByPk(achievementId, { transaction });
      if (!achievement) {
        await transaction.rollback();
        throw new Error(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å ID ${achievementId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      let [progress, created] = await AchievementProgress.findOrCreate({
        where: { user_id: userId, achievement_id: achievementId },
        defaults: {
          current_value: value,
          is_completed: value >= achievement.required_value,
          is_rewarded: false,
          completion_date: value >= achievement.required_value ? new Date() : null
        },
        transaction
      });
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
      if (!created) {
        const wasCompleted = progress.is_completed;
        const isNowCompleted = value >= achievement.required_value;
        
        await progress.update({
          current_value: value,
          is_completed: isNowCompleted,
          completion_date: !wasCompleted && isNowCompleted ? new Date() : progress.completion_date
        }, { transaction });
      }
      
      // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await transaction.commit();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      return {
        id: progress.id,
        userId: progress.user_id,
        achievementId: progress.achievement_id,
        currentValue: progress.current_value,
        requiredValue: achievement.required_value,
        isCompleted: progress.is_completed,
        isRewarded: progress.is_rewarded,
        completionDate: progress.completion_date,
        progress: Math.min(100, Math.floor((progress.current_value / achievement.required_value) * 100))
      };
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${achievementId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    throw error;
  }
};

/**
 * –í—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} achievementId - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
 */
exports.claimAchievementReward = async function(userId, achievementId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    const AchievementProgress = await unifiedDatabase.getCollection('AchievementProgress');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const sequelize = await unifiedDatabase.getSequelizeInstance();
    const transaction = await sequelize.transaction();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const achievement = await Achievement.findByPk(achievementId, { transaction });
      if (!achievement) {
        await transaction.rollback();
        throw new Error(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å ID ${achievementId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const progress = await AchievementProgress.findOne({
        where: { user_id: userId, achievement_id: achievementId },
        transaction
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –Ω–µ –≤—ã–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –Ω–∞–≥—Ä–∞–¥–∞
      if (!progress || !progress.is_completed) {
        await transaction.rollback();
        throw new Error('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      }
      
      if (progress.is_rewarded) {
        await transaction.rollback();
        throw new Error('–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞');
      }
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞
      await progress.update({ is_rewarded: true }, { transaction });
      
      // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await transaction.commit();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
      return {
        userId,
        achievementId,
        rewards: achievement.rewards,
        isRewarded: true
      };
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achievementId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    throw error;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
exports.checkAchievements = async function(userId, state) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await exports.getAllAchievements();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAchievements = await exports.getUserAchievements(userId);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const pendingAchievements = {};
    userAchievements.forEach(ua => {
      if (!ua.isCompleted) {
        pendingAchievements[ua.id] = ua;
      }
    });
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const newlyCompleted = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for (const achievement of achievements) {
      if (pendingAchievements[achievement.id]) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ ID –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let progress = 0;
        
        switch (achievement.id) {
          case 'ach1': // –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏
            if (state && state.player && state.player.cultivation) {
              progress = state.player.cultivation.level || 0;
            }
            break;
            
          case 'ach2': // –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä —Ç–µ—Ö–Ω–∏–∫
            if (state && state.player && state.player.techniques) {
              progress = Array.isArray(state.player.techniques) ? state.player.techniques.length : 0;
            }
            break;
            
          case 'ach3': // –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å
            if (state && state.player && state.player.progress && state.player.progress.discoveries) {
              const discoveries = state.player.progress.discoveries;
              if (typeof discoveries === 'object' && discoveries !== null) {
                progress = Object.keys(discoveries).filter(key => discoveries[key]).length;
              }
            }
            break;
            
          // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
          
          default:
            // –û–±—â–∏–π —Å–ª—É—á–∞–π - –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue;
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if (progress > 0) {
          try {
            const result = await exports.updateAchievementProgress(userId, achievement.id, progress);
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
            if (result.isCompleted && !pendingAchievements[achievement.id].isCompleted) {
              newlyCompleted.push({
                id: achievement.id,
                title: achievement.title,
                description: achievement.description,
                icon: achievement.icon,
                rewards: achievement.rewards
              });
            }
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${achievement.id}:`, error);
          }
        }
      }
    }
    
    return newlyCompleted;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return [];
  }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 * @param {Object} achievementData - –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
 * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
 */
exports.createAchievement = async function(achievementData) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Achievement —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    const achievement = await Achievement.create({
      id: achievementData.id,
      title: achievementData.title,
      description: achievementData.description,
      icon: achievementData.icon,
      category: achievementData.category,
      rewards: achievementData.rewards,
      required_value: achievementData.requiredValue || 1,
      is_hidden: achievementData.isHidden || false,
      display_order: achievementData.displayOrder || 0
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    achievementsCache = [];
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    return {
      id: achievement.id,
      title: achievement.title,
      description: achievement.description,
      icon: achievement.icon,
      category: achievement.category,
      rewards: achievement.rewards,
      requiredValue: achievement.required_value,
      isHidden: achievement.is_hidden,
      displayOrder: achievement.display_order
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 * @param {string} id - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @returns {Promise<Object|null>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
exports.updateAchievement = async function(id, updates) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Achievement —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievement = await Achievement.findByPk(id);
    if (!achievement) {
      return null;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    await achievement.update({
      title: updates.title !== undefined ? updates.title : achievement.title,
      description: updates.description !== undefined ? updates.description : achievement.description,
      icon: updates.icon !== undefined ? updates.icon : achievement.icon,
      category: updates.category !== undefined ? updates.category : achievement.category,
      rewards: updates.rewards !== undefined ? updates.rewards : achievement.rewards,
      required_value: updates.requiredValue !== undefined ? updates.requiredValue : achievement.required_value,
      is_hidden: updates.isHidden !== undefined ? updates.isHidden : achievement.is_hidden,
      display_order: updates.displayOrder !== undefined ? updates.displayOrder : achievement.display_order
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    achievementsCache = [];
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    return {
      id: achievement.id,
      title: achievement.title,
      description: achievement.description,
      icon: achievement.icon,
      category: achievement.category,
      rewards: achievement.rewards,
      requiredValue: achievement.required_value,
      isHidden: achievement.is_hidden,
      displayOrder: achievement.display_order
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å ID ${id}:`, error);
    throw error;
  }
};

/**
 * –£–¥–∞–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 * @param {string} id - ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
exports.deleteAchievement = async function(id) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å Achievement —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
    const Achievement = await unifiedDatabase.getCollection('Achievement');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievement = await Achievement.findByPk(id);
    if (!achievement) {
      return false;
    }
    
    // –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    await achievement.destroy();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    achievementsCache = achievementsCache.filter(a => a.id !== id);
    
    return true;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å ID ${id}:`, error);
    return false;
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
exports.getAllAchievements().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
});