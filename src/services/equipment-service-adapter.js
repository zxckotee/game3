/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ API –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ crypto-browserify
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–æ–¥—É–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
const EquipmentConstants = require('../constants/equipment-constants');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ API-–≤–µ—Ä—Å–∏—é –¥–ª—è –≤—Å–µ—Ö —Å—Ä–µ–¥
const EquipmentServiceAPI = require('./equipment-service-api');

// –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º API-–≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å crypto-browserify
const EquipmentService = EquipmentServiceAPI;

// –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
const adapter = {};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–æ–¥—É–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
adapter.EQUIPMENT_TYPES = EquipmentConstants.EQUIPMENT_TYPES;
adapter.WEAPON_CATEGORIES = EquipmentConstants.WEAPON_CATEGORIES;
adapter.ARMOR_CATEGORIES = EquipmentConstants.ARMOR_CATEGORIES;
adapter.RARITY = EquipmentConstants.RARITY;
adapter.QUALITY = EquipmentConstants.QUALITY;
adapter.BONUS_TYPES = EquipmentConstants.BONUS_TYPES;
adapter.STARTER_GEAR = EquipmentConstants.STARTER_GEAR;

// –ú–µ—Ç–æ–¥—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
adapter.getUserEquipment = function() {
  if (typeof EquipmentService.getUserEquipment === 'function') {
    try {
      return EquipmentService.getUserEquipment.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ getUserEquipment:', error);
      return Promise.resolve([]);
    }
  }
  return Promise.resolve([]);
};

adapter.getEquippedItems = function() {
  if (typeof EquipmentService.getEquippedItems === 'function') {
    try {
      return EquipmentService.getEquippedItems.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ getEquippedItems:', error);
      return Promise.resolve([]);
    }
  }
  return Promise.resolve([]);
};

adapter.equipItem = function() {
  if (typeof EquipmentService.equipItem === 'function') {
    try {
      return EquipmentService.equipItem.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ equipItem:', error);
      return Promise.resolve(false);
    }
  }
  return Promise.resolve(false);
};

adapter.unequipItem = function() {
  if (typeof EquipmentService.unequipItem === 'function') {
    try {
      return EquipmentService.unequipItem.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ unequipItem:', error);
      return Promise.resolve(false);
    }
  }
  return Promise.resolve(false);
};

adapter.calculateEquipmentBonuses = function() {
  if (typeof EquipmentService.calculateEquipmentBonuses === 'function') {
    try {
      return EquipmentService.calculateEquipmentBonuses.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ calculateEquipmentBonuses:', error);
      return {};
    }
  }
  return {};
};

adapter.createEquipmentItem = function() {
  if (typeof EquipmentService.createEquipmentItem === 'function') {
    try {
      return EquipmentService.createEquipmentItem.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ createEquipmentItem:', error);
      return Promise.resolve(null);
    }
  }
  return Promise.resolve(null);
};

adapter.removeEquipmentItem = function() {
  if (typeof EquipmentService.removeEquipmentItem === 'function') {
    try {
      return EquipmentService.removeEquipmentItem.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ removeEquipmentItem:', error);
      return Promise.resolve(false);
    }
  }
  return Promise.resolve(false);
};

adapter.addEquipmentToUser = function() {
  if (typeof EquipmentService.addEquipmentToUser === 'function') {
    try {
      return EquipmentService.addEquipmentToUser.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ addEquipmentToUser:', error);
      return Promise.resolve(false);
    }
  }
  return Promise.resolve(false);
};

adapter.updateEquipmentItem = function() {
  if (typeof EquipmentService.updateEquipmentItem === 'function') {
    try {
      return EquipmentService.updateEquipmentItem.apply(EquipmentService, arguments);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤ updateEquipmentItem:', error);
      return Promise.resolve(false);
    }
  }
  return Promise.resolve(false);
};

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
adapter.DEBUG_EQUIPMENT = true; // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ä–∞–±–æ—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–∞

adapter.checkItemRequirements = function(item, user) {
  if (this.DEBUG_EQUIPMENT) {
    console.log('üîç [EquipmentService Adapter] –í—ã–∑–æ–≤ checkItemRequirements');
    console.log('üì¶ –ü—Ä–µ–¥–º–µ—Ç:', item && (item.name || item.id || 'Unnamed item'));
  }

  if (typeof EquipmentService.checkItemRequirements === 'function') {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ EquipmentService —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DEBUG_REQUIREMENTS
      if (this.DEBUG_EQUIPMENT && EquipmentService.DEBUG_REQUIREMENTS !== undefined) {
        console.log('‚úÖ EquipmentService –∏–º–µ–µ—Ç DEBUG_REQUIREMENTS =', EquipmentService.DEBUG_REQUIREMENTS);
      }
      
      // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ –±–∞–∑–æ–≤–æ–º —Å–µ—Ä–≤–∏—Å–µ
      if (typeof EquipmentService.DEBUG_REQUIREMENTS !== 'undefined') {
        EquipmentService.DEBUG_REQUIREMENTS = true;
      }
      
      // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const result = EquipmentService.checkItemRequirements.call(EquipmentService, item, user);
      
      if (this.DEBUG_EQUIPMENT) {
        console.log('üèÅ [EquipmentService Adapter] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:',
          result.canEquip ? '‚úÖ –ú–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å' : '‚ùå –ù–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å');
        if (!result.canEquip) {
          console.log('üìã –ü—Ä–∏—á–∏–Ω—ã:', result.failedRequirements);
        }
      }
      
      return result;
    } catch (error) {
      console.warn('‚ùå –û—à–∏–±–∫–∞ –≤ checkItemRequirements:', error);
      return { canEquip: true, failedRequirements: [] };
    }
  }
  
  if (this.DEBUG_EQUIPMENT) {
    console.warn('‚ö†Ô∏è –ú–µ—Ç–æ–¥ checkItemRequirements –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ EquipmentService');
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
  return { canEquip: true, failedRequirements: [] };
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
module.exports = adapter;