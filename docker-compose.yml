version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: game_postgres
    environment:
      POSTGRES_DB: game
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d game"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Основное приложение (React + Express)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: game_app
    ports:
      - "3000:3000"  # React dev server
      - "3001:3001"  # Express API server
    volumes:
      # Монтируем исходный код для hot reload
      - .:/app
      - /app/node_modules
      - /app/build
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3001
      - DATABASE_URL=postgresql://postgres:root@postgres:5432/game
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=game
      - DB_USER=postgres
      - DB_PASSWORD=root
      - PORT=3001
      - REACT_APP_PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Nginx для проксирования (опционально)
  nginx:
    image: nginx:alpine
    container_name: game_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: game_network
