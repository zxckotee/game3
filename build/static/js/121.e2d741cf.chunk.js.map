{"version":3,"file":"static/js/121.e2d741cf.chunk.js","mappings":"4KAqIA,QAjIA,MACE,yBAAaA,CAAaC,EAAUC,EAAOC,GACzC,IAEE,MAAMC,QAAkBC,EAAAA,EAAAA,2BAGlBC,QAAqBF,EAAUG,QAAQ,CAC3CC,MAAO,CACL,CAACC,EAAAA,UAAUC,GAAGC,IAAK,CACjB,CAAEV,SAAUA,GACZ,CAAEC,MAAOA,OAKf,GAAII,EAAc,CAChB,GAAIA,EAAaL,WAAaA,EAC5B,MAAM,IAAIW,MAAM,uOAElB,GAAIN,EAAaJ,QAAUA,EACzB,MAAM,IAAIU,MAAM,uMAEpB,CAEA,MAAMC,QAAqBC,EAAAA,EAAAA,GAAaX,GAQxC,aAPmBC,EAAUW,OAAO,CAClCd,WACAC,QACAW,eACAG,iBAAkB,EAClBC,WAAY,GAGhB,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,2GAAuBA,GAC/BA,CACR,CACF,CAEA,sBAAaE,CAAUC,EAAiBlB,GACtC,IAEE,MAAMC,QAAkBC,EAAAA,EAAAA,2BAGlBiB,QAAalB,EAAUG,QAAQ,CACnCC,MAAO,CACL,CAACC,EAAAA,UAAUC,GAAGC,IAAK,CACjB,CAAET,MAAOmB,GACT,CAAEpB,SAAUoB,OAKlB,IAAKC,EACH,MAAM,IAAIV,MAAM,8HAIlB,UAD8BW,EAAAA,EAAAA,GAAgBpB,EAAUmB,EAAKT,cAE3D,MAAM,IAAID,MAAM,yFAOlB,OAHAU,EAAKE,UAAY,IAAIC,WACfH,EAAKI,OAEJJ,CACT,CAAE,MAAOJ,GAEP,MADAC,QAAQD,MAAM,uEAAiBA,GACzBA,CACR,CACF,CAEA,+BAAaS,CAAmBC,EAAQX,EAAYD,GAClD,IAEE,MAAMZ,QAAkBC,EAAAA,EAAAA,2BAElBiB,QAAalB,EAAUyB,SAASD,GACtC,IAAKN,EACH,MAAM,IAAIV,MAAM,8HAOlB,OAJAU,EAAKL,WAAaA,EAClBK,EAAKN,iBAAmBA,QAClBM,EAAKI,OAEJJ,CACT,CAAE,MAAOJ,GAEP,MADAC,QAAQD,MAAM,4JAAgCA,GACxCA,CACR,CACF,CAEA,2BAAaY,CAAeC,GAC1B,IAEE,MAAM3B,QAAkBC,EAAAA,EAAAA,2BAExB,IAAIiB,EAgBJ,GANEA,EAP8B,kBAArBS,GAAkCC,MAAMC,SAASF,UAO7C3B,EAAUG,QAAQ,CAC7BC,MAAO,CAAEP,SAAU8B,GACnBG,WAAY,CAAC,KAAM,WAAY,QAAS,mBAAoB,sBAPjD9B,EAAUyB,SAASE,EAAkB,CAChDG,WAAY,CAAC,KAAM,WAAY,QAAS,mBAAoB,iBAU3DZ,EACH,MAAM,IAAIV,MAAM,8HAGlB,OAAOU,CACT,CAAE,MAAOJ,GAEP,MADAC,QAAQD,MAAM,0IAA6BA,GACrCA,CACR,CACF,E","sources":["services/auth.js"],"sourcesContent":["import { hashPassword, comparePassword } from './web-crypto-hash';\r\nimport User, { getInitializedUserModel } from '../models/user';\r\nimport { Sequelize } from 'sequelize';\r\n\r\nclass AuthService {\r\n  static async registerUser(username, email, password) {\r\n    try {\r\n      // Получаем инициализированную модель User\r\n      const UserModel = await getInitializedUserModel();\r\n      \r\n      // Проверяем, существует ли пользователь с таким username или email\r\n      const existingUser = await UserModel.findOne({\r\n        where: {\r\n          [Sequelize.Op.or]: [\r\n            { username: username },\r\n            { email: email }\r\n          ]\r\n        }\r\n      });\r\n      \r\n      if (existingUser) {\r\n        if (existingUser.username === username) {\r\n          throw new Error('Пользователь с таким именем уже существует');\r\n        }\r\n        if (existingUser.email === email) {\r\n          throw new Error('Пользователь с таким email уже существует');\r\n        }\r\n      }\r\n      \r\n      const passwordHash = await hashPassword(password);\r\n      const user = await UserModel.create({\r\n        username,\r\n        email,\r\n        passwordHash,\r\n        cultivationLevel: 1,\r\n        experience: 0\r\n      });\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Ошибка регистрации:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async loginUser(usernameOrEmail, password) {\r\n    try {\r\n      // Получаем инициализированную модель User\r\n      const UserModel = await getInitializedUserModel();\r\n      \r\n      // Поиск пользователя по email или имени пользователя\r\n      const user = await UserModel.findOne({\r\n        where: {\r\n          [Sequelize.Op.or]: [\r\n            { email: usernameOrEmail },\r\n            { username: usernameOrEmail }\r\n          ]\r\n        }\r\n      });\r\n      \r\n      if (!user) {\r\n        throw new Error('Пользователь не найден');\r\n      }\r\n\r\n      const isPasswordValid = await comparePassword(password, user.passwordHash);\r\n      if (!isPasswordValid) {\r\n        throw new Error('Неверный пароль');\r\n      }\r\n\r\n      // Обновляем время последнего входа\r\n      user.lastLogin = new Date();\r\n      await user.save();\r\n\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Ошибка входа:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateUserProgress(userId, experience, cultivationLevel) {\r\n    try {\r\n      // Получаем инициализированную модель User\r\n      const UserModel = await getInitializedUserModel();\r\n      \r\n      const user = await UserModel.findByPk(userId);\r\n      if (!user) {\r\n        throw new Error('Пользователь не найден');\r\n      }\r\n\r\n      user.experience = experience;\r\n      user.cultivationLevel = cultivationLevel;\r\n      await user.save();\r\n\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Ошибка обновления прогресса:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUserProfile(userIdOrUsername) {\r\n    try {\r\n      // Получаем инициализированную модель User\r\n      const UserModel = await getInitializedUserModel();\r\n      \r\n      let user;\r\n      \r\n      // Проверяем, является ли параметр числом (id) или строкой (username)\r\n      if (typeof userIdOrUsername === 'number' || !isNaN(parseInt(userIdOrUsername))) {\r\n        // Поиск по ID\r\n        user = await UserModel.findByPk(userIdOrUsername, {\r\n          attributes: ['id', 'username', 'email', 'cultivationLevel', 'experience']\r\n        });\r\n      } else {\r\n        // Поиск по username\r\n        user = await UserModel.findOne({\r\n          where: { username: userIdOrUsername },\r\n          attributes: ['id', 'username', 'email', 'cultivationLevel', 'experience']\r\n        });\r\n      }\r\n\r\n      if (!user) {\r\n        throw new Error('Пользователь не найден');\r\n      }\r\n\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Ошибка получения профиля:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n"],"names":["registerUser","username","email","password","UserModel","getInitializedUserModel","existingUser","findOne","where","Sequelize","Op","or","Error","passwordHash","hashPassword","create","cultivationLevel","experience","error","console","loginUser","usernameOrEmail","user","comparePassword","lastLogin","Date","save","updateUserProgress","userId","findByPk","getUserProfile","userIdOrUsername","isNaN","parseInt","attributes"],"sourceRoot":""}