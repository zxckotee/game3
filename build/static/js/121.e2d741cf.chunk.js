"use strict";(self.webpackChunkimmortal_path=self.webpackChunkimmortal_path||[]).push([[121],{8121:(e,r,t)=>{t.r(r),t.d(r,{default:()=>s});var a=t(480),i=t(3382),n=t(8568);const s=class{static async registerUser(e,r,t){try{const s=await(0,i.getInitializedUserModel)(),o=await s.findOne({where:{[n.Sequelize.Op.or]:[{username:e},{email:r}]}});if(o){if(o.username===e)throw new Error("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442");if(o.email===r)throw new Error("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c email \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442")}const c=await(0,a.E)(t);return await s.create({username:e,email:r,passwordHash:c,cultivationLevel:1,experience:0})}catch(s){throw console.error("\u041e\u0448\u0438\u0431\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:",s),s}}static async loginUser(e,r){try{const t=await(0,i.getInitializedUserModel)(),s=await t.findOne({where:{[n.Sequelize.Op.or]:[{email:e},{username:e}]}});if(!s)throw new Error("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d");if(!await(0,a.b)(r,s.passwordHash))throw new Error("\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c");return s.lastLogin=new Date,await s.save(),s}catch(t){throw console.error("\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0445\u043e\u0434\u0430:",t),t}}static async updateUserProgress(e,r,t){try{const a=await(0,i.getInitializedUserModel)(),n=await a.findByPk(e);if(!n)throw new Error("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d");return n.experience=r,n.cultivationLevel=t,await n.save(),n}catch(a){throw console.error("\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430:",a),a}}static async getUserProfile(e){try{const r=await(0,i.getInitializedUserModel)();let t;if(t="number"!==typeof e&&isNaN(parseInt(e))?await r.findOne({where:{username:e},attributes:["id","username","email","cultivationLevel","experience"]}):await r.findByPk(e,{attributes:["id","username","email","cultivationLevel","experience"]}),!t)throw new Error("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d");return t}catch(r){throw console.error("\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044f:",r),r}}}}}]);
//# sourceMappingURL=121.e2d741cf.chunk.js.map