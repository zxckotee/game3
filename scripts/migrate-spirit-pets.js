/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥—É—Ö–æ–≤–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é
 * 
 * –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ spirit_pets —Å –ø–æ–ª–µ–º userId
 * –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: 
 *   - spirit_pets (–∫–∞—Ç–∞–ª–æ–≥ —Ç–∏–ø–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤)
 *   - user_spirit_pets (—ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
 */

const { Sequelize, DataTypes } = require('sequelize');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize({
  dialect: 'postgres',
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  username: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres',
  database: process.env.DB_NAME || 'game3',
  logging: console.log
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ SpiritPet
const OldSpiritPet = sequelize.define('SpiritPet', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  name: { 
    type: DataTypes.STRING,
    allowNull: false
  },
  type: {
    type: DataTypes.STRING,
    allowNull: false
  },
  level: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1
  },
  experience: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  loyalty: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 50
  },
  hunger: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 100
  },
  strength: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 5
  },
  intelligence: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 5
  },
  agility: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 5
  },
  vitality: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 5
  },
  spirit: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 5
  },
  abilities: {
    type: DataTypes.JSON,
    allowNull: false,
    defaultValue: []
  },
  evolutionStage: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  lastFed: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  lastTrained: {
    type: DataTypes.DATE,
    allowNull: true
  },
  createdAt: {
    type: DataTypes.DATE,
    field: 'created_at'
  },
  updatedAt: {
    type: DataTypes.DATE,
    field: 'updated_at'
  }
}, {
  tableName: 'spirit_pets',
  timestamps: true,
  underscored: true
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
async function tableExists(tableName) {
  try {
    const query = `
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = :tableName
      )
    `;
    const result = await sequelize.query(query, {
      replacements: { tableName },
      type: Sequelize.QueryTypes.SELECT,
      plain: true
    });
    
    return result.exists;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
async function migrateSpiritPets() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥—É—Ö–æ–≤–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const spiritPetsExists = await tableExists('spirit_pets');
    const userSpiritPetsExists = await tableExists('user_spirit_pets');
    
    if (!spiritPetsExists) {
      console.error('–¢–∞–±–ª–∏—Ü–∞ spirit_pets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
      return;
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_spirit_pets, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!userSpiritPetsExists) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_spirit_pets...');
      
      await sequelize.query(`
        CREATE TABLE user_spirit_pets (
          id SERIAL PRIMARY KEY,
          user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          pet_id VARCHAR(30) NOT NULL REFERENCES spirit_pets(id) ON DELETE CASCADE,
          is_active BOOLEAN DEFAULT false,
          custom_name VARCHAR(100),
          level INTEGER DEFAULT 1,
          experience INTEGER DEFAULT 0,
          hunger INTEGER DEFAULT 100,
          loyalty INTEGER DEFAULT 100,
          strength INTEGER DEFAULT 1,
          intelligence INTEGER DEFAULT 1,
          agility INTEGER DEFAULT 1,
          vitality INTEGER DEFAULT 1,
          spirit INTEGER DEFAULT 1,
          last_fed TIMESTAMP,
          last_trained TIMESTAMP,
          combat_uses_count INTEGER DEFAULT 0,
          combat_flee_count INTEGER DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(user_id, pet_id)
        );
        
        CREATE INDEX idx_user_spirit_pets_user_id ON user_spirit_pets(user_id);
        CREATE INDEX idx_user_spirit_pets_pet_id ON user_spirit_pets(pet_id);
        CREATE INDEX idx_user_spirit_pets_is_active ON user_spirit_pets(user_id, is_active);
      `);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
      await sequelize.query(`
        CREATE OR REPLACE FUNCTION update_user_spirit_pets_updated_at()
        RETURNS TRIGGER AS $$
        BEGIN
          NEW.updated_at = CURRENT_TIMESTAMP;
          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        
        CREATE TRIGGER trigger_update_user_spirit_pets_updated_at
        BEFORE UPDATE ON user_spirit_pets
        FOR EACH ROW
        EXECUTE FUNCTION update_user_spirit_pets_updated_at();
      `);
      
      console.log('–¢–∞–±–ª–∏—Ü–∞ user_spirit_pets —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–∞—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    const petTypesCount = await sequelize.query(
      `SELECT COUNT(*) FROM spirit_pets WHERE id ~ '^[a-z_]+$'`,
      { type: sequelize.QueryTypes.SELECT }
    );
    
    if (parseInt(petTypesCount[0].count) === 0) {
      console.log('–ö–∞—Ç–∞–ª–æ–≥ –ø–∏—Ç–æ–º—Ü–µ–≤ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã...');
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã spirit_pets
      console.log('–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã spirit_pets...');
      await sequelize.query('CREATE TABLE spirit_pets_backup AS SELECT * FROM spirit_pets');
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É spirit_pets
      await sequelize.query('TRUNCATE TABLE spirit_pets CASCADE');
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
      await sequelize.query(`
        INSERT INTO spirit_pets (id, name, description, type, element, rarity, unlock_condition, max_level, icon, evolution_path) VALUES
        ('fire_fox', '–û–≥–Ω–µ–Ω–Ω—ã–π –ª–∏—Å', '–î—É—Ö–æ–≤–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –æ–≥–Ω—è, —Å–ø–æ—Å–æ–±–Ω—ã–π –∫ –±—ã—Å—Ç—Ä–æ–º—É –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—é –∏ –∞—Ç–∞–∫–∞–º –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞', 'beast', 'fire', 'uncommon', '–ü–æ–±–µ–¥–∏—Ç—å 10 –æ–≥–Ω–µ–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤', 100, 'ü¶ä', '[]'),
        ('water_dragon', '–í–æ–¥—è–Ω–æ–π –¥—Ä–∞–∫–æ–Ω', '–†–µ–¥–∫–∏–π –≤–æ–¥—è–Ω–æ–π –¥—Ä–∞–∫–æ–Ω —Å –º–æ—â–Ω—ã–º–∏ –∞—Ç–∞–∫–∞–º–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 'mythical', 'water', 'rare', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –û–∑–µ—Ä–æ –î—É—Ö–æ–≤ –∏ –ø–æ–±–µ–¥–∏—Ç—å –•—Ä–∞–Ω–∏—Ç–µ–ª—è –í–æ–¥', 120, 'üêâ', '[]'),
        ('earth_turtle', '–ó–µ–º–ª—è–Ω–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞', '–ü—Ä–æ—á–Ω–∞—è –∑–µ–º–ª—è–Ω–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞ —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—â–∏—Ç–æ–π', 'beast', 'earth', 'common', '–°–æ–±—Ä–∞—Ç—å 20 –µ–¥–∏–Ω–∏—Ü –¥—É—Ö–æ–≤–Ω—ã—Ö –º–∏–Ω–µ—Ä–∞–ª–æ–≤', 80, 'üê¢', '[]'),
        ('lightning_bird', '–ì—Ä–æ–º–æ–≤–∞—è –ø—Ç–∏—Ü–∞', '–†–µ–¥–∫–∞—è –ø—Ç–∏—Ü–∞, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –º–æ–ª–Ω–∏—è–º–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–∞—è –∫ –±—ã—Å—Ç—Ä—ã–º –∞—Ç–∞–∫–∞–º', 'celestial', 'lightning', 'epic', '–ü–µ—Ä–µ–∂–∏—Ç—å –Ω–µ–±–µ—Å–Ω—É—é —Ç—Ä–∏–±—É–ª—è—Ü–∏—é', 150, '‚ö°', '[]'),
        ('shadow_wolf', '–¢–µ–Ω–µ–≤–æ–π –≤–æ–ª–∫', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç–µ–Ω–µ–≤–æ–π –≤–æ–ª–∫ —Å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∫ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –∏ –º–æ—â–Ω—ã–º–∏ —Ç–µ–º–Ω—ã–º–∏ –∞—Ç–∞–∫–∞–º–∏', 'demonic', 'darkness', 'legendary', '–ù–∞–π—Ç–∏ –∏ –ø–æ–±–µ–¥–∏—Ç—å –•—Ä–∞–Ω–∏—Ç–µ–ª—è –¢–µ–Ω–µ–π', 200, 'üê∫', '[]')
      `);
      
      console.log('–ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
    }
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    let oldPets = [];
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      oldPets = await sequelize.query(
        'SELECT * FROM spirit_pets_backup WHERE id::text ~ \'^[0-9]+$\'',
        { type: sequelize.QueryTypes.SELECT }
      );
    } catch (error) {
      // –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ—Ç, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
      oldPets = await OldSpiritPet.findAll();
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${oldPets.length} –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
    
    // 5. –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let migratedCount = 0;
    const petTypeMap = {
      'fire': 'fire_fox',
      'water': 'water_dragon',
      'earth': 'earth_turtle',
      'lightning': 'lightning_bird',
      'darkness': 'shadow_wolf'
    };
    
    for (const oldPet of oldPets) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞
      let petTypeId = oldPet.type ? petTypeMap[oldPet.type] || 'fire_fox' : 'fire_fox';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∏—Ç–æ–º—Ü–∞
      const existingPet = await sequelize.query(
        'SELECT * FROM user_spirit_pets WHERE user_id = :userId AND pet_id = :petId',
        { 
          replacements: { 
            userId: oldPet.userId || oldPet.user_id, 
            petId: petTypeId 
          },
          type: sequelize.QueryTypes.SELECT 
        }
      );
      
      if (existingPet.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ user_spirit_pets
        await sequelize.query(`
          INSERT INTO user_spirit_pets (
            user_id, pet_id, is_active, custom_name, level, experience,
            hunger, loyalty, strength, intelligence, agility, vitality,
            spirit, last_fed, last_trained, created_at, updated_at
          ) VALUES (
            :userId, :petId, :isActive, :customName, :level, :experience,
            :hunger, :loyalty, :strength, :intelligence, :agility, :vitality,
            :spirit, :lastFed, :lastTrained, :createdAt, :updatedAt
          )
        `, { 
          replacements: {
            userId: oldPet.userId || oldPet.user_id,
            petId: petTypeId,
            isActive: oldPet.isActive || oldPet.is_active || false,
            customName: oldPet.name,
            level: oldPet.level || 1,
            experience: oldPet.experience || 0,
            hunger: oldPet.hunger || 100,
            loyalty: oldPet.loyalty || 50,
            strength: oldPet.strength || 5,
            intelligence: oldPet.intelligence || 5,
            agility: oldPet.agility || 5,
            vitality: oldPet.vitality || 5,
            spirit: oldPet.spirit || 5,
            lastFed: oldPet.lastFed || oldPet.last_fed || new Date(),
            lastTrained: oldPet.lastTrained || oldPet.last_trained || null,
            createdAt: oldPet.createdAt || oldPet.created_at || new Date(),
            updatedAt: oldPet.updatedAt || oldPet.updated_at || new Date()
          }
        });
        
        migratedCount++;
      }
    }
    
    console.log(`–£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedCount} –ø–∏—Ç–æ–º—Ü–µ–≤`);
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –µ–¥—ã –ø–∏—Ç–æ–º—Ü–µ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const petFoodExists = await tableExists('spirit_pet_food_items');
    
    if (!petFoodExists) {
      console.log('–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É spirit_pet_food_items...');
      
      await sequelize.query(`
        CREATE TABLE spirit_pet_food_items (
          id VARCHAR(30) PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          description TEXT,
          rarity VARCHAR(20),
          nutrition_value INTEGER NOT NULL DEFAULT 25,
          loyalty_bonus INTEGER NOT NULL DEFAULT 0,
          stat_bonus_type VARCHAR(20) DEFAULT NULL,
          stat_bonus_value INTEGER DEFAULT 0,
          price INTEGER DEFAULT 100,
          icon VARCHAR(50),
          shop_categories JSONB DEFAULT '["pet_supplies"]'
        );
        
        -- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ–¥—ã –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤
        INSERT INTO spirit_pet_food_items (id, name, description, rarity, nutrition_value, loyalty_bonus, price, icon) VALUES
        ('basic_pet_food', '–ë–∞–∑–æ–≤—ã–π –∫–æ—Ä–º –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤', '–ü—Ä–æ—Å—Ç–∞—è –µ–¥–∞ –¥–ª—è –¥—É—Ö–æ–≤–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤', 'common', 20, 0, 50, 'ü•´'),
        ('improved_pet_food', '–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ—Ä–º –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤', '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –µ–¥–∞ —Å –¥—É—Ö–æ–≤–Ω—ã–º–∏ —Ç—Ä–∞–≤–∞–º–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è', 'uncommon', 35, 2, 150, 'üçñ'),
        ('premium_pet_food', '–ü—Ä–µ–º–∏—É–º –∫–æ—Ä–º –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤', '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –µ–¥–∞ –¥–ª—è –¥—É—Ö–æ–≤–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤', 'rare', 50, 5, 500, 'üçó'),
        ('elemental_treat_fire', '–û–≥–Ω–µ–Ω–Ω–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ', '–û—Å–æ–±–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ –æ–≥–Ω–µ–Ω–Ω–æ–π —Å—Ç–∏—Ö–∏–∏', 'rare', 40, 8, 800, 'üî•'),
        ('elemental_treat_water', '–í–æ–¥–Ω–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ', '–û—Å–æ–±–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ –≤–æ–¥–Ω–æ–π —Å—Ç–∏—Ö–∏–∏', 'rare', 40, 8, 800, 'üíß'),
        ('elemental_treat_earth', '–ó–µ–º–ª—è–Ω–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ', '–û—Å–æ–±–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ –∑–µ–º–Ω–æ–π —Å—Ç–∏—Ö–∏–∏', 'rare', 40, 8, 800, 'üå±'),
        ('elemental_treat_air', '–í–æ–∑–¥—É—à–Ω–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ', '–û—Å–æ–±–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ –≤–æ–∑–¥—É—à–Ω–æ–π —Å—Ç–∏—Ö–∏–∏', 'rare', 40, 8, 800, 'üí®'),
        ('mystic_pet_feast', '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–∏—Ä –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –µ–¥–∞, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞—é—â–∞—è –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞', 'legendary', 100, 15, 3000, '‚ú®');
        
        -- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        DO $$
        BEGIN
          IF EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'item_catalog') THEN
            INSERT INTO item_catalog (item_id, name, description, type, rarity)
            SELECT id, name, description, 'pet_food', rarity FROM spirit_pet_food_items
            ON CONFLICT (item_id) DO NOTHING;
          END IF;
        END $$;
      `);
      
      console.log('–¢–∞–±–ª–∏—Ü–∞ spirit_pet_food_items —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    console.log('–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateSpiritPets();