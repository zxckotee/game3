const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
});

async function testQuestTriggers() {
    const client = await pool.connect();
    
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–≤–µ—Å—Ç–æ–≤...\n');
        
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const userResult = await client.query(`
            INSERT INTO users (username, email, password_hash, level, experience, coins)
            VALUES ('test_trigger_user', 'test_trigger@example.com', 'hash123', 1, 0, 100)
            RETURNING id, username, created_at
        `);
        
        const userId = userResult.rows[0].id;
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID=${userId}, Username=${userResult.rows[0].username}`);
        console.log(`   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${userResult.rows[0].created_at}\n`);
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π quest_progress
        console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è quest_progress...');
        const questProgressResult = await client.query(`
            SELECT qp.*, q.title 
            FROM quest_progress qp
            JOIN quests q ON qp.quest_id = q.id
            WHERE qp.user_id = $1
            ORDER BY q.id
            LIMIT 5
        `, [userId]);
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${questProgressResult.rows.length} –∑–∞–ø–∏—Å–µ–π quest_progress:`);
        questProgressResult.rows.forEach(row => {
            console.log(`   - –ö–≤–µ—Å—Ç: "${row.title}" (ID=${row.quest_id}), –°—Ç–∞—Ç—É—Å: ${row.status}`);
        });
        console.log();
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π quest_objective_progress
        console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è quest_objective_progress...');
        const objectiveProgressResult = await client.query(`
            SELECT qop.*, qo.type, qo.description, q.title as quest_title
            FROM quest_objective_progress qop
            JOIN quest_objectives qo ON qop.objective_id = qo.id
            JOIN quests q ON qo.quest_id = q.id
            WHERE qop.user_id = $1
            ORDER BY q.id, qo.id
            LIMIT 10
        `, [userId]);
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${objectiveProgressResult.rows.length} –∑–∞–ø–∏—Å–µ–π quest_objective_progress:`);
        objectiveProgressResult.rows.forEach(row => {
            console.log(`   - –ö–≤–µ—Å—Ç: "${row.quest_title}", –¶–µ–ª—å: ${row.type} (${row.description})`);
            console.log(`     –ü—Ä–æ–≥—Ä–µ—Å—Å: ${row.current_progress}/${row.required_progress}, –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${row.completed}`);
        });
        console.log();
        
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ quest_objective_progress –∏ —Ç—Ä–∏–≥–≥–µ—Ä updated_at
        console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è quest_objective_progress...');
        if (objectiveProgressResult.rows.length > 0) {
            const firstObjective = objectiveProgressResult.rows[0];
            const oldUpdatedAt = firstObjective.updated_at;
            
            // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ä–∞–∑–ª–∏—á–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            await client.query(`
                UPDATE quest_objective_progress 
                SET current_progress = current_progress + 1
                WHERE user_id = $1 AND objective_id = $2
            `, [userId, firstObjective.objective_id]);
            
            const updatedResult = await client.query(`
                SELECT current_progress, updated_at
                FROM quest_objective_progress
                WHERE user_id = $1 AND objective_id = $2
            `, [userId, firstObjective.objective_id]);
            
            const newRecord = updatedResult.rows[0];
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏:`);
            console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${firstObjective.current_progress} ‚Üí ${newRecord.current_progress}`);
            console.log(`   updated_at: ${oldUpdatedAt} ‚Üí ${newRecord.updated_at}`);
            console.log(`   –¢—Ä–∏–≥–≥–µ—Ä updated_at —Ä–∞–±–æ—Ç–∞–µ—Ç: ${oldUpdatedAt !== newRecord.updated_at ? '‚úÖ' : '‚ùå'}\n`);
        }
        
        // 5. –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('5. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await client.query('DELETE FROM users WHERE id = $1', [userId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω\n');
        
        console.log('üéâ –í—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testQuestTriggers().catch(console.error);