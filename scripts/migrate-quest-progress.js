/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–æ–≤ –∏–∑ JSONB –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
 * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ quest_progress.progress –≤ quest_objective_progress
 */

const { Sequelize } = require('sequelize');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize(process.env.DATABASE_URL || 'postgresql://localhost:5432/game3', {
  dialect: 'postgres',
  logging: console.log,
  define: {
    timestamps: false,
    freezeTableName: true
  }
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
const QuestProgress = sequelize.define('quest_progress', {
  id: { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  userId: { type: Sequelize.INTEGER, allowNull: false },
  questId: { type: Sequelize.INTEGER, allowNull: false },
  status: { type: Sequelize.STRING, defaultValue: 'active' },
  progress: { type: Sequelize.JSONB, defaultValue: {} },
  completed_objectives: { type: Sequelize.JSONB, defaultValue: [] },
  startedAt: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  completedAt: { type: Sequelize.DATE }
});

const QuestObjective = sequelize.define('quest_objective', {
  id: { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  quest_id: { type: Sequelize.INTEGER, allowNull: false },
  type: { type: Sequelize.STRING, allowNull: false },
  description: { type: Sequelize.TEXT, allowNull: false },
  requiredProgress: { type: Sequelize.INTEGER, defaultValue: 1 },
  metadata: { type: Sequelize.JSONB, defaultValue: {} }
});

const QuestObjectiveProgress = sequelize.define('quest_objective_progress', {
  id: { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  userId: { type: Sequelize.INTEGER, allowNull: false },
  objectiveId: { type: Sequelize.INTEGER, allowNull: false },
  currentProgress: { type: Sequelize.INTEGER, defaultValue: 0 },
  requiredProgress: { type: Sequelize.INTEGER, allowNull: false },
  completed: { type: Sequelize.BOOLEAN, defaultValue: false },
  completedAt: { type: Sequelize.DATE },
  metadata: { type: Sequelize.JSONB, defaultValue: {} }
});

async function migrateQuestProgress() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ JSONB
    const questProgresses = await QuestProgress.findAll({
      where: {
        progress: {
          [Sequelize.Op.ne]: {}
        }
      },
      include: [{
        model: QuestObjective,
        as: 'objectives',
        through: { attributes: [] }
      }]
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${questProgresses.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);

    let migratedCount = 0;
    let skippedCount = 0;

    for (const questProgress of questProgresses) {
      try {
        console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç ${questProgress.questId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${questProgress.userId}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –∫–≤–µ—Å—Ç–∞
        const objectives = await QuestObjective.findAll({
          where: { quest_id: questProgress.questId }
        });

        if (objectives.length === 0) {
          console.log(`‚ö†Ô∏è  –¶–µ–ª–∏ –¥–ª—è –∫–≤–µ—Å—Ç–∞ ${questProgress.questId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          skippedCount++;
          continue;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
        for (const objective of objectives) {
          const objectiveId = objective.id;
          const currentProgress = questProgress.progress[objectiveId] || 0;
          const isCompleted = questProgress.completed_objectives.includes(objectiveId);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
          const existingProgress = await QuestObjectiveProgress.findOne({
            where: {
              userId: questProgress.userId,
              objectiveId: objectiveId
            }
          });

          if (existingProgress) {
            console.log(`‚è≠Ô∏è  –ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–∏ ${objectiveId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
          await QuestObjectiveProgress.create({
            userId: questProgress.userId,
            objectiveId: objectiveId,
            currentProgress: currentProgress,
            requiredProgress: objective.requiredProgress,
            completed: isCompleted,
            completedAt: isCompleted ? questProgress.completedAt : null,
            metadata: {
              migratedFrom: 'jsonb',
              migratedAt: new Date().toISOString(),
              originalProgress: currentProgress
            }
          });

          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: —Ü–µ–ª—å ${objectiveId}, –ø—Ä–æ–≥—Ä–µ—Å—Å ${currentProgress}/${objective.requiredProgress}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${isCompleted}`);
        }

        migratedCount++;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–µ—Å—Ç–∞ ${questProgress.questId}:`, error.message);
        skippedCount++;
      }
    }

    console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${migratedCount} –∫–≤–µ—Å—Ç–æ–≤`);
    console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∫–≤–µ—Å—Ç–æ–≤`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    const totalObjectiveProgress = await QuestObjectiveProgress.count();
    console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ quest_objective_progress: ${totalObjectiveProgress}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await sequelize.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
async function rollbackMigration() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');

    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–µ–π
    const deletedCount = await QuestObjectiveProgress.destroy({
      where: {
        metadata: {
          migratedFrom: 'jsonb'
        }
      }
    });

    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    console.log('‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const command = process.argv[2];

  if (command === 'rollback') {
    rollbackMigration().catch(console.error);
  } else {
    migrateQuestProgress().catch(console.error);
  }
}

module.exports = {
  migrateQuestProgress,
  rollbackMigration
};